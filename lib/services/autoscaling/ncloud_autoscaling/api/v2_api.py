# coding: utf-8

"""
    autoscaling

    OpenAPI spec version: 2018-06-21T02:22:22Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_autoscaling.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_auto_scaling_group(self, create_auto_scaling_group_request, **kwargs):  # noqa: E501
        """create_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_auto_scaling_group(create_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAutoScalingGroupRequest create_auto_scaling_group_request: createAutoScalingGroupRequest (required)
        :return: CreateAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_auto_scaling_group_with_http_info(create_auto_scaling_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_auto_scaling_group_with_http_info(create_auto_scaling_group_request, **kwargs)  # noqa: E501
            return data

    def create_auto_scaling_group_with_http_info(self, create_auto_scaling_group_request, **kwargs):  # noqa: E501
        """create_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_auto_scaling_group_with_http_info(create_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAutoScalingGroupRequest create_auto_scaling_group_request: createAutoScalingGroupRequest (required)
        :return: CreateAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_auto_scaling_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_auto_scaling_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_auto_scaling_group_request' is set
        if ('create_auto_scaling_group_request' not in params or
                params['create_auto_scaling_group_request'] is None):
            raise ValueError("Missing the required parameter `create_auto_scaling_group_request` when calling `create_auto_scaling_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_auto_scaling_group_request' in params:
            body_params = params['create_auto_scaling_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createAutoScalingGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAutoScalingGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_launch_configuration(self, create_launch_configuration_request, **kwargs):  # noqa: E501
        """create_launch_configuration  # noqa: E501

        A.론치설정생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_launch_configuration(create_launch_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLaunchConfigurationRequest create_launch_configuration_request: createLaunchConfigurationRequest (required)
        :return: CreateLaunchConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_launch_configuration_with_http_info(create_launch_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_launch_configuration_with_http_info(create_launch_configuration_request, **kwargs)  # noqa: E501
            return data

    def create_launch_configuration_with_http_info(self, create_launch_configuration_request, **kwargs):  # noqa: E501
        """create_launch_configuration  # noqa: E501

        A.론치설정생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_launch_configuration_with_http_info(create_launch_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLaunchConfigurationRequest create_launch_configuration_request: createLaunchConfigurationRequest (required)
        :return: CreateLaunchConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_launch_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_launch_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_launch_configuration_request' is set
        if ('create_launch_configuration_request' not in params or
                params['create_launch_configuration_request'] is None):
            raise ValueError("Missing the required parameter `create_launch_configuration_request` when calling `create_launch_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_launch_configuration_request' in params:
            body_params = params['create_launch_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createLaunchConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLaunchConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_auto_scaling_group(self, delete_auto_scaling_group_request, **kwargs):  # noqa: E501
        """delete_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_auto_scaling_group(delete_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAutoScalingGroupRequest delete_auto_scaling_group_request: deleteAutoScalingGroupRequest (required)
        :return: DeleteAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_auto_scaling_group_with_http_info(delete_auto_scaling_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_auto_scaling_group_with_http_info(delete_auto_scaling_group_request, **kwargs)  # noqa: E501
            return data

    def delete_auto_scaling_group_with_http_info(self, delete_auto_scaling_group_request, **kwargs):  # noqa: E501
        """delete_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_auto_scaling_group_with_http_info(delete_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAutoScalingGroupRequest delete_auto_scaling_group_request: deleteAutoScalingGroupRequest (required)
        :return: DeleteAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_auto_scaling_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auto_scaling_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_auto_scaling_group_request' is set
        if ('delete_auto_scaling_group_request' not in params or
                params['delete_auto_scaling_group_request'] is None):
            raise ValueError("Missing the required parameter `delete_auto_scaling_group_request` when calling `delete_auto_scaling_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_auto_scaling_group_request' in params:
            body_params = params['delete_auto_scaling_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteAutoScalingGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAutoScalingGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_auto_scaling_launch_configuration(self, delete_auto_scaling_launch_configuration_request, **kwargs):  # noqa: E501
        """delete_auto_scaling_launch_configuration  # noqa: E501

        A.오토스케일링론치설정삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_auto_scaling_launch_configuration(delete_auto_scaling_launch_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAutoScalingLaunchConfigurationRequest delete_auto_scaling_launch_configuration_request: deleteAutoScalingLaunchConfigurationRequest (required)
        :return: DeleteAutoScalingLaunchConfigurationRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_auto_scaling_launch_configuration_with_http_info(delete_auto_scaling_launch_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_auto_scaling_launch_configuration_with_http_info(delete_auto_scaling_launch_configuration_request, **kwargs)  # noqa: E501
            return data

    def delete_auto_scaling_launch_configuration_with_http_info(self, delete_auto_scaling_launch_configuration_request, **kwargs):  # noqa: E501
        """delete_auto_scaling_launch_configuration  # noqa: E501

        A.오토스케일링론치설정삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_auto_scaling_launch_configuration_with_http_info(delete_auto_scaling_launch_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAutoScalingLaunchConfigurationRequest delete_auto_scaling_launch_configuration_request: deleteAutoScalingLaunchConfigurationRequest (required)
        :return: DeleteAutoScalingLaunchConfigurationRequest
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_auto_scaling_launch_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auto_scaling_launch_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_auto_scaling_launch_configuration_request' is set
        if ('delete_auto_scaling_launch_configuration_request' not in params or
                params['delete_auto_scaling_launch_configuration_request'] is None):
            raise ValueError("Missing the required parameter `delete_auto_scaling_launch_configuration_request` when calling `delete_auto_scaling_launch_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_auto_scaling_launch_configuration_request' in params:
            body_params = params['delete_auto_scaling_launch_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteAutoScalingLaunchConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAutoScalingLaunchConfigurationRequest',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_policy(self, delete_policy_request, **kwargs):  # noqa: E501
        """delete_policy  # noqa: E501

        F.스케일링정책삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_policy(delete_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePolicyRequest delete_policy_request: deletePolicyRequest (required)
        :return: DeletePolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_policy_with_http_info(delete_policy_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_policy_with_http_info(delete_policy_request, **kwargs)  # noqa: E501
            return data

    def delete_policy_with_http_info(self, delete_policy_request, **kwargs):  # noqa: E501
        """delete_policy  # noqa: E501

        F.스케일링정책삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_policy_with_http_info(delete_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePolicyRequest delete_policy_request: deletePolicyRequest (required)
        :return: DeletePolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_policy_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_policy_request' is set
        if ('delete_policy_request' not in params or
                params['delete_policy_request'] is None):
            raise ValueError("Missing the required parameter `delete_policy_request` when calling `delete_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_policy_request' in params:
            body_params = params['delete_policy_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deletePolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletePolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_scheduled_action(self, delete_scheduled_action_request, **kwargs):  # noqa: E501
        """delete_scheduled_action  # noqa: E501

        C.스케쥴액션삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_scheduled_action(delete_scheduled_action_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteScheduledActionRequest delete_scheduled_action_request: deleteScheduledActionRequest (required)
        :return: DeleteScheduledActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_scheduled_action_with_http_info(delete_scheduled_action_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scheduled_action_with_http_info(delete_scheduled_action_request, **kwargs)  # noqa: E501
            return data

    def delete_scheduled_action_with_http_info(self, delete_scheduled_action_request, **kwargs):  # noqa: E501
        """delete_scheduled_action  # noqa: E501

        C.스케쥴액션삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_scheduled_action_with_http_info(delete_scheduled_action_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteScheduledActionRequest delete_scheduled_action_request: deleteScheduledActionRequest (required)
        :return: DeleteScheduledActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_scheduled_action_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scheduled_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_scheduled_action_request' is set
        if ('delete_scheduled_action_request' not in params or
                params['delete_scheduled_action_request'] is None):
            raise ValueError("Missing the required parameter `delete_scheduled_action_request` when calling `delete_scheduled_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_scheduled_action_request' in params:
            body_params = params['delete_scheduled_action_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteScheduledAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteScheduledActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_policy(self, execute_policy_request, **kwargs):  # noqa: E501
        """execute_policy  # noqa: E501

        F.스케일링정책수행  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.execute_policy(execute_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ExecutePolicyRequest execute_policy_request: executePolicyRequest (required)
        :return: ExecutePolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.execute_policy_with_http_info(execute_policy_request, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_policy_with_http_info(execute_policy_request, **kwargs)  # noqa: E501
            return data

    def execute_policy_with_http_info(self, execute_policy_request, **kwargs):  # noqa: E501
        """execute_policy  # noqa: E501

        F.스케일링정책수행  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.execute_policy_with_http_info(execute_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ExecutePolicyRequest execute_policy_request: executePolicyRequest (required)
        :return: ExecutePolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execute_policy_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execute_policy_request' is set
        if ('execute_policy_request' not in params or
                params['execute_policy_request'] is None):
            raise ValueError("Missing the required parameter `execute_policy_request` when calling `execute_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'execute_policy_request' in params:
            body_params = params['execute_policy_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/executePolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExecutePolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_adjustment_type_list(self, get_adjustment_type_list_request, **kwargs):  # noqa: E501
        """get_adjustment_type_list  # noqa: E501

        F.조정유형리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_adjustment_type_list(get_adjustment_type_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAdjustmentTypeListRequest get_adjustment_type_list_request: getAdjustmentTypeListRequest (required)
        :return: GetAdjustmentTypeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_adjustment_type_list_with_http_info(get_adjustment_type_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_adjustment_type_list_with_http_info(get_adjustment_type_list_request, **kwargs)  # noqa: E501
            return data

    def get_adjustment_type_list_with_http_info(self, get_adjustment_type_list_request, **kwargs):  # noqa: E501
        """get_adjustment_type_list  # noqa: E501

        F.조정유형리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_adjustment_type_list_with_http_info(get_adjustment_type_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAdjustmentTypeListRequest get_adjustment_type_list_request: getAdjustmentTypeListRequest (required)
        :return: GetAdjustmentTypeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_adjustment_type_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_adjustment_type_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_adjustment_type_list_request' is set
        if ('get_adjustment_type_list_request' not in params or
                params['get_adjustment_type_list_request'] is None):
            raise ValueError("Missing the required parameter `get_adjustment_type_list_request` when calling `get_adjustment_type_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_adjustment_type_list_request' in params:
            body_params = params['get_adjustment_type_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAdjustmentTypeList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAdjustmentTypeListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_scaling_activity_log_list(self, get_auto_scaling_activity_log_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_activity_log_list  # noqa: E501

        E.액티비티로그리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_activity_log_list(get_auto_scaling_activity_log_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingActivityLogListRequest get_auto_scaling_activity_log_list_request: getAutoScalingActivityLogListRequest (required)
        :return: GetAutoScalingActivityLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_auto_scaling_activity_log_list_with_http_info(get_auto_scaling_activity_log_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_scaling_activity_log_list_with_http_info(get_auto_scaling_activity_log_list_request, **kwargs)  # noqa: E501
            return data

    def get_auto_scaling_activity_log_list_with_http_info(self, get_auto_scaling_activity_log_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_activity_log_list  # noqa: E501

        E.액티비티로그리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_activity_log_list_with_http_info(get_auto_scaling_activity_log_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingActivityLogListRequest get_auto_scaling_activity_log_list_request: getAutoScalingActivityLogListRequest (required)
        :return: GetAutoScalingActivityLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_auto_scaling_activity_log_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_scaling_activity_log_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_auto_scaling_activity_log_list_request' is set
        if ('get_auto_scaling_activity_log_list_request' not in params or
                params['get_auto_scaling_activity_log_list_request'] is None):
            raise ValueError("Missing the required parameter `get_auto_scaling_activity_log_list_request` when calling `get_auto_scaling_activity_log_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_auto_scaling_activity_log_list_request' in params:
            body_params = params['get_auto_scaling_activity_log_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAutoScalingActivityLogList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAutoScalingActivityLogListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_scaling_configuration_log_list(self, get_auto_scaling_configuration_log_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_configuration_log_list  # noqa: E501

        E.오토스케일링설정로그리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_configuration_log_list(get_auto_scaling_configuration_log_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingConfigurationLogListRequest get_auto_scaling_configuration_log_list_request: getAutoScalingConfigurationLogListRequest (required)
        :return: GetAutoScalingConfigurationLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_auto_scaling_configuration_log_list_with_http_info(get_auto_scaling_configuration_log_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_scaling_configuration_log_list_with_http_info(get_auto_scaling_configuration_log_list_request, **kwargs)  # noqa: E501
            return data

    def get_auto_scaling_configuration_log_list_with_http_info(self, get_auto_scaling_configuration_log_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_configuration_log_list  # noqa: E501

        E.오토스케일링설정로그리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_configuration_log_list_with_http_info(get_auto_scaling_configuration_log_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingConfigurationLogListRequest get_auto_scaling_configuration_log_list_request: getAutoScalingConfigurationLogListRequest (required)
        :return: GetAutoScalingConfigurationLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_auto_scaling_configuration_log_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_scaling_configuration_log_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_auto_scaling_configuration_log_list_request' is set
        if ('get_auto_scaling_configuration_log_list_request' not in params or
                params['get_auto_scaling_configuration_log_list_request'] is None):
            raise ValueError("Missing the required parameter `get_auto_scaling_configuration_log_list_request` when calling `get_auto_scaling_configuration_log_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_auto_scaling_configuration_log_list_request' in params:
            body_params = params['get_auto_scaling_configuration_log_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAutoScalingConfigurationLogList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAutoScalingConfigurationLogListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_scaling_group_list(self, get_auto_scaling_group_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_group_list  # noqa: E501

        B.오토스케일링그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_group_list(get_auto_scaling_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingGroupListRequest get_auto_scaling_group_list_request: getAutoScalingGroupListRequest (required)
        :return: GetAutoScalingGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_auto_scaling_group_list_with_http_info(get_auto_scaling_group_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_scaling_group_list_with_http_info(get_auto_scaling_group_list_request, **kwargs)  # noqa: E501
            return data

    def get_auto_scaling_group_list_with_http_info(self, get_auto_scaling_group_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_group_list  # noqa: E501

        B.오토스케일링그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_group_list_with_http_info(get_auto_scaling_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingGroupListRequest get_auto_scaling_group_list_request: getAutoScalingGroupListRequest (required)
        :return: GetAutoScalingGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_auto_scaling_group_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_scaling_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_auto_scaling_group_list_request' is set
        if ('get_auto_scaling_group_list_request' not in params or
                params['get_auto_scaling_group_list_request'] is None):
            raise ValueError("Missing the required parameter `get_auto_scaling_group_list_request` when calling `get_auto_scaling_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_auto_scaling_group_list_request' in params:
            body_params = params['get_auto_scaling_group_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAutoScalingGroupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAutoScalingGroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_scaling_policy_list(self, get_auto_scaling_policy_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_policy_list  # noqa: E501

        F.오토스케일링정책리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_policy_list(get_auto_scaling_policy_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingPolicyListRequest get_auto_scaling_policy_list_request: getAutoScalingPolicyListRequest (required)
        :return: GetAutoScalingPolicyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_auto_scaling_policy_list_with_http_info(get_auto_scaling_policy_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_scaling_policy_list_with_http_info(get_auto_scaling_policy_list_request, **kwargs)  # noqa: E501
            return data

    def get_auto_scaling_policy_list_with_http_info(self, get_auto_scaling_policy_list_request, **kwargs):  # noqa: E501
        """get_auto_scaling_policy_list  # noqa: E501

        F.오토스케일링정책리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_scaling_policy_list_with_http_info(get_auto_scaling_policy_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAutoScalingPolicyListRequest get_auto_scaling_policy_list_request: getAutoScalingPolicyListRequest (required)
        :return: GetAutoScalingPolicyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_auto_scaling_policy_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_scaling_policy_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_auto_scaling_policy_list_request' is set
        if ('get_auto_scaling_policy_list_request' not in params or
                params['get_auto_scaling_policy_list_request'] is None):
            raise ValueError("Missing the required parameter `get_auto_scaling_policy_list_request` when calling `get_auto_scaling_policy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_auto_scaling_policy_list_request' in params:
            body_params = params['get_auto_scaling_policy_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAutoScalingPolicyList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAutoScalingPolicyListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_launch_configuration_list(self, get_launch_configuration_list_request, **kwargs):  # noqa: E501
        """get_launch_configuration_list  # noqa: E501

        A.론치설정리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_launch_configuration_list(get_launch_configuration_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLaunchConfigurationListRequest get_launch_configuration_list_request: getLaunchConfigurationListRequest (required)
        :return: GetLaunchConfigurationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_launch_configuration_list_with_http_info(get_launch_configuration_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_launch_configuration_list_with_http_info(get_launch_configuration_list_request, **kwargs)  # noqa: E501
            return data

    def get_launch_configuration_list_with_http_info(self, get_launch_configuration_list_request, **kwargs):  # noqa: E501
        """get_launch_configuration_list  # noqa: E501

        A.론치설정리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_launch_configuration_list_with_http_info(get_launch_configuration_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLaunchConfigurationListRequest get_launch_configuration_list_request: getLaunchConfigurationListRequest (required)
        :return: GetLaunchConfigurationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_launch_configuration_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_launch_configuration_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_launch_configuration_list_request' is set
        if ('get_launch_configuration_list_request' not in params or
                params['get_launch_configuration_list_request'] is None):
            raise ValueError("Missing the required parameter `get_launch_configuration_list_request` when calling `get_launch_configuration_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_launch_configuration_list_request' in params:
            body_params = params['get_launch_configuration_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLaunchConfigurationList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLaunchConfigurationListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scaling_process_type_list(self, get_scaling_process_type_list_request, **kwargs):  # noqa: E501
        """get_scaling_process_type_list  # noqa: E501

        D.프로세스구분리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scaling_process_type_list(get_scaling_process_type_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetScalingProcessTypeListRequest get_scaling_process_type_list_request: getScalingProcessTypeListRequest (required)
        :return: GetScalingProcessTypeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_scaling_process_type_list_with_http_info(get_scaling_process_type_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scaling_process_type_list_with_http_info(get_scaling_process_type_list_request, **kwargs)  # noqa: E501
            return data

    def get_scaling_process_type_list_with_http_info(self, get_scaling_process_type_list_request, **kwargs):  # noqa: E501
        """get_scaling_process_type_list  # noqa: E501

        D.프로세스구분리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scaling_process_type_list_with_http_info(get_scaling_process_type_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetScalingProcessTypeListRequest get_scaling_process_type_list_request: getScalingProcessTypeListRequest (required)
        :return: GetScalingProcessTypeListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_scaling_process_type_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scaling_process_type_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_scaling_process_type_list_request' is set
        if ('get_scaling_process_type_list_request' not in params or
                params['get_scaling_process_type_list_request'] is None):
            raise ValueError("Missing the required parameter `get_scaling_process_type_list_request` when calling `get_scaling_process_type_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_scaling_process_type_list_request' in params:
            body_params = params['get_scaling_process_type_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getScalingProcessTypeList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetScalingProcessTypeListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scheduled_action_list(self, get_scheduled_action_list_request, **kwargs):  # noqa: E501
        """get_scheduled_action_list  # noqa: E501

        C.스케쥴액션리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scheduled_action_list(get_scheduled_action_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetScheduledActionListRequest get_scheduled_action_list_request: getScheduledActionListRequest (required)
        :return: GetScheduledActionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_scheduled_action_list_with_http_info(get_scheduled_action_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scheduled_action_list_with_http_info(get_scheduled_action_list_request, **kwargs)  # noqa: E501
            return data

    def get_scheduled_action_list_with_http_info(self, get_scheduled_action_list_request, **kwargs):  # noqa: E501
        """get_scheduled_action_list  # noqa: E501

        C.스케쥴액션리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scheduled_action_list_with_http_info(get_scheduled_action_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetScheduledActionListRequest get_scheduled_action_list_request: getScheduledActionListRequest (required)
        :return: GetScheduledActionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_scheduled_action_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scheduled_action_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_scheduled_action_list_request' is set
        if ('get_scheduled_action_list_request' not in params or
                params['get_scheduled_action_list_request'] is None):
            raise ValueError("Missing the required parameter `get_scheduled_action_list_request` when calling `get_scheduled_action_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_scheduled_action_list_request' in params:
            body_params = params['get_scheduled_action_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getScheduledActionList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetScheduledActionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_scaling_policy(self, put_scaling_policy_request, **kwargs):  # noqa: E501
        """put_scaling_policy  # noqa: E501

        F.스케일링정책생성/변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_scaling_policy(put_scaling_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PutScalingPolicyRequest put_scaling_policy_request: putScalingPolicyRequest (required)
        :return: PutScalingPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_scaling_policy_with_http_info(put_scaling_policy_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_scaling_policy_with_http_info(put_scaling_policy_request, **kwargs)  # noqa: E501
            return data

    def put_scaling_policy_with_http_info(self, put_scaling_policy_request, **kwargs):  # noqa: E501
        """put_scaling_policy  # noqa: E501

        F.스케일링정책생성/변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_scaling_policy_with_http_info(put_scaling_policy_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PutScalingPolicyRequest put_scaling_policy_request: putScalingPolicyRequest (required)
        :return: PutScalingPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['put_scaling_policy_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_scaling_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'put_scaling_policy_request' is set
        if ('put_scaling_policy_request' not in params or
                params['put_scaling_policy_request'] is None):
            raise ValueError("Missing the required parameter `put_scaling_policy_request` when calling `put_scaling_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'put_scaling_policy_request' in params:
            body_params = params['put_scaling_policy_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/putScalingPolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutScalingPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_scheduled_update_group_action(self, put_scheduled_update_group_action_request, **kwargs):  # noqa: E501
        """put_scheduled_update_group_action  # noqa: E501

        C.스케쥴액션생성|수정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_scheduled_update_group_action(put_scheduled_update_group_action_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PutScheduledUpdateGroupActionRequest put_scheduled_update_group_action_request: putScheduledUpdateGroupActionRequest (required)
        :return: PutScheduledUpdateGroupActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_scheduled_update_group_action_with_http_info(put_scheduled_update_group_action_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_scheduled_update_group_action_with_http_info(put_scheduled_update_group_action_request, **kwargs)  # noqa: E501
            return data

    def put_scheduled_update_group_action_with_http_info(self, put_scheduled_update_group_action_request, **kwargs):  # noqa: E501
        """put_scheduled_update_group_action  # noqa: E501

        C.스케쥴액션생성|수정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_scheduled_update_group_action_with_http_info(put_scheduled_update_group_action_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param PutScheduledUpdateGroupActionRequest put_scheduled_update_group_action_request: putScheduledUpdateGroupActionRequest (required)
        :return: PutScheduledUpdateGroupActionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['put_scheduled_update_group_action_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_scheduled_update_group_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'put_scheduled_update_group_action_request' is set
        if ('put_scheduled_update_group_action_request' not in params or
                params['put_scheduled_update_group_action_request'] is None):
            raise ValueError("Missing the required parameter `put_scheduled_update_group_action_request` when calling `put_scheduled_update_group_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'put_scheduled_update_group_action_request' in params:
            body_params = params['put_scheduled_update_group_action_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/putScheduledUpdateGroupAction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PutScheduledUpdateGroupActionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_processes(self, resume_processes_request, **kwargs):  # noqa: E501
        """resume_processes  # noqa: E501

        D.프로세스재개  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_processes(resume_processes_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResumeProcessesRequest resume_processes_request: resumeProcessesRequest (required)
        :return: ResumeProcessesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resume_processes_with_http_info(resume_processes_request, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_processes_with_http_info(resume_processes_request, **kwargs)  # noqa: E501
            return data

    def resume_processes_with_http_info(self, resume_processes_request, **kwargs):  # noqa: E501
        """resume_processes  # noqa: E501

        D.프로세스재개  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resume_processes_with_http_info(resume_processes_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ResumeProcessesRequest resume_processes_request: resumeProcessesRequest (required)
        :return: ResumeProcessesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resume_processes_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resume_processes_request' is set
        if ('resume_processes_request' not in params or
                params['resume_processes_request'] is None):
            raise ValueError("Missing the required parameter `resume_processes_request` when calling `resume_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resume_processes_request' in params:
            body_params = params['resume_processes_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/resumeProcesses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResumeProcessesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_desired_capacity(self, set_desired_capacity_request, **kwargs):  # noqa: E501
        """set_desired_capacity  # noqa: E501

        B.기대용량치갱신  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_desired_capacity(set_desired_capacity_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetDesiredCapacityRequest set_desired_capacity_request: setDesiredCapacityRequest (required)
        :return: SetDesiredCapacityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_desired_capacity_with_http_info(set_desired_capacity_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_desired_capacity_with_http_info(set_desired_capacity_request, **kwargs)  # noqa: E501
            return data

    def set_desired_capacity_with_http_info(self, set_desired_capacity_request, **kwargs):  # noqa: E501
        """set_desired_capacity  # noqa: E501

        B.기대용량치갱신  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_desired_capacity_with_http_info(set_desired_capacity_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetDesiredCapacityRequest set_desired_capacity_request: setDesiredCapacityRequest (required)
        :return: SetDesiredCapacityResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_desired_capacity_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_desired_capacity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_desired_capacity_request' is set
        if ('set_desired_capacity_request' not in params or
                params['set_desired_capacity_request'] is None):
            raise ValueError("Missing the required parameter `set_desired_capacity_request` when calling `set_desired_capacity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_desired_capacity_request' in params:
            body_params = params['set_desired_capacity_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setDesiredCapacity', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetDesiredCapacityResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_server_instance_health(self, set_server_instance_health_request, **kwargs):  # noqa: E501
        """set_server_instance_health  # noqa: E501

        B.서버인스턴스헬스상태갱신  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_server_instance_health(set_server_instance_health_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetServerInstanceHealthRequest set_server_instance_health_request: setServerInstanceHealthRequest (required)
        :return: SetServerInstanceHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_server_instance_health_with_http_info(set_server_instance_health_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_server_instance_health_with_http_info(set_server_instance_health_request, **kwargs)  # noqa: E501
            return data

    def set_server_instance_health_with_http_info(self, set_server_instance_health_request, **kwargs):  # noqa: E501
        """set_server_instance_health  # noqa: E501

        B.서버인스턴스헬스상태갱신  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_server_instance_health_with_http_info(set_server_instance_health_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetServerInstanceHealthRequest set_server_instance_health_request: setServerInstanceHealthRequest (required)
        :return: SetServerInstanceHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_server_instance_health_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_server_instance_health" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_server_instance_health_request' is set
        if ('set_server_instance_health_request' not in params or
                params['set_server_instance_health_request'] is None):
            raise ValueError("Missing the required parameter `set_server_instance_health_request` when calling `set_server_instance_health`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_server_instance_health_request' in params:
            body_params = params['set_server_instance_health_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setServerInstanceHealth', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetServerInstanceHealthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suspend_processes(self, suspend_processes_request, **kwargs):  # noqa: E501
        """suspend_processes  # noqa: E501

        D.프로세스보류  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.suspend_processes(suspend_processes_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SuspendProcessesRequest suspend_processes_request: suspendProcessesRequest (required)
        :return: SuspendProcessesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.suspend_processes_with_http_info(suspend_processes_request, **kwargs)  # noqa: E501
        else:
            (data) = self.suspend_processes_with_http_info(suspend_processes_request, **kwargs)  # noqa: E501
            return data

    def suspend_processes_with_http_info(self, suspend_processes_request, **kwargs):  # noqa: E501
        """suspend_processes  # noqa: E501

        D.프로세스보류  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.suspend_processes_with_http_info(suspend_processes_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SuspendProcessesRequest suspend_processes_request: suspendProcessesRequest (required)
        :return: SuspendProcessesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['suspend_processes_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_processes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'suspend_processes_request' is set
        if ('suspend_processes_request' not in params or
                params['suspend_processes_request'] is None):
            raise ValueError("Missing the required parameter `suspend_processes_request` when calling `suspend_processes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'suspend_processes_request' in params:
            body_params = params['suspend_processes_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/suspendProcesses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuspendProcessesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terminate_server_instance_in_auto_scaling_group(self, terminate_server_instance_in_auto_scaling_group_request, **kwargs):  # noqa: E501
        """terminate_server_instance_in_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹에속한서버인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.terminate_server_instance_in_auto_scaling_group(terminate_server_instance_in_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TerminateServerInstanceInAutoScalingGroupRequest terminate_server_instance_in_auto_scaling_group_request: terminateServerInstanceInAutoScalingGroupRequest (required)
        :return: TerminateServerInstanceInAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.terminate_server_instance_in_auto_scaling_group_with_http_info(terminate_server_instance_in_auto_scaling_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.terminate_server_instance_in_auto_scaling_group_with_http_info(terminate_server_instance_in_auto_scaling_group_request, **kwargs)  # noqa: E501
            return data

    def terminate_server_instance_in_auto_scaling_group_with_http_info(self, terminate_server_instance_in_auto_scaling_group_request, **kwargs):  # noqa: E501
        """terminate_server_instance_in_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹에속한서버인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.terminate_server_instance_in_auto_scaling_group_with_http_info(terminate_server_instance_in_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TerminateServerInstanceInAutoScalingGroupRequest terminate_server_instance_in_auto_scaling_group_request: terminateServerInstanceInAutoScalingGroupRequest (required)
        :return: TerminateServerInstanceInAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['terminate_server_instance_in_auto_scaling_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_server_instance_in_auto_scaling_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'terminate_server_instance_in_auto_scaling_group_request' is set
        if ('terminate_server_instance_in_auto_scaling_group_request' not in params or
                params['terminate_server_instance_in_auto_scaling_group_request'] is None):
            raise ValueError("Missing the required parameter `terminate_server_instance_in_auto_scaling_group_request` when calling `terminate_server_instance_in_auto_scaling_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terminate_server_instance_in_auto_scaling_group_request' in params:
            body_params = params['terminate_server_instance_in_auto_scaling_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/terminateServerInstanceInAutoScalingGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerminateServerInstanceInAutoScalingGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auto_scaling_group(self, update_auto_scaling_group_request, **kwargs):  # noqa: E501
        """update_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹수정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_auto_scaling_group(update_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateAutoScalingGroupRequest update_auto_scaling_group_request: updateAutoScalingGroupRequest (required)
        :return: UpdateAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_auto_scaling_group_with_http_info(update_auto_scaling_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auto_scaling_group_with_http_info(update_auto_scaling_group_request, **kwargs)  # noqa: E501
            return data

    def update_auto_scaling_group_with_http_info(self, update_auto_scaling_group_request, **kwargs):  # noqa: E501
        """update_auto_scaling_group  # noqa: E501

        B.오토스케일링그룹수정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_auto_scaling_group_with_http_info(update_auto_scaling_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateAutoScalingGroupRequest update_auto_scaling_group_request: updateAutoScalingGroupRequest (required)
        :return: UpdateAutoScalingGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_auto_scaling_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auto_scaling_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_auto_scaling_group_request' is set
        if ('update_auto_scaling_group_request' not in params or
                params['update_auto_scaling_group_request'] is None):
            raise ValueError("Missing the required parameter `update_auto_scaling_group_request` when calling `update_auto_scaling_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_auto_scaling_group_request' in params:
            body_params = params['update_auto_scaling_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/updateAutoScalingGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateAutoScalingGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
