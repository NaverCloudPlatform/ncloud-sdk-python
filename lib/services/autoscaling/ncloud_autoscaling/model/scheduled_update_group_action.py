# coding: utf-8

"""
    autoscaling

    OpenAPI spec version: 2018-06-21T02:22:22Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScheduledUpdateGroupAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_scaling_group_name': 'str',
        'scheduled_action_name': 'str',
        'desired_capacity': 'int',
        'min_size': 'int',
        'max_size': 'int',
        'start_time': 'str',
        'end_time': 'str',
        'recurrence_in_kst': 'str'
    }

    attribute_map = {
        'auto_scaling_group_name': 'autoScalingGroupName',
        'scheduled_action_name': 'scheduledActionName',
        'desired_capacity': 'desiredCapacity',
        'min_size': 'minSize',
        'max_size': 'maxSize',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'recurrence_in_kst': 'recurrenceInKST'
    }

    def __init__(self, auto_scaling_group_name=None, scheduled_action_name=None, desired_capacity=None, min_size=None, max_size=None, start_time=None, end_time=None, recurrence_in_kst=None):  # noqa: E501
        """ScheduledUpdateGroupAction - a model defined in Swagger"""  # noqa: E501

        self._auto_scaling_group_name = None
        self._scheduled_action_name = None
        self._desired_capacity = None
        self._min_size = None
        self._max_size = None
        self._start_time = None
        self._end_time = None
        self._recurrence_in_kst = None
        self.discriminator = None

        if auto_scaling_group_name is not None:
            self.auto_scaling_group_name = auto_scaling_group_name
        if scheduled_action_name is not None:
            self.scheduled_action_name = scheduled_action_name
        if desired_capacity is not None:
            self.desired_capacity = desired_capacity
        if min_size is not None:
            self.min_size = min_size
        if max_size is not None:
            self.max_size = max_size
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if recurrence_in_kst is not None:
            self.recurrence_in_kst = recurrence_in_kst

    @property
    def auto_scaling_group_name(self):
        """Gets the auto_scaling_group_name of this ScheduledUpdateGroupAction.  # noqa: E501

        오토스케일링그룹명  # noqa: E501

        :return: The auto_scaling_group_name of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: str
        """
        return self._auto_scaling_group_name

    @auto_scaling_group_name.setter
    def auto_scaling_group_name(self, auto_scaling_group_name):
        """Sets the auto_scaling_group_name of this ScheduledUpdateGroupAction.

        오토스케일링그룹명  # noqa: E501

        :param auto_scaling_group_name: The auto_scaling_group_name of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: str
        """

        self._auto_scaling_group_name = auto_scaling_group_name

    @property
    def scheduled_action_name(self):
        """Gets the scheduled_action_name of this ScheduledUpdateGroupAction.  # noqa: E501

        스케쥴액션명  # noqa: E501

        :return: The scheduled_action_name of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_action_name

    @scheduled_action_name.setter
    def scheduled_action_name(self, scheduled_action_name):
        """Sets the scheduled_action_name of this ScheduledUpdateGroupAction.

        스케쥴액션명  # noqa: E501

        :param scheduled_action_name: The scheduled_action_name of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: str
        """

        self._scheduled_action_name = scheduled_action_name

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this ScheduledUpdateGroupAction.  # noqa: E501

        기대능력치  # noqa: E501

        :return: The desired_capacity of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this ScheduledUpdateGroupAction.

        기대능력치  # noqa: E501

        :param desired_capacity: The desired_capacity of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: int
        """

        self._desired_capacity = desired_capacity

    @property
    def min_size(self):
        """Gets the min_size of this ScheduledUpdateGroupAction.  # noqa: E501

        최소사이즈  # noqa: E501

        :return: The min_size of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this ScheduledUpdateGroupAction.

        최소사이즈  # noqa: E501

        :param min_size: The min_size of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: int
        """

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this ScheduledUpdateGroupAction.  # noqa: E501

        최대사이즈  # noqa: E501

        :return: The max_size of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this ScheduledUpdateGroupAction.

        최대사이즈  # noqa: E501

        :param max_size: The max_size of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: int
        """

        self._max_size = max_size

    @property
    def start_time(self):
        """Gets the start_time of this ScheduledUpdateGroupAction.  # noqa: E501

        스케줄시작시간  # noqa: E501

        :return: The start_time of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ScheduledUpdateGroupAction.

        스케줄시작시간  # noqa: E501

        :param start_time: The start_time of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ScheduledUpdateGroupAction.  # noqa: E501

        반복스케쥴종료시간  # noqa: E501

        :return: The end_time of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ScheduledUpdateGroupAction.

        반복스케쥴종료시간  # noqa: E501

        :param end_time: The end_time of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def recurrence_in_kst(self):
        """Gets the recurrence_in_kst of this ScheduledUpdateGroupAction.  # noqa: E501

        반복스케쥴설정  # noqa: E501

        :return: The recurrence_in_kst of this ScheduledUpdateGroupAction.  # noqa: E501
        :rtype: str
        """
        return self._recurrence_in_kst

    @recurrence_in_kst.setter
    def recurrence_in_kst(self, recurrence_in_kst):
        """Sets the recurrence_in_kst of this ScheduledUpdateGroupAction.

        반복스케쥴설정  # noqa: E501

        :param recurrence_in_kst: The recurrence_in_kst of this ScheduledUpdateGroupAction.  # noqa: E501
        :type: str
        """

        self._recurrence_in_kst = recurrence_in_kst

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledUpdateGroupAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
