# coding: utf-8

"""
    autoscaling

    OpenAPI spec version: 2018-06-21T02:22:22Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_autoscaling.model.access_control_group import AccessControlGroup  # noqa: F401,E501


class LaunchConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'launch_configuration_name': 'str',
        'server_image_product_code': 'str',
        'server_product_code': 'str',
        'member_server_image_no': 'str',
        'login_key_name': 'str',
        'create_date': 'str',
        'user_data': 'str',
        'access_control_group_list': 'list[AccessControlGroup]'
    }

    attribute_map = {
        'launch_configuration_name': 'launchConfigurationName',
        'server_image_product_code': 'serverImageProductCode',
        'server_product_code': 'serverProductCode',
        'member_server_image_no': 'memberServerImageNo',
        'login_key_name': 'loginKeyName',
        'create_date': 'createDate',
        'user_data': 'userData',
        'access_control_group_list': 'accessControlGroupList'
    }

    def __init__(self, launch_configuration_name=None, server_image_product_code=None, server_product_code=None, member_server_image_no=None, login_key_name=None, create_date=None, user_data=None, access_control_group_list=None):  # noqa: E501
        """LaunchConfiguration - a model defined in Swagger"""  # noqa: E501

        self._launch_configuration_name = None
        self._server_image_product_code = None
        self._server_product_code = None
        self._member_server_image_no = None
        self._login_key_name = None
        self._create_date = None
        self._user_data = None
        self._access_control_group_list = None
        self.discriminator = None

        if launch_configuration_name is not None:
            self.launch_configuration_name = launch_configuration_name
        if server_image_product_code is not None:
            self.server_image_product_code = server_image_product_code
        if server_product_code is not None:
            self.server_product_code = server_product_code
        if member_server_image_no is not None:
            self.member_server_image_no = member_server_image_no
        if login_key_name is not None:
            self.login_key_name = login_key_name
        if create_date is not None:
            self.create_date = create_date
        if user_data is not None:
            self.user_data = user_data
        if access_control_group_list is not None:
            self.access_control_group_list = access_control_group_list

    @property
    def launch_configuration_name(self):
        """Gets the launch_configuration_name of this LaunchConfiguration.  # noqa: E501

        론치설정명  # noqa: E501

        :return: The launch_configuration_name of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._launch_configuration_name

    @launch_configuration_name.setter
    def launch_configuration_name(self, launch_configuration_name):
        """Sets the launch_configuration_name of this LaunchConfiguration.

        론치설정명  # noqa: E501

        :param launch_configuration_name: The launch_configuration_name of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._launch_configuration_name = launch_configuration_name

    @property
    def server_image_product_code(self):
        """Gets the server_image_product_code of this LaunchConfiguration.  # noqa: E501

        서버이미지상품코드  # noqa: E501

        :return: The server_image_product_code of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_image_product_code

    @server_image_product_code.setter
    def server_image_product_code(self, server_image_product_code):
        """Sets the server_image_product_code of this LaunchConfiguration.

        서버이미지상품코드  # noqa: E501

        :param server_image_product_code: The server_image_product_code of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._server_image_product_code = server_image_product_code

    @property
    def server_product_code(self):
        """Gets the server_product_code of this LaunchConfiguration.  # noqa: E501

        서버상품코드  # noqa: E501

        :return: The server_product_code of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_product_code

    @server_product_code.setter
    def server_product_code(self, server_product_code):
        """Sets the server_product_code of this LaunchConfiguration.

        서버상품코드  # noqa: E501

        :param server_product_code: The server_product_code of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._server_product_code = server_product_code

    @property
    def member_server_image_no(self):
        """Gets the member_server_image_no of this LaunchConfiguration.  # noqa: E501

        회원서버이미지번호  # noqa: E501

        :return: The member_server_image_no of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._member_server_image_no

    @member_server_image_no.setter
    def member_server_image_no(self, member_server_image_no):
        """Sets the member_server_image_no of this LaunchConfiguration.

        회원서버이미지번호  # noqa: E501

        :param member_server_image_no: The member_server_image_no of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._member_server_image_no = member_server_image_no

    @property
    def login_key_name(self):
        """Gets the login_key_name of this LaunchConfiguration.  # noqa: E501

        로그인키명  # noqa: E501

        :return: The login_key_name of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._login_key_name

    @login_key_name.setter
    def login_key_name(self, login_key_name):
        """Sets the login_key_name of this LaunchConfiguration.

        로그인키명  # noqa: E501

        :param login_key_name: The login_key_name of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._login_key_name = login_key_name

    @property
    def create_date(self):
        """Gets the create_date of this LaunchConfiguration.  # noqa: E501

        생성일시  # noqa: E501

        :return: The create_date of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this LaunchConfiguration.

        생성일시  # noqa: E501

        :param create_date: The create_date of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def user_data(self):
        """Gets the user_data of this LaunchConfiguration.  # noqa: E501

        사용자데이터  # noqa: E501

        :return: The user_data of this LaunchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this LaunchConfiguration.

        사용자데이터  # noqa: E501

        :param user_data: The user_data of this LaunchConfiguration.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    @property
    def access_control_group_list(self):
        """Gets the access_control_group_list of this LaunchConfiguration.  # noqa: E501

        ACG리스트  # noqa: E501

        :return: The access_control_group_list of this LaunchConfiguration.  # noqa: E501
        :rtype: list[AccessControlGroup]
        """
        return self._access_control_group_list

    @access_control_group_list.setter
    def access_control_group_list(self, access_control_group_list):
        """Sets the access_control_group_list of this LaunchConfiguration.

        ACG리스트  # noqa: E501

        :param access_control_group_list: The access_control_group_list of this LaunchConfiguration.  # noqa: E501
        :type: list[AccessControlGroup]
        """

        self._access_control_group_list = access_control_group_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaunchConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
