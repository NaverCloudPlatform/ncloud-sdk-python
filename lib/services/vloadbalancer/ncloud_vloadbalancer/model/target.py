# coding: utf-8

"""
    vloadbalancer

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vloadbalancer.model.common_code import CommonCode  # noqa: F401,E501


class Target(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_no': 'str',
        'health_check_status': 'CommonCode',
        'health_check_response': 'str'
    }

    attribute_map = {
        'target_no': 'targetNo',
        'health_check_status': 'healthCheckStatus',
        'health_check_response': 'healthCheckResponse'
    }

    def __init__(self, target_no=None, health_check_status=None, health_check_response=None):  # noqa: E501
        """Target - a model defined in Swagger"""  # noqa: E501

        self._target_no = None
        self._health_check_status = None
        self._health_check_response = None
        self.discriminator = None

        if target_no is not None:
            self.target_no = target_no
        if health_check_status is not None:
            self.health_check_status = health_check_status
        if health_check_response is not None:
            self.health_check_response = health_check_response

    @property
    def target_no(self):
        """Gets the target_no of this Target.  # noqa: E501

        타겟번호  # noqa: E501

        :return: The target_no of this Target.  # noqa: E501
        :rtype: str
        """
        return self._target_no

    @target_no.setter
    def target_no(self, target_no):
        """Sets the target_no of this Target.

        타겟번호  # noqa: E501

        :param target_no: The target_no of this Target.  # noqa: E501
        :type: str
        """

        self._target_no = target_no

    @property
    def health_check_status(self):
        """Gets the health_check_status of this Target.  # noqa: E501

        헬스체크상태  # noqa: E501

        :return: The health_check_status of this Target.  # noqa: E501
        :rtype: CommonCode
        """
        return self._health_check_status

    @health_check_status.setter
    def health_check_status(self, health_check_status):
        """Sets the health_check_status of this Target.

        헬스체크상태  # noqa: E501

        :param health_check_status: The health_check_status of this Target.  # noqa: E501
        :type: CommonCode
        """

        self._health_check_status = health_check_status

    @property
    def health_check_response(self):
        """Gets the health_check_response of this Target.  # noqa: E501

        헬스체크응답  # noqa: E501

        :return: The health_check_response of this Target.  # noqa: E501
        :rtype: str
        """
        return self._health_check_response

    @health_check_response.setter
    def health_check_response(self, health_check_response):
        """Sets the health_check_response of this Target.

        헬스체크응답  # noqa: E501

        :param health_check_response: The health_check_response of this Target.  # noqa: E501
        :type: str
        """

        self._health_check_response = health_check_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Target):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
