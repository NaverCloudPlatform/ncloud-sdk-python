# coding: utf-8

"""
    vloadbalancer

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vloadbalancer.model.common_code import CommonCode  # noqa: F401,E501
from ncloud_vloadbalancer.model.host_header_condition import HostHeaderCondition  # noqa: F401,E501
from ncloud_vloadbalancer.model.path_pattern_condition import PathPatternCondition  # noqa: F401,E501


class LoadBalancerRuleCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_condition_type': 'CommonCode',
        'host_header_condition': 'HostHeaderCondition',
        'path_pattern_condition': 'PathPatternCondition'
    }

    attribute_map = {
        'rule_condition_type': 'ruleConditionType',
        'host_header_condition': 'hostHeaderCondition',
        'path_pattern_condition': 'pathPatternCondition'
    }

    def __init__(self, rule_condition_type=None, host_header_condition=None, path_pattern_condition=None):  # noqa: E501
        """LoadBalancerRuleCondition - a model defined in Swagger"""  # noqa: E501

        self._rule_condition_type = None
        self._host_header_condition = None
        self._path_pattern_condition = None
        self.discriminator = None

        if rule_condition_type is not None:
            self.rule_condition_type = rule_condition_type
        if host_header_condition is not None:
            self.host_header_condition = host_header_condition
        if path_pattern_condition is not None:
            self.path_pattern_condition = path_pattern_condition

    @property
    def rule_condition_type(self):
        """Gets the rule_condition_type of this LoadBalancerRuleCondition.  # noqa: E501

        룰조건유형  # noqa: E501

        :return: The rule_condition_type of this LoadBalancerRuleCondition.  # noqa: E501
        :rtype: CommonCode
        """
        return self._rule_condition_type

    @rule_condition_type.setter
    def rule_condition_type(self, rule_condition_type):
        """Sets the rule_condition_type of this LoadBalancerRuleCondition.

        룰조건유형  # noqa: E501

        :param rule_condition_type: The rule_condition_type of this LoadBalancerRuleCondition.  # noqa: E501
        :type: CommonCode
        """

        self._rule_condition_type = rule_condition_type

    @property
    def host_header_condition(self):
        """Gets the host_header_condition of this LoadBalancerRuleCondition.  # noqa: E501

        호스트헤더조건  # noqa: E501

        :return: The host_header_condition of this LoadBalancerRuleCondition.  # noqa: E501
        :rtype: HostHeaderCondition
        """
        return self._host_header_condition

    @host_header_condition.setter
    def host_header_condition(self, host_header_condition):
        """Sets the host_header_condition of this LoadBalancerRuleCondition.

        호스트헤더조건  # noqa: E501

        :param host_header_condition: The host_header_condition of this LoadBalancerRuleCondition.  # noqa: E501
        :type: HostHeaderCondition
        """

        self._host_header_condition = host_header_condition

    @property
    def path_pattern_condition(self):
        """Gets the path_pattern_condition of this LoadBalancerRuleCondition.  # noqa: E501

        경로패턴조건  # noqa: E501

        :return: The path_pattern_condition of this LoadBalancerRuleCondition.  # noqa: E501
        :rtype: PathPatternCondition
        """
        return self._path_pattern_condition

    @path_pattern_condition.setter
    def path_pattern_condition(self, path_pattern_condition):
        """Sets the path_pattern_condition of this LoadBalancerRuleCondition.

        경로패턴조건  # noqa: E501

        :param path_pattern_condition: The path_pattern_condition of this LoadBalancerRuleCondition.  # noqa: E501
        :type: PathPatternCondition
        """

        self._path_pattern_condition = path_pattern_condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancerRuleCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
