# coding: utf-8

"""
    vloadbalancer

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChangeTargetGroupConfigurationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'algorithm_type_code': 'str',
        'use_proxy_protocol': 'bool',
        'use_sticky_session': 'bool',
        'target_group_no': 'str'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'algorithm_type_code': 'algorithmTypeCode',
        'use_proxy_protocol': 'useProxyProtocol',
        'use_sticky_session': 'useStickySession',
        'target_group_no': 'targetGroupNo'
    }

    def __init__(self, region_code=None, algorithm_type_code=None, use_proxy_protocol=None, use_sticky_session=None, target_group_no=None):  # noqa: E501
        """ChangeTargetGroupConfigurationRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._algorithm_type_code = None
        self._use_proxy_protocol = None
        self._use_sticky_session = None
        self._target_group_no = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        if algorithm_type_code is not None:
            self.algorithm_type_code = algorithm_type_code
        if use_proxy_protocol is not None:
            self.use_proxy_protocol = use_proxy_protocol
        if use_sticky_session is not None:
            self.use_sticky_session = use_sticky_session
        self.target_group_no = target_group_no

    @property
    def region_code(self):
        """Gets the region_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ChangeTargetGroupConfigurationRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def algorithm_type_code(self):
        """Gets the algorithm_type_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501

        알고리즘유형코드  # noqa: E501

        :return: The algorithm_type_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_type_code

    @algorithm_type_code.setter
    def algorithm_type_code(self, algorithm_type_code):
        """Sets the algorithm_type_code of this ChangeTargetGroupConfigurationRequest.

        알고리즘유형코드  # noqa: E501

        :param algorithm_type_code: The algorithm_type_code of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._algorithm_type_code = algorithm_type_code

    @property
    def use_proxy_protocol(self):
        """Gets the use_proxy_protocol of this ChangeTargetGroupConfigurationRequest.  # noqa: E501

        프록시프로토콜사용여부  # noqa: E501

        :return: The use_proxy_protocol of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_proxy_protocol

    @use_proxy_protocol.setter
    def use_proxy_protocol(self, use_proxy_protocol):
        """Sets the use_proxy_protocol of this ChangeTargetGroupConfigurationRequest.

        프록시프로토콜사용여부  # noqa: E501

        :param use_proxy_protocol: The use_proxy_protocol of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_proxy_protocol = use_proxy_protocol

    @property
    def use_sticky_session(self):
        """Gets the use_sticky_session of this ChangeTargetGroupConfigurationRequest.  # noqa: E501

        세션별접근사용여부  # noqa: E501

        :return: The use_sticky_session of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_sticky_session

    @use_sticky_session.setter
    def use_sticky_session(self, use_sticky_session):
        """Sets the use_sticky_session of this ChangeTargetGroupConfigurationRequest.

        세션별접근사용여부  # noqa: E501

        :param use_sticky_session: The use_sticky_session of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._use_sticky_session = use_sticky_session

    @property
    def target_group_no(self):
        """Gets the target_group_no of this ChangeTargetGroupConfigurationRequest.  # noqa: E501

        타겟그룹번호  # noqa: E501

        :return: The target_group_no of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_group_no

    @target_group_no.setter
    def target_group_no(self, target_group_no):
        """Sets the target_group_no of this ChangeTargetGroupConfigurationRequest.

        타겟그룹번호  # noqa: E501

        :param target_group_no: The target_group_no of this ChangeTargetGroupConfigurationRequest.  # noqa: E501
        :type: str
        """
        if target_group_no is None:
            raise ValueError("Invalid value for `target_group_no`, must not be `None`")  # noqa: E501

        self._target_group_no = target_group_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeTargetGroupConfigurationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
