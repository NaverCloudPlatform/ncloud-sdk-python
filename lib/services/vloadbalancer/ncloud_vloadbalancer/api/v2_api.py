# coding: utf-8

"""
    vloadbalancer

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_vloadbalancer.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_target(self, add_target_request, **kwargs):  # noqa: E501
        """add_target  # noqa: E501

        타겟추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_target(add_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddTargetRequest add_target_request: addTargetRequest (required)
        :return: AddTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_target_with_http_info(add_target_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_target_with_http_info(add_target_request, **kwargs)  # noqa: E501
            return data

    def add_target_with_http_info(self, add_target_request, **kwargs):  # noqa: E501
        """add_target  # noqa: E501

        타겟추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_target_with_http_info(add_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddTargetRequest add_target_request: addTargetRequest (required)
        :return: AddTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_target_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_target_request' is set
        if ('add_target_request' not in params or
                params['add_target_request'] is None):
            raise ValueError("Missing the required parameter `add_target_request` when calling `add_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_target_request' in params:
            body_params = params['add_target_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addTarget', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddTargetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_load_balancer_instance_configuration(self, change_load_balancer_instance_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_instance_configuration  # noqa: E501

        로드밸런서인스턴스설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_instance_configuration(change_load_balancer_instance_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerInstanceConfigurationRequest change_load_balancer_instance_configuration_request: changeLoadBalancerInstanceConfigurationRequest (required)
        :return: ChangeLoadBalancerInstanceConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, **kwargs)  # noqa: E501
            return data

    def change_load_balancer_instance_configuration_with_http_info(self, change_load_balancer_instance_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_instance_configuration  # noqa: E501

        로드밸런서인스턴스설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerInstanceConfigurationRequest change_load_balancer_instance_configuration_request: changeLoadBalancerInstanceConfigurationRequest (required)
        :return: ChangeLoadBalancerInstanceConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_load_balancer_instance_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_load_balancer_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_load_balancer_instance_configuration_request' is set
        if ('change_load_balancer_instance_configuration_request' not in params or
                params['change_load_balancer_instance_configuration_request'] is None):
            raise ValueError("Missing the required parameter `change_load_balancer_instance_configuration_request` when calling `change_load_balancer_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_load_balancer_instance_configuration_request' in params:
            body_params = params['change_load_balancer_instance_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeLoadBalancerInstanceConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeLoadBalancerInstanceConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_load_balancer_listener_configuration(self, change_load_balancer_listener_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_listener_configuration  # noqa: E501

        로드밸런서리스너설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_listener_configuration(change_load_balancer_listener_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerListenerConfigurationRequest change_load_balancer_listener_configuration_request: changeLoadBalancerListenerConfigurationRequest (required)
        :return: ChangeLoadBalancerListenerConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_load_balancer_listener_configuration_with_http_info(change_load_balancer_listener_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_load_balancer_listener_configuration_with_http_info(change_load_balancer_listener_configuration_request, **kwargs)  # noqa: E501
            return data

    def change_load_balancer_listener_configuration_with_http_info(self, change_load_balancer_listener_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_listener_configuration  # noqa: E501

        로드밸런서리스너설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_listener_configuration_with_http_info(change_load_balancer_listener_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerListenerConfigurationRequest change_load_balancer_listener_configuration_request: changeLoadBalancerListenerConfigurationRequest (required)
        :return: ChangeLoadBalancerListenerConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_load_balancer_listener_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_load_balancer_listener_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_load_balancer_listener_configuration_request' is set
        if ('change_load_balancer_listener_configuration_request' not in params or
                params['change_load_balancer_listener_configuration_request'] is None):
            raise ValueError("Missing the required parameter `change_load_balancer_listener_configuration_request` when calling `change_load_balancer_listener_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_load_balancer_listener_configuration_request' in params:
            body_params = params['change_load_balancer_listener_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeLoadBalancerListenerConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeLoadBalancerListenerConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_target_group_configuration(self, change_target_group_configuration_request, **kwargs):  # noqa: E501
        """change_target_group_configuration  # noqa: E501

        타겟그룹설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_target_group_configuration(change_target_group_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeTargetGroupConfigurationRequest change_target_group_configuration_request: changeTargetGroupConfigurationRequest (required)
        :return: ChangeTargetGroupConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_target_group_configuration_with_http_info(change_target_group_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_target_group_configuration_with_http_info(change_target_group_configuration_request, **kwargs)  # noqa: E501
            return data

    def change_target_group_configuration_with_http_info(self, change_target_group_configuration_request, **kwargs):  # noqa: E501
        """change_target_group_configuration  # noqa: E501

        타겟그룹설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_target_group_configuration_with_http_info(change_target_group_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeTargetGroupConfigurationRequest change_target_group_configuration_request: changeTargetGroupConfigurationRequest (required)
        :return: ChangeTargetGroupConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_target_group_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_target_group_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_target_group_configuration_request' is set
        if ('change_target_group_configuration_request' not in params or
                params['change_target_group_configuration_request'] is None):
            raise ValueError("Missing the required parameter `change_target_group_configuration_request` when calling `change_target_group_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_target_group_configuration_request' in params:
            body_params = params['change_target_group_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeTargetGroupConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeTargetGroupConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_target_group_health_check_configuration(self, change_target_group_health_check_configuration_request, **kwargs):  # noqa: E501
        """change_target_group_health_check_configuration  # noqa: E501

        타겟그룹헬스체크설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_target_group_health_check_configuration(change_target_group_health_check_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeTargetGroupHealthCheckConfigurationRequest change_target_group_health_check_configuration_request: changeTargetGroupHealthCheckConfigurationRequest (required)
        :return: ChangeTargetGroupHealthCheckConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_target_group_health_check_configuration_with_http_info(change_target_group_health_check_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_target_group_health_check_configuration_with_http_info(change_target_group_health_check_configuration_request, **kwargs)  # noqa: E501
            return data

    def change_target_group_health_check_configuration_with_http_info(self, change_target_group_health_check_configuration_request, **kwargs):  # noqa: E501
        """change_target_group_health_check_configuration  # noqa: E501

        타겟그룹헬스체크설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_target_group_health_check_configuration_with_http_info(change_target_group_health_check_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeTargetGroupHealthCheckConfigurationRequest change_target_group_health_check_configuration_request: changeTargetGroupHealthCheckConfigurationRequest (required)
        :return: ChangeTargetGroupHealthCheckConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_target_group_health_check_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_target_group_health_check_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_target_group_health_check_configuration_request' is set
        if ('change_target_group_health_check_configuration_request' not in params or
                params['change_target_group_health_check_configuration_request'] is None):
            raise ValueError("Missing the required parameter `change_target_group_health_check_configuration_request` when calling `change_target_group_health_check_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_target_group_health_check_configuration_request' in params:
            body_params = params['change_target_group_health_check_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeTargetGroupHealthCheckConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeTargetGroupHealthCheckConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_load_balancer_instance(self, create_load_balancer_instance_request, **kwargs):  # noqa: E501
        """create_load_balancer_instance  # noqa: E501

        로드밸런서인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_instance(create_load_balancer_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerInstanceRequest create_load_balancer_instance_request: createLoadBalancerInstanceRequest (required)
        :return: CreateLoadBalancerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, **kwargs)  # noqa: E501
            return data

    def create_load_balancer_instance_with_http_info(self, create_load_balancer_instance_request, **kwargs):  # noqa: E501
        """create_load_balancer_instance  # noqa: E501

        로드밸런서인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerInstanceRequest create_load_balancer_instance_request: createLoadBalancerInstanceRequest (required)
        :return: CreateLoadBalancerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_load_balancer_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_load_balancer_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_load_balancer_instance_request' is set
        if ('create_load_balancer_instance_request' not in params or
                params['create_load_balancer_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_load_balancer_instance_request` when calling `create_load_balancer_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_load_balancer_instance_request' in params:
            body_params = params['create_load_balancer_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createLoadBalancerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLoadBalancerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_load_balancer_listener(self, create_load_balancer_listener_request, **kwargs):  # noqa: E501
        """create_load_balancer_listener  # noqa: E501

        로드밸런서리스너생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_listener(create_load_balancer_listener_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerListenerRequest create_load_balancer_listener_request: createLoadBalancerListenerRequest (required)
        :return: CreateLoadBalancerListenerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_load_balancer_listener_with_http_info(create_load_balancer_listener_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_load_balancer_listener_with_http_info(create_load_balancer_listener_request, **kwargs)  # noqa: E501
            return data

    def create_load_balancer_listener_with_http_info(self, create_load_balancer_listener_request, **kwargs):  # noqa: E501
        """create_load_balancer_listener  # noqa: E501

        로드밸런서리스너생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_listener_with_http_info(create_load_balancer_listener_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerListenerRequest create_load_balancer_listener_request: createLoadBalancerListenerRequest (required)
        :return: CreateLoadBalancerListenerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_load_balancer_listener_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_load_balancer_listener" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_load_balancer_listener_request' is set
        if ('create_load_balancer_listener_request' not in params or
                params['create_load_balancer_listener_request'] is None):
            raise ValueError("Missing the required parameter `create_load_balancer_listener_request` when calling `create_load_balancer_listener`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_load_balancer_listener_request' in params:
            body_params = params['create_load_balancer_listener_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createLoadBalancerListener', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLoadBalancerListenerResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_target_group(self, create_target_group_request, **kwargs):  # noqa: E501
        """create_target_group  # noqa: E501

        타겟그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_target_group(create_target_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateTargetGroupRequest create_target_group_request: createTargetGroupRequest (required)
        :return: CreateTargetGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_target_group_with_http_info(create_target_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_target_group_with_http_info(create_target_group_request, **kwargs)  # noqa: E501
            return data

    def create_target_group_with_http_info(self, create_target_group_request, **kwargs):  # noqa: E501
        """create_target_group  # noqa: E501

        타겟그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_target_group_with_http_info(create_target_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateTargetGroupRequest create_target_group_request: createTargetGroupRequest (required)
        :return: CreateTargetGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_target_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_target_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_target_group_request' is set
        if ('create_target_group_request' not in params or
                params['create_target_group_request'] is None):
            raise ValueError("Missing the required parameter `create_target_group_request` when calling `create_target_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_target_group_request' in params:
            body_params = params['create_target_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createTargetGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateTargetGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_load_balancer_instances(self, delete_load_balancer_instances_request, **kwargs):  # noqa: E501
        """delete_load_balancer_instances  # noqa: E501

        로드밸런서인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_instances(delete_load_balancer_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerInstancesRequest delete_load_balancer_instances_request: deleteLoadBalancerInstancesRequest (required)
        :return: DeleteLoadBalancerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_load_balancer_instances_with_http_info(self, delete_load_balancer_instances_request, **kwargs):  # noqa: E501
        """delete_load_balancer_instances  # noqa: E501

        로드밸런서인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerInstancesRequest delete_load_balancer_instances_request: deleteLoadBalancerInstancesRequest (required)
        :return: DeleteLoadBalancerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_load_balancer_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_load_balancer_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_load_balancer_instances_request' is set
        if ('delete_load_balancer_instances_request' not in params or
                params['delete_load_balancer_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_load_balancer_instances_request` when calling `delete_load_balancer_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_load_balancer_instances_request' in params:
            body_params = params['delete_load_balancer_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteLoadBalancerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoadBalancerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_load_balancer_listeners(self, delete_load_balancer_listeners_request, **kwargs):  # noqa: E501
        """delete_load_balancer_listeners  # noqa: E501

        로드밸런서리스너삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_listeners(delete_load_balancer_listeners_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerListenersRequest delete_load_balancer_listeners_request: deleteLoadBalancerListenersRequest (required)
        :return: DeleteLoadBalancerListenersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_load_balancer_listeners_with_http_info(delete_load_balancer_listeners_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_load_balancer_listeners_with_http_info(delete_load_balancer_listeners_request, **kwargs)  # noqa: E501
            return data

    def delete_load_balancer_listeners_with_http_info(self, delete_load_balancer_listeners_request, **kwargs):  # noqa: E501
        """delete_load_balancer_listeners  # noqa: E501

        로드밸런서리스너삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_listeners_with_http_info(delete_load_balancer_listeners_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerListenersRequest delete_load_balancer_listeners_request: deleteLoadBalancerListenersRequest (required)
        :return: DeleteLoadBalancerListenersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_load_balancer_listeners_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_load_balancer_listeners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_load_balancer_listeners_request' is set
        if ('delete_load_balancer_listeners_request' not in params or
                params['delete_load_balancer_listeners_request'] is None):
            raise ValueError("Missing the required parameter `delete_load_balancer_listeners_request` when calling `delete_load_balancer_listeners`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_load_balancer_listeners_request' in params:
            body_params = params['delete_load_balancer_listeners_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteLoadBalancerListeners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoadBalancerListenersResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_target_groups(self, delete_target_groups_request, **kwargs):  # noqa: E501
        """delete_target_groups  # noqa: E501

        타겟그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_target_groups(delete_target_groups_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteTargetGroupsRequest delete_target_groups_request: deleteTargetGroupsRequest (required)
        :return: DeleteTargetGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_target_groups_with_http_info(delete_target_groups_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_target_groups_with_http_info(delete_target_groups_request, **kwargs)  # noqa: E501
            return data

    def delete_target_groups_with_http_info(self, delete_target_groups_request, **kwargs):  # noqa: E501
        """delete_target_groups  # noqa: E501

        타겟그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_target_groups_with_http_info(delete_target_groups_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteTargetGroupsRequest delete_target_groups_request: deleteTargetGroupsRequest (required)
        :return: DeleteTargetGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_target_groups_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_target_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_target_groups_request' is set
        if ('delete_target_groups_request' not in params or
                params['delete_target_groups_request'] is None):
            raise ValueError("Missing the required parameter `delete_target_groups_request` when calling `delete_target_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_target_groups_request' in params:
            body_params = params['delete_target_groups_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteTargetGroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteTargetGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_instance_detail(self, get_load_balancer_instance_detail_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_detail  # noqa: E501

        로드밸런서인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_detail(get_load_balancer_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceDetailRequest get_load_balancer_instance_detail_request: getLoadBalancerInstanceDetailRequest (required)
        :return: GetLoadBalancerInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_instance_detail_with_http_info(get_load_balancer_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_instance_detail_with_http_info(get_load_balancer_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_instance_detail_with_http_info(self, get_load_balancer_instance_detail_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_detail  # noqa: E501

        로드밸런서인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_detail_with_http_info(get_load_balancer_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceDetailRequest get_load_balancer_instance_detail_request: getLoadBalancerInstanceDetailRequest (required)
        :return: GetLoadBalancerInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_instance_detail_request' is set
        if ('get_load_balancer_instance_detail_request' not in params or
                params['get_load_balancer_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_instance_detail_request` when calling `get_load_balancer_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_instance_detail_request' in params:
            body_params = params['get_load_balancer_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_instance_list(self, get_load_balancer_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_list  # noqa: E501

        로드밸런서인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_list(get_load_balancer_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceListRequest get_load_balancer_instance_list_request: getLoadBalancerInstanceListRequest (required)
        :return: GetLoadBalancerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_instance_list_with_http_info(self, get_load_balancer_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_list  # noqa: E501

        로드밸런서인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceListRequest get_load_balancer_instance_list_request: getLoadBalancerInstanceListRequest (required)
        :return: GetLoadBalancerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_instance_list_request' is set
        if ('get_load_balancer_instance_list_request' not in params or
                params['get_load_balancer_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_instance_list_request` when calling `get_load_balancer_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_instance_list_request' in params:
            body_params = params['get_load_balancer_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_listener_list(self, get_load_balancer_listener_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_listener_list  # noqa: E501

        로드밸런서리스너리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_listener_list(get_load_balancer_listener_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerListenerListRequest get_load_balancer_listener_list_request: getLoadBalancerListenerListRequest (required)
        :return: GetLoadBalancerListenerListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_listener_list_with_http_info(get_load_balancer_listener_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_listener_list_with_http_info(get_load_balancer_listener_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_listener_list_with_http_info(self, get_load_balancer_listener_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_listener_list  # noqa: E501

        로드밸런서리스너리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_listener_list_with_http_info(get_load_balancer_listener_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerListenerListRequest get_load_balancer_listener_list_request: getLoadBalancerListenerListRequest (required)
        :return: GetLoadBalancerListenerListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_listener_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_listener_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_listener_list_request' is set
        if ('get_load_balancer_listener_list_request' not in params or
                params['get_load_balancer_listener_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_listener_list_request` when calling `get_load_balancer_listener_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_listener_list_request' in params:
            body_params = params['get_load_balancer_listener_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerListenerList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerListenerListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_rule_list(self, get_load_balancer_rule_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_rule_list  # noqa: E501

        로드밸런서룰리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_rule_list(get_load_balancer_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerRuleListRequest get_load_balancer_rule_list_request: getLoadBalancerRuleListRequest (required)
        :return: GetLoadBalancerRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_rule_list_with_http_info(get_load_balancer_rule_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_rule_list_with_http_info(get_load_balancer_rule_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_rule_list_with_http_info(self, get_load_balancer_rule_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_rule_list  # noqa: E501

        로드밸런서룰리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_rule_list_with_http_info(get_load_balancer_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerRuleListRequest get_load_balancer_rule_list_request: getLoadBalancerRuleListRequest (required)
        :return: GetLoadBalancerRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_rule_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_rule_list_request' is set
        if ('get_load_balancer_rule_list_request' not in params or
                params['get_load_balancer_rule_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_rule_list_request` when calling `get_load_balancer_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_rule_list_request' in params:
            body_params = params['get_load_balancer_rule_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerRuleList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerRuleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_group_detail(self, get_target_group_detail_request, **kwargs):  # noqa: E501
        """get_target_group_detail  # noqa: E501

        타겟그룹상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_group_detail(get_target_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetGroupDetailRequest get_target_group_detail_request: getTargetGroupDetailRequest (required)
        :return: GetTargetGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_target_group_detail_with_http_info(get_target_group_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_group_detail_with_http_info(get_target_group_detail_request, **kwargs)  # noqa: E501
            return data

    def get_target_group_detail_with_http_info(self, get_target_group_detail_request, **kwargs):  # noqa: E501
        """get_target_group_detail  # noqa: E501

        타겟그룹상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_group_detail_with_http_info(get_target_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetGroupDetailRequest get_target_group_detail_request: getTargetGroupDetailRequest (required)
        :return: GetTargetGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_target_group_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_group_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_target_group_detail_request' is set
        if ('get_target_group_detail_request' not in params or
                params['get_target_group_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_target_group_detail_request` when calling `get_target_group_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_target_group_detail_request' in params:
            body_params = params['get_target_group_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getTargetGroupDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTargetGroupDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_group_list(self, get_target_group_list_request, **kwargs):  # noqa: E501
        """get_target_group_list  # noqa: E501

        타겟그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_group_list(get_target_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetGroupListRequest get_target_group_list_request: getTargetGroupListRequest (required)
        :return: GetTargetGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_target_group_list_with_http_info(get_target_group_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_group_list_with_http_info(get_target_group_list_request, **kwargs)  # noqa: E501
            return data

    def get_target_group_list_with_http_info(self, get_target_group_list_request, **kwargs):  # noqa: E501
        """get_target_group_list  # noqa: E501

        타겟그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_group_list_with_http_info(get_target_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetGroupListRequest get_target_group_list_request: getTargetGroupListRequest (required)
        :return: GetTargetGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_target_group_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_target_group_list_request' is set
        if ('get_target_group_list_request' not in params or
                params['get_target_group_list_request'] is None):
            raise ValueError("Missing the required parameter `get_target_group_list_request` when calling `get_target_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_target_group_list_request' in params:
            body_params = params['get_target_group_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getTargetGroupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTargetGroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_list(self, get_target_list_request, **kwargs):  # noqa: E501
        """get_target_list  # noqa: E501

        타겟리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_list(get_target_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetListRequest get_target_list_request: getTargetListRequest (required)
        :return: GetTargetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_target_list_with_http_info(get_target_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_list_with_http_info(get_target_list_request, **kwargs)  # noqa: E501
            return data

    def get_target_list_with_http_info(self, get_target_list_request, **kwargs):  # noqa: E501
        """get_target_list  # noqa: E501

        타겟리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_list_with_http_info(get_target_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetTargetListRequest get_target_list_request: getTargetListRequest (required)
        :return: GetTargetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_target_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_target_list_request' is set
        if ('get_target_list_request' not in params or
                params['get_target_list_request'] is None):
            raise ValueError("Missing the required parameter `get_target_list_request` when calling `get_target_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_target_list_request' in params:
            body_params = params['get_target_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getTargetList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTargetListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_target(self, remove_target_request, **kwargs):  # noqa: E501
        """remove_target  # noqa: E501

        타겟제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_target(remove_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveTargetRequest remove_target_request: removeTargetRequest (required)
        :return: RemoveTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_target_with_http_info(remove_target_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_target_with_http_info(remove_target_request, **kwargs)  # noqa: E501
            return data

    def remove_target_with_http_info(self, remove_target_request, **kwargs):  # noqa: E501
        """remove_target  # noqa: E501

        타겟제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_target_with_http_info(remove_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveTargetRequest remove_target_request: removeTargetRequest (required)
        :return: RemoveTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_target_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_target_request' is set
        if ('remove_target_request' not in params or
                params['remove_target_request'] is None):
            raise ValueError("Missing the required parameter `remove_target_request` when calling `remove_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_target_request' in params:
            body_params = params['remove_target_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeTarget', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveTargetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_load_balancer_description(self, set_load_balancer_description_request, **kwargs):  # noqa: E501
        """set_load_balancer_description  # noqa: E501

        로드밸런서설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_load_balancer_description(set_load_balancer_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetLoadBalancerDescriptionRequest set_load_balancer_description_request: setLoadBalancerDescriptionRequest (required)
        :return: SetLoadBalancerDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_load_balancer_description_with_http_info(set_load_balancer_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_load_balancer_description_with_http_info(set_load_balancer_description_request, **kwargs)  # noqa: E501
            return data

    def set_load_balancer_description_with_http_info(self, set_load_balancer_description_request, **kwargs):  # noqa: E501
        """set_load_balancer_description  # noqa: E501

        로드밸런서설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_load_balancer_description_with_http_info(set_load_balancer_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetLoadBalancerDescriptionRequest set_load_balancer_description_request: setLoadBalancerDescriptionRequest (required)
        :return: SetLoadBalancerDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_load_balancer_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_load_balancer_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_load_balancer_description_request' is set
        if ('set_load_balancer_description_request' not in params or
                params['set_load_balancer_description_request'] is None):
            raise ValueError("Missing the required parameter `set_load_balancer_description_request` when calling `set_load_balancer_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_load_balancer_description_request' in params:
            body_params = params['set_load_balancer_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setLoadBalancerDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetLoadBalancerDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_load_balancer_instance_subnet(self, set_load_balancer_instance_subnet_request, **kwargs):  # noqa: E501
        """set_load_balancer_instance_subnet  # noqa: E501

        로드밸런서인스턴스서브넷설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_load_balancer_instance_subnet(set_load_balancer_instance_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetLoadBalancerInstanceSubnetRequest set_load_balancer_instance_subnet_request: setLoadBalancerInstanceSubnetRequest (required)
        :return: SetLoadBalancerInstanceSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_load_balancer_instance_subnet_with_http_info(set_load_balancer_instance_subnet_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_load_balancer_instance_subnet_with_http_info(set_load_balancer_instance_subnet_request, **kwargs)  # noqa: E501
            return data

    def set_load_balancer_instance_subnet_with_http_info(self, set_load_balancer_instance_subnet_request, **kwargs):  # noqa: E501
        """set_load_balancer_instance_subnet  # noqa: E501

        로드밸런서인스턴스서브넷설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_load_balancer_instance_subnet_with_http_info(set_load_balancer_instance_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetLoadBalancerInstanceSubnetRequest set_load_balancer_instance_subnet_request: setLoadBalancerInstanceSubnetRequest (required)
        :return: SetLoadBalancerInstanceSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_load_balancer_instance_subnet_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_load_balancer_instance_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_load_balancer_instance_subnet_request' is set
        if ('set_load_balancer_instance_subnet_request' not in params or
                params['set_load_balancer_instance_subnet_request'] is None):
            raise ValueError("Missing the required parameter `set_load_balancer_instance_subnet_request` when calling `set_load_balancer_instance_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_load_balancer_instance_subnet_request' in params:
            body_params = params['set_load_balancer_instance_subnet_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setLoadBalancerInstanceSubnet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetLoadBalancerInstanceSubnetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_target(self, set_target_request, **kwargs):  # noqa: E501
        """set_target  # noqa: E501

        타겟설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_target(set_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetTargetRequest set_target_request: setTargetRequest (required)
        :return: SetTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_target_with_http_info(set_target_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_target_with_http_info(set_target_request, **kwargs)  # noqa: E501
            return data

    def set_target_with_http_info(self, set_target_request, **kwargs):  # noqa: E501
        """set_target  # noqa: E501

        타겟설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_target_with_http_info(set_target_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetTargetRequest set_target_request: setTargetRequest (required)
        :return: SetTargetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_target_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_target" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_target_request' is set
        if ('set_target_request' not in params or
                params['set_target_request'] is None):
            raise ValueError("Missing the required parameter `set_target_request` when calling `set_target`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_target_request' in params:
            body_params = params['set_target_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setTarget', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetTargetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_target_group_description(self, set_target_group_description_request, **kwargs):  # noqa: E501
        """set_target_group_description  # noqa: E501

        타겟그룹설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_target_group_description(set_target_group_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetTargetGroupDescriptionRequest set_target_group_description_request: setTargetGroupDescriptionRequest (required)
        :return: SetTargetGroupDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_target_group_description_with_http_info(set_target_group_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_target_group_description_with_http_info(set_target_group_description_request, **kwargs)  # noqa: E501
            return data

    def set_target_group_description_with_http_info(self, set_target_group_description_request, **kwargs):  # noqa: E501
        """set_target_group_description  # noqa: E501

        타겟그룹설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_target_group_description_with_http_info(set_target_group_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetTargetGroupDescriptionRequest set_target_group_description_request: setTargetGroupDescriptionRequest (required)
        :return: SetTargetGroupDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_target_group_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_target_group_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_target_group_description_request' is set
        if ('set_target_group_description_request' not in params or
                params['set_target_group_description_request'] is None):
            raise ValueError("Missing the required parameter `set_target_group_description_request` when calling `set_target_group_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_target_group_description_request' in params:
            body_params = params['set_target_group_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setTargetGroupDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetTargetGroupDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
