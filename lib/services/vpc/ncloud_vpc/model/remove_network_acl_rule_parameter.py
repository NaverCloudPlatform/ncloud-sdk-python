# coding: utf-8

"""
    vpc

    OpenAPI spec version: 2020-09-17T10:29:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoveNetworkAclRuleParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_block': 'str',
        'rule_action_code': 'str',
        'port_range': 'str',
        'priority': 'int',
        'protocol_type_code': 'str'
    }

    attribute_map = {
        'ip_block': 'ipBlock',
        'rule_action_code': 'ruleActionCode',
        'port_range': 'portRange',
        'priority': 'priority',
        'protocol_type_code': 'protocolTypeCode'
    }

    def __init__(self, ip_block=None, rule_action_code=None, port_range=None, priority=None, protocol_type_code=None):  # noqa: E501
        """RemoveNetworkAclRuleParameter - a model defined in Swagger"""  # noqa: E501

        self._ip_block = None
        self._rule_action_code = None
        self._port_range = None
        self._priority = None
        self._protocol_type_code = None
        self.discriminator = None

        self.ip_block = ip_block
        self.rule_action_code = rule_action_code
        if port_range is not None:
            self.port_range = port_range
        self.priority = priority
        self.protocol_type_code = protocol_type_code

    @property
    def ip_block(self):
        """Gets the ip_block of this RemoveNetworkAclRuleParameter.  # noqa: E501

        IP블록  # noqa: E501

        :return: The ip_block of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :rtype: str
        """
        return self._ip_block

    @ip_block.setter
    def ip_block(self, ip_block):
        """Sets the ip_block of this RemoveNetworkAclRuleParameter.

        IP블록  # noqa: E501

        :param ip_block: The ip_block of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :type: str
        """
        if ip_block is None:
            raise ValueError("Invalid value for `ip_block`, must not be `None`")  # noqa: E501

        self._ip_block = ip_block

    @property
    def rule_action_code(self):
        """Gets the rule_action_code of this RemoveNetworkAclRuleParameter.  # noqa: E501

        Rule액션코드  # noqa: E501

        :return: The rule_action_code of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :rtype: str
        """
        return self._rule_action_code

    @rule_action_code.setter
    def rule_action_code(self, rule_action_code):
        """Sets the rule_action_code of this RemoveNetworkAclRuleParameter.

        Rule액션코드  # noqa: E501

        :param rule_action_code: The rule_action_code of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :type: str
        """
        if rule_action_code is None:
            raise ValueError("Invalid value for `rule_action_code`, must not be `None`")  # noqa: E501

        self._rule_action_code = rule_action_code

    @property
    def port_range(self):
        """Gets the port_range of this RemoveNetworkAclRuleParameter.  # noqa: E501

        포트범위  # noqa: E501

        :return: The port_range of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :rtype: str
        """
        return self._port_range

    @port_range.setter
    def port_range(self, port_range):
        """Sets the port_range of this RemoveNetworkAclRuleParameter.

        포트범위  # noqa: E501

        :param port_range: The port_range of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :type: str
        """

        self._port_range = port_range

    @property
    def priority(self):
        """Gets the priority of this RemoveNetworkAclRuleParameter.  # noqa: E501

        우선순위  # noqa: E501

        :return: The priority of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RemoveNetworkAclRuleParameter.

        우선순위  # noqa: E501

        :param priority: The priority of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def protocol_type_code(self):
        """Gets the protocol_type_code of this RemoveNetworkAclRuleParameter.  # noqa: E501

        프로토콜유형코드  # noqa: E501

        :return: The protocol_type_code of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type_code

    @protocol_type_code.setter
    def protocol_type_code(self, protocol_type_code):
        """Sets the protocol_type_code of this RemoveNetworkAclRuleParameter.

        프로토콜유형코드  # noqa: E501

        :param protocol_type_code: The protocol_type_code of this RemoveNetworkAclRuleParameter.  # noqa: E501
        :type: str
        """
        if protocol_type_code is None:
            raise ValueError("Invalid value for `protocol_type_code`, must not be `None`")  # noqa: E501

        self._protocol_type_code = protocol_type_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoveNetworkAclRuleParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
