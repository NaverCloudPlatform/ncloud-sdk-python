# coding: utf-8

"""
    vpc

    OpenAPI spec version: 2020-09-17T10:29:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateNatGatewayInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'nat_gateway_description': 'str',
        'nat_gateway_name': 'str',
        'vpc_no': 'str',
        'zone_code': 'str'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'nat_gateway_description': 'natGatewayDescription',
        'nat_gateway_name': 'natGatewayName',
        'vpc_no': 'vpcNo',
        'zone_code': 'zoneCode'
    }

    def __init__(self, region_code=None, nat_gateway_description=None, nat_gateway_name=None, vpc_no=None, zone_code=None):  # noqa: E501
        """CreateNatGatewayInstanceRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._nat_gateway_description = None
        self._nat_gateway_name = None
        self._vpc_no = None
        self._zone_code = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        if nat_gateway_description is not None:
            self.nat_gateway_description = nat_gateway_description
        if nat_gateway_name is not None:
            self.nat_gateway_name = nat_gateway_name
        self.vpc_no = vpc_no
        self.zone_code = zone_code

    @property
    def region_code(self):
        """Gets the region_code of this CreateNatGatewayInstanceRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this CreateNatGatewayInstanceRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def nat_gateway_description(self):
        """Gets the nat_gateway_description of this CreateNatGatewayInstanceRequest.  # noqa: E501

        NATGateway설명  # noqa: E501

        :return: The nat_gateway_description of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_description

    @nat_gateway_description.setter
    def nat_gateway_description(self, nat_gateway_description):
        """Sets the nat_gateway_description of this CreateNatGatewayInstanceRequest.

        NATGateway설명  # noqa: E501

        :param nat_gateway_description: The nat_gateway_description of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :type: str
        """

        self._nat_gateway_description = nat_gateway_description

    @property
    def nat_gateway_name(self):
        """Gets the nat_gateway_name of this CreateNatGatewayInstanceRequest.  # noqa: E501

        NATGateway이름  # noqa: E501

        :return: The nat_gateway_name of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._nat_gateway_name

    @nat_gateway_name.setter
    def nat_gateway_name(self, nat_gateway_name):
        """Sets the nat_gateway_name of this CreateNatGatewayInstanceRequest.

        NATGateway이름  # noqa: E501

        :param nat_gateway_name: The nat_gateway_name of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :type: str
        """

        self._nat_gateway_name = nat_gateway_name

    @property
    def vpc_no(self):
        """Gets the vpc_no of this CreateNatGatewayInstanceRequest.  # noqa: E501

        VPC번호  # noqa: E501

        :return: The vpc_no of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._vpc_no

    @vpc_no.setter
    def vpc_no(self, vpc_no):
        """Sets the vpc_no of this CreateNatGatewayInstanceRequest.

        VPC번호  # noqa: E501

        :param vpc_no: The vpc_no of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :type: str
        """
        if vpc_no is None:
            raise ValueError("Invalid value for `vpc_no`, must not be `None`")  # noqa: E501

        self._vpc_no = vpc_no

    @property
    def zone_code(self):
        """Gets the zone_code of this CreateNatGatewayInstanceRequest.  # noqa: E501

        ZONE코드  # noqa: E501

        :return: The zone_code of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._zone_code

    @zone_code.setter
    def zone_code(self, zone_code):
        """Sets the zone_code of this CreateNatGatewayInstanceRequest.

        ZONE코드  # noqa: E501

        :param zone_code: The zone_code of this CreateNatGatewayInstanceRequest.  # noqa: E501
        :type: str
        """
        if zone_code is None:
            raise ValueError("Invalid value for `zone_code`, must not be `None`")  # noqa: E501

        self._zone_code = zone_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNatGatewayInstanceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
