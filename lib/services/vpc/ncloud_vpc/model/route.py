# coding: utf-8

"""
    vpc

    OpenAPI spec version: 2020-09-17T10:29:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vpc.model.common_code import CommonCode  # noqa: F401,E501


class Route(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_cidr_block': 'str',
        'target_name': 'str',
        'route_table_no': 'str',
        'target_type': 'CommonCode',
        'target_no': 'str',
        'is_default': 'bool'
    }

    attribute_map = {
        'destination_cidr_block': 'destinationCidrBlock',
        'target_name': 'targetName',
        'route_table_no': 'routeTableNo',
        'target_type': 'targetType',
        'target_no': 'targetNo',
        'is_default': 'isDefault'
    }

    def __init__(self, destination_cidr_block=None, target_name=None, route_table_no=None, target_type=None, target_no=None, is_default=None):  # noqa: E501
        """Route - a model defined in Swagger"""  # noqa: E501

        self._destination_cidr_block = None
        self._target_name = None
        self._route_table_no = None
        self._target_type = None
        self._target_no = None
        self._is_default = None
        self.discriminator = None

        if destination_cidr_block is not None:
            self.destination_cidr_block = destination_cidr_block
        if target_name is not None:
            self.target_name = target_name
        if route_table_no is not None:
            self.route_table_no = route_table_no
        if target_type is not None:
            self.target_type = target_type
        if target_no is not None:
            self.target_no = target_no
        if is_default is not None:
            self.is_default = is_default

    @property
    def destination_cidr_block(self):
        """Gets the destination_cidr_block of this Route.  # noqa: E501

        목적지CIDR블록  # noqa: E501

        :return: The destination_cidr_block of this Route.  # noqa: E501
        :rtype: str
        """
        return self._destination_cidr_block

    @destination_cidr_block.setter
    def destination_cidr_block(self, destination_cidr_block):
        """Sets the destination_cidr_block of this Route.

        목적지CIDR블록  # noqa: E501

        :param destination_cidr_block: The destination_cidr_block of this Route.  # noqa: E501
        :type: str
        """

        self._destination_cidr_block = destination_cidr_block

    @property
    def target_name(self):
        """Gets the target_name of this Route.  # noqa: E501

        목적지이름  # noqa: E501

        :return: The target_name of this Route.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this Route.

        목적지이름  # noqa: E501

        :param target_name: The target_name of this Route.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def route_table_no(self):
        """Gets the route_table_no of this Route.  # noqa: E501

        라우트테이블번호  # noqa: E501

        :return: The route_table_no of this Route.  # noqa: E501
        :rtype: str
        """
        return self._route_table_no

    @route_table_no.setter
    def route_table_no(self, route_table_no):
        """Sets the route_table_no of this Route.

        라우트테이블번호  # noqa: E501

        :param route_table_no: The route_table_no of this Route.  # noqa: E501
        :type: str
        """

        self._route_table_no = route_table_no

    @property
    def target_type(self):
        """Gets the target_type of this Route.  # noqa: E501

        목적지유형  # noqa: E501

        :return: The target_type of this Route.  # noqa: E501
        :rtype: CommonCode
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Route.

        목적지유형  # noqa: E501

        :param target_type: The target_type of this Route.  # noqa: E501
        :type: CommonCode
        """

        self._target_type = target_type

    @property
    def target_no(self):
        """Gets the target_no of this Route.  # noqa: E501

        목적지번호  # noqa: E501

        :return: The target_no of this Route.  # noqa: E501
        :rtype: str
        """
        return self._target_no

    @target_no.setter
    def target_no(self, target_no):
        """Sets the target_no of this Route.

        목적지번호  # noqa: E501

        :param target_no: The target_no of this Route.  # noqa: E501
        :type: str
        """

        self._target_no = target_no

    @property
    def is_default(self):
        """Gets the is_default of this Route.  # noqa: E501

        Default여부  # noqa: E501

        :return: The is_default of this Route.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Route.

        Default여부  # noqa: E501

        :param is_default: The is_default of this Route.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Route):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
