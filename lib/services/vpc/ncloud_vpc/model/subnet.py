# coding: utf-8

"""
    vpc

    OpenAPI spec version: 2020-09-17T10:29:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vpc.model.common_code import CommonCode  # noqa: F401,E501


class Subnet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet_no': 'str',
        'vpc_no': 'str',
        'zone_code': 'str',
        'subnet_name': 'str',
        'subnet': 'str',
        'subnet_status': 'CommonCode',
        'create_date': 'str',
        'subnet_type': 'CommonCode',
        'usage_type': 'CommonCode',
        'network_acl_no': 'str'
    }

    attribute_map = {
        'subnet_no': 'subnetNo',
        'vpc_no': 'vpcNo',
        'zone_code': 'zoneCode',
        'subnet_name': 'subnetName',
        'subnet': 'subnet',
        'subnet_status': 'subnetStatus',
        'create_date': 'createDate',
        'subnet_type': 'subnetType',
        'usage_type': 'usageType',
        'network_acl_no': 'networkAclNo'
    }

    def __init__(self, subnet_no=None, vpc_no=None, zone_code=None, subnet_name=None, subnet=None, subnet_status=None, create_date=None, subnet_type=None, usage_type=None, network_acl_no=None):  # noqa: E501
        """Subnet - a model defined in Swagger"""  # noqa: E501

        self._subnet_no = None
        self._vpc_no = None
        self._zone_code = None
        self._subnet_name = None
        self._subnet = None
        self._subnet_status = None
        self._create_date = None
        self._subnet_type = None
        self._usage_type = None
        self._network_acl_no = None
        self.discriminator = None

        if subnet_no is not None:
            self.subnet_no = subnet_no
        if vpc_no is not None:
            self.vpc_no = vpc_no
        if zone_code is not None:
            self.zone_code = zone_code
        if subnet_name is not None:
            self.subnet_name = subnet_name
        if subnet is not None:
            self.subnet = subnet
        if subnet_status is not None:
            self.subnet_status = subnet_status
        if create_date is not None:
            self.create_date = create_date
        if subnet_type is not None:
            self.subnet_type = subnet_type
        if usage_type is not None:
            self.usage_type = usage_type
        if network_acl_no is not None:
            self.network_acl_no = network_acl_no

    @property
    def subnet_no(self):
        """Gets the subnet_no of this Subnet.  # noqa: E501

        서브넷번호  # noqa: E501

        :return: The subnet_no of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_no

    @subnet_no.setter
    def subnet_no(self, subnet_no):
        """Sets the subnet_no of this Subnet.

        서브넷번호  # noqa: E501

        :param subnet_no: The subnet_no of this Subnet.  # noqa: E501
        :type: str
        """

        self._subnet_no = subnet_no

    @property
    def vpc_no(self):
        """Gets the vpc_no of this Subnet.  # noqa: E501

        VPC번호  # noqa: E501

        :return: The vpc_no of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._vpc_no

    @vpc_no.setter
    def vpc_no(self, vpc_no):
        """Sets the vpc_no of this Subnet.

        VPC번호  # noqa: E501

        :param vpc_no: The vpc_no of this Subnet.  # noqa: E501
        :type: str
        """

        self._vpc_no = vpc_no

    @property
    def zone_code(self):
        """Gets the zone_code of this Subnet.  # noqa: E501

        ZONE코드  # noqa: E501

        :return: The zone_code of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._zone_code

    @zone_code.setter
    def zone_code(self, zone_code):
        """Sets the zone_code of this Subnet.

        ZONE코드  # noqa: E501

        :param zone_code: The zone_code of this Subnet.  # noqa: E501
        :type: str
        """

        self._zone_code = zone_code

    @property
    def subnet_name(self):
        """Gets the subnet_name of this Subnet.  # noqa: E501

        서브넷이름  # noqa: E501

        :return: The subnet_name of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet_name

    @subnet_name.setter
    def subnet_name(self, subnet_name):
        """Sets the subnet_name of this Subnet.

        서브넷이름  # noqa: E501

        :param subnet_name: The subnet_name of this Subnet.  # noqa: E501
        :type: str
        """

        self._subnet_name = subnet_name

    @property
    def subnet(self):
        """Gets the subnet of this Subnet.  # noqa: E501

        서브넷  # noqa: E501

        :return: The subnet of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this Subnet.

        서브넷  # noqa: E501

        :param subnet: The subnet of this Subnet.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def subnet_status(self):
        """Gets the subnet_status of this Subnet.  # noqa: E501

        서브넷상태  # noqa: E501

        :return: The subnet_status of this Subnet.  # noqa: E501
        :rtype: CommonCode
        """
        return self._subnet_status

    @subnet_status.setter
    def subnet_status(self, subnet_status):
        """Sets the subnet_status of this Subnet.

        서브넷상태  # noqa: E501

        :param subnet_status: The subnet_status of this Subnet.  # noqa: E501
        :type: CommonCode
        """

        self._subnet_status = subnet_status

    @property
    def create_date(self):
        """Gets the create_date of this Subnet.  # noqa: E501

        생성일시  # noqa: E501

        :return: The create_date of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Subnet.

        생성일시  # noqa: E501

        :param create_date: The create_date of this Subnet.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def subnet_type(self):
        """Gets the subnet_type of this Subnet.  # noqa: E501

        서브넷유형  # noqa: E501

        :return: The subnet_type of this Subnet.  # noqa: E501
        :rtype: CommonCode
        """
        return self._subnet_type

    @subnet_type.setter
    def subnet_type(self, subnet_type):
        """Sets the subnet_type of this Subnet.

        서브넷유형  # noqa: E501

        :param subnet_type: The subnet_type of this Subnet.  # noqa: E501
        :type: CommonCode
        """

        self._subnet_type = subnet_type

    @property
    def usage_type(self):
        """Gets the usage_type of this Subnet.  # noqa: E501

        용도유형  # noqa: E501

        :return: The usage_type of this Subnet.  # noqa: E501
        :rtype: CommonCode
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this Subnet.

        용도유형  # noqa: E501

        :param usage_type: The usage_type of this Subnet.  # noqa: E501
        :type: CommonCode
        """

        self._usage_type = usage_type

    @property
    def network_acl_no(self):
        """Gets the network_acl_no of this Subnet.  # noqa: E501

        네트워크ACL번호  # noqa: E501

        :return: The network_acl_no of this Subnet.  # noqa: E501
        :rtype: str
        """
        return self._network_acl_no

    @network_acl_no.setter
    def network_acl_no(self, network_acl_no):
        """Sets the network_acl_no of this Subnet.

        네트워크ACL번호  # noqa: E501

        :param network_acl_no: The network_acl_no of this Subnet.  # noqa: E501
        :type: str
        """

        self._network_acl_no = network_acl_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
