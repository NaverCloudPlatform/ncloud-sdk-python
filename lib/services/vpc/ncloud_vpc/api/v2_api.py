# coding: utf-8

"""
    vpc

    OpenAPI spec version: 2020-09-17T10:29:55Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_vpc.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accept_or_reject_vpc_peering(self, accept_or_reject_vpc_peering_request, **kwargs):  # noqa: E501
        """accept_or_reject_vpc_peering  # noqa: E501

        VPCPeering요청수락거절  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.accept_or_reject_vpc_peering(accept_or_reject_vpc_peering_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AcceptOrRejectVpcPeeringRequest accept_or_reject_vpc_peering_request: acceptOrRejectVpcPeeringRequest (required)
        :return: AcceptOrRejectVpcPeeringResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.accept_or_reject_vpc_peering_with_http_info(accept_or_reject_vpc_peering_request, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_or_reject_vpc_peering_with_http_info(accept_or_reject_vpc_peering_request, **kwargs)  # noqa: E501
            return data

    def accept_or_reject_vpc_peering_with_http_info(self, accept_or_reject_vpc_peering_request, **kwargs):  # noqa: E501
        """accept_or_reject_vpc_peering  # noqa: E501

        VPCPeering요청수락거절  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.accept_or_reject_vpc_peering_with_http_info(accept_or_reject_vpc_peering_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AcceptOrRejectVpcPeeringRequest accept_or_reject_vpc_peering_request: acceptOrRejectVpcPeeringRequest (required)
        :return: AcceptOrRejectVpcPeeringResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_or_reject_vpc_peering_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_or_reject_vpc_peering" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accept_or_reject_vpc_peering_request' is set
        if ('accept_or_reject_vpc_peering_request' not in params or
                params['accept_or_reject_vpc_peering_request'] is None):
            raise ValueError("Missing the required parameter `accept_or_reject_vpc_peering_request` when calling `accept_or_reject_vpc_peering`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'accept_or_reject_vpc_peering_request' in params:
            body_params = params['accept_or_reject_vpc_peering_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/acceptOrRejectVpcPeering', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AcceptOrRejectVpcPeeringResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_network_acl_inbound_rule(self, add_network_acl_inbound_rule_request, **kwargs):  # noqa: E501
        """add_network_acl_inbound_rule  # noqa: E501

        네트워크ACLInboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_acl_inbound_rule(add_network_acl_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkAclInboundRuleRequest add_network_acl_inbound_rule_request: addNetworkAclInboundRuleRequest (required)
        :return: AddNetworkAclInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_network_acl_inbound_rule_with_http_info(add_network_acl_inbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_network_acl_inbound_rule_with_http_info(add_network_acl_inbound_rule_request, **kwargs)  # noqa: E501
            return data

    def add_network_acl_inbound_rule_with_http_info(self, add_network_acl_inbound_rule_request, **kwargs):  # noqa: E501
        """add_network_acl_inbound_rule  # noqa: E501

        네트워크ACLInboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_acl_inbound_rule_with_http_info(add_network_acl_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkAclInboundRuleRequest add_network_acl_inbound_rule_request: addNetworkAclInboundRuleRequest (required)
        :return: AddNetworkAclInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_network_acl_inbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_network_acl_inbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_network_acl_inbound_rule_request' is set
        if ('add_network_acl_inbound_rule_request' not in params or
                params['add_network_acl_inbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `add_network_acl_inbound_rule_request` when calling `add_network_acl_inbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_network_acl_inbound_rule_request' in params:
            body_params = params['add_network_acl_inbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addNetworkAclInboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddNetworkAclInboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_network_acl_outbound_rule(self, add_network_acl_outbound_rule_request, **kwargs):  # noqa: E501
        """add_network_acl_outbound_rule  # noqa: E501

        네트워크ACLOutboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_acl_outbound_rule(add_network_acl_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkAclOutboundRuleRequest add_network_acl_outbound_rule_request: addNetworkAclOutboundRuleRequest (required)
        :return: AddNetworkAclOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_network_acl_outbound_rule_with_http_info(add_network_acl_outbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_network_acl_outbound_rule_with_http_info(add_network_acl_outbound_rule_request, **kwargs)  # noqa: E501
            return data

    def add_network_acl_outbound_rule_with_http_info(self, add_network_acl_outbound_rule_request, **kwargs):  # noqa: E501
        """add_network_acl_outbound_rule  # noqa: E501

        네트워크ACLOutboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_acl_outbound_rule_with_http_info(add_network_acl_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkAclOutboundRuleRequest add_network_acl_outbound_rule_request: addNetworkAclOutboundRuleRequest (required)
        :return: AddNetworkAclOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_network_acl_outbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_network_acl_outbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_network_acl_outbound_rule_request' is set
        if ('add_network_acl_outbound_rule_request' not in params or
                params['add_network_acl_outbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `add_network_acl_outbound_rule_request` when calling `add_network_acl_outbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_network_acl_outbound_rule_request' in params:
            body_params = params['add_network_acl_outbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addNetworkAclOutboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddNetworkAclOutboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_route(self, add_route_request, **kwargs):  # noqa: E501
        """add_route  # noqa: E501

        라우트추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_route(add_route_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddRouteRequest add_route_request: addRouteRequest (required)
        :return: AddRouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_route_with_http_info(add_route_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_route_with_http_info(add_route_request, **kwargs)  # noqa: E501
            return data

    def add_route_with_http_info(self, add_route_request, **kwargs):  # noqa: E501
        """add_route  # noqa: E501

        라우트추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_route_with_http_info(add_route_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddRouteRequest add_route_request: addRouteRequest (required)
        :return: AddRouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_route_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_route_request' is set
        if ('add_route_request' not in params or
                params['add_route_request'] is None):
            raise ValueError("Missing the required parameter `add_route_request` when calling `add_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_route_request' in params:
            body_params = params['add_route_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addRoute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddRouteResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_route_table_subnet(self, add_route_table_subnet_request, **kwargs):  # noqa: E501
        """add_route_table_subnet  # noqa: E501

        라우트테이블의연관서브넷추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_route_table_subnet(add_route_table_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddRouteTableSubnetRequest add_route_table_subnet_request: addRouteTableSubnetRequest (required)
        :return: AddRouteTableSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_route_table_subnet_with_http_info(add_route_table_subnet_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_route_table_subnet_with_http_info(add_route_table_subnet_request, **kwargs)  # noqa: E501
            return data

    def add_route_table_subnet_with_http_info(self, add_route_table_subnet_request, **kwargs):  # noqa: E501
        """add_route_table_subnet  # noqa: E501

        라우트테이블의연관서브넷추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_route_table_subnet_with_http_info(add_route_table_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddRouteTableSubnetRequest add_route_table_subnet_request: addRouteTableSubnetRequest (required)
        :return: AddRouteTableSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_route_table_subnet_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_route_table_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_route_table_subnet_request' is set
        if ('add_route_table_subnet_request' not in params or
                params['add_route_table_subnet_request'] is None):
            raise ValueError("Missing the required parameter `add_route_table_subnet_request` when calling `add_route_table_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_route_table_subnet_request' in params:
            body_params = params['add_route_table_subnet_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addRouteTableSubnet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddRouteTableSubnetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nat_gateway_instance(self, create_nat_gateway_instance_request, **kwargs):  # noqa: E501
        """create_nat_gateway_instance  # noqa: E501

        NATGateway인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nat_gateway_instance(create_nat_gateway_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNatGatewayInstanceRequest create_nat_gateway_instance_request: createNatGatewayInstanceRequest (required)
        :return: CreateNatGatewayInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_nat_gateway_instance_with_http_info(create_nat_gateway_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_nat_gateway_instance_with_http_info(create_nat_gateway_instance_request, **kwargs)  # noqa: E501
            return data

    def create_nat_gateway_instance_with_http_info(self, create_nat_gateway_instance_request, **kwargs):  # noqa: E501
        """create_nat_gateway_instance  # noqa: E501

        NATGateway인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nat_gateway_instance_with_http_info(create_nat_gateway_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNatGatewayInstanceRequest create_nat_gateway_instance_request: createNatGatewayInstanceRequest (required)
        :return: CreateNatGatewayInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_nat_gateway_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nat_gateway_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_nat_gateway_instance_request' is set
        if ('create_nat_gateway_instance_request' not in params or
                params['create_nat_gateway_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_nat_gateway_instance_request` when calling `create_nat_gateway_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_nat_gateway_instance_request' in params:
            body_params = params['create_nat_gateway_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createNatGatewayInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateNatGatewayInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_network_acl(self, create_network_acl_request, **kwargs):  # noqa: E501
        """create_network_acl  # noqa: E501

        네트워크ACL생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_network_acl(create_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNetworkAclRequest create_network_acl_request: createNetworkAclRequest (required)
        :return: CreateNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_network_acl_with_http_info(create_network_acl_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_network_acl_with_http_info(create_network_acl_request, **kwargs)  # noqa: E501
            return data

    def create_network_acl_with_http_info(self, create_network_acl_request, **kwargs):  # noqa: E501
        """create_network_acl  # noqa: E501

        네트워크ACL생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_network_acl_with_http_info(create_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNetworkAclRequest create_network_acl_request: createNetworkAclRequest (required)
        :return: CreateNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_network_acl_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_network_acl_request' is set
        if ('create_network_acl_request' not in params or
                params['create_network_acl_request'] is None):
            raise ValueError("Missing the required parameter `create_network_acl_request` when calling `create_network_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_network_acl_request' in params:
            body_params = params['create_network_acl_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createNetworkAcl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateNetworkAclResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_route_table(self, create_route_table_request, **kwargs):  # noqa: E501
        """create_route_table  # noqa: E501

        라우트테이블생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_route_table(create_route_table_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateRouteTableRequest create_route_table_request: createRouteTableRequest (required)
        :return: CreateRouteTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_route_table_with_http_info(create_route_table_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_route_table_with_http_info(create_route_table_request, **kwargs)  # noqa: E501
            return data

    def create_route_table_with_http_info(self, create_route_table_request, **kwargs):  # noqa: E501
        """create_route_table  # noqa: E501

        라우트테이블생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_route_table_with_http_info(create_route_table_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateRouteTableRequest create_route_table_request: createRouteTableRequest (required)
        :return: CreateRouteTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_route_table_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_route_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_route_table_request' is set
        if ('create_route_table_request' not in params or
                params['create_route_table_request'] is None):
            raise ValueError("Missing the required parameter `create_route_table_request` when calling `create_route_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_route_table_request' in params:
            body_params = params['create_route_table_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createRouteTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateRouteTableResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subnet(self, create_subnet_request, **kwargs):  # noqa: E501
        """create_subnet  # noqa: E501

        서브넷생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subnet(create_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSubnetRequest create_subnet_request: createSubnetRequest (required)
        :return: CreateSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_subnet_with_http_info(create_subnet_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subnet_with_http_info(create_subnet_request, **kwargs)  # noqa: E501
            return data

    def create_subnet_with_http_info(self, create_subnet_request, **kwargs):  # noqa: E501
        """create_subnet  # noqa: E501

        서브넷생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subnet_with_http_info(create_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSubnetRequest create_subnet_request: createSubnetRequest (required)
        :return: CreateSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_subnet_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_subnet_request' is set
        if ('create_subnet_request' not in params or
                params['create_subnet_request'] is None):
            raise ValueError("Missing the required parameter `create_subnet_request` when calling `create_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_subnet_request' in params:
            body_params = params['create_subnet_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createSubnet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSubnetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vpc(self, create_vpc_request, **kwargs):  # noqa: E501
        """create_vpc  # noqa: E501

        VPC생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_vpc(create_vpc_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateVpcRequest create_vpc_request: createVpcRequest (required)
        :return: CreateVpcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_vpc_with_http_info(create_vpc_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vpc_with_http_info(create_vpc_request, **kwargs)  # noqa: E501
            return data

    def create_vpc_with_http_info(self, create_vpc_request, **kwargs):  # noqa: E501
        """create_vpc  # noqa: E501

        VPC생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_vpc_with_http_info(create_vpc_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateVpcRequest create_vpc_request: createVpcRequest (required)
        :return: CreateVpcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_vpc_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vpc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_vpc_request' is set
        if ('create_vpc_request' not in params or
                params['create_vpc_request'] is None):
            raise ValueError("Missing the required parameter `create_vpc_request` when calling `create_vpc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_vpc_request' in params:
            body_params = params['create_vpc_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createVpc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateVpcResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vpc_peering_instance(self, create_vpc_peering_instance_request, **kwargs):  # noqa: E501
        """create_vpc_peering_instance  # noqa: E501

        VPCPeering인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_vpc_peering_instance(create_vpc_peering_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateVpcPeeringInstanceRequest create_vpc_peering_instance_request: createVpcPeeringInstanceRequest (required)
        :return: CreateVpcPeeringInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_vpc_peering_instance_with_http_info(create_vpc_peering_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vpc_peering_instance_with_http_info(create_vpc_peering_instance_request, **kwargs)  # noqa: E501
            return data

    def create_vpc_peering_instance_with_http_info(self, create_vpc_peering_instance_request, **kwargs):  # noqa: E501
        """create_vpc_peering_instance  # noqa: E501

        VPCPeering인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_vpc_peering_instance_with_http_info(create_vpc_peering_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateVpcPeeringInstanceRequest create_vpc_peering_instance_request: createVpcPeeringInstanceRequest (required)
        :return: CreateVpcPeeringInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_vpc_peering_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vpc_peering_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_vpc_peering_instance_request' is set
        if ('create_vpc_peering_instance_request' not in params or
                params['create_vpc_peering_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_vpc_peering_instance_request` when calling `create_vpc_peering_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_vpc_peering_instance_request' in params:
            body_params = params['create_vpc_peering_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createVpcPeeringInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateVpcPeeringInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_nat_gateway_instance(self, delete_nat_gateway_instance_request, **kwargs):  # noqa: E501
        """delete_nat_gateway_instance  # noqa: E501

        NATGateway인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nat_gateway_instance(delete_nat_gateway_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNatGatewayInstanceRequest delete_nat_gateway_instance_request: deleteNatGatewayInstanceRequest (required)
        :return: DeleteNatGatewayInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_nat_gateway_instance_with_http_info(delete_nat_gateway_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_nat_gateway_instance_with_http_info(delete_nat_gateway_instance_request, **kwargs)  # noqa: E501
            return data

    def delete_nat_gateway_instance_with_http_info(self, delete_nat_gateway_instance_request, **kwargs):  # noqa: E501
        """delete_nat_gateway_instance  # noqa: E501

        NATGateway인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nat_gateway_instance_with_http_info(delete_nat_gateway_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNatGatewayInstanceRequest delete_nat_gateway_instance_request: deleteNatGatewayInstanceRequest (required)
        :return: DeleteNatGatewayInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_nat_gateway_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nat_gateway_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_nat_gateway_instance_request' is set
        if ('delete_nat_gateway_instance_request' not in params or
                params['delete_nat_gateway_instance_request'] is None):
            raise ValueError("Missing the required parameter `delete_nat_gateway_instance_request` when calling `delete_nat_gateway_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_nat_gateway_instance_request' in params:
            body_params = params['delete_nat_gateway_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteNatGatewayInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteNatGatewayInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_acl(self, delete_network_acl_request, **kwargs):  # noqa: E501
        """delete_network_acl  # noqa: E501

        네트워크ACL삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_acl(delete_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNetworkAclRequest delete_network_acl_request: deleteNetworkAclRequest (required)
        :return: DeleteNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_network_acl_with_http_info(delete_network_acl_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_acl_with_http_info(delete_network_acl_request, **kwargs)  # noqa: E501
            return data

    def delete_network_acl_with_http_info(self, delete_network_acl_request, **kwargs):  # noqa: E501
        """delete_network_acl  # noqa: E501

        네트워크ACL삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_acl_with_http_info(delete_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNetworkAclRequest delete_network_acl_request: deleteNetworkAclRequest (required)
        :return: DeleteNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_network_acl_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_network_acl_request' is set
        if ('delete_network_acl_request' not in params or
                params['delete_network_acl_request'] is None):
            raise ValueError("Missing the required parameter `delete_network_acl_request` when calling `delete_network_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_network_acl_request' in params:
            body_params = params['delete_network_acl_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteNetworkAcl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteNetworkAclResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_route_table(self, delete_route_table_request, **kwargs):  # noqa: E501
        """delete_route_table  # noqa: E501

        라우트테이블삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_route_table(delete_route_table_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteRouteTableRequest delete_route_table_request: deleteRouteTableRequest (required)
        :return: DeleteRouteTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_route_table_with_http_info(delete_route_table_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_route_table_with_http_info(delete_route_table_request, **kwargs)  # noqa: E501
            return data

    def delete_route_table_with_http_info(self, delete_route_table_request, **kwargs):  # noqa: E501
        """delete_route_table  # noqa: E501

        라우트테이블삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_route_table_with_http_info(delete_route_table_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteRouteTableRequest delete_route_table_request: deleteRouteTableRequest (required)
        :return: DeleteRouteTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_route_table_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_route_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_route_table_request' is set
        if ('delete_route_table_request' not in params or
                params['delete_route_table_request'] is None):
            raise ValueError("Missing the required parameter `delete_route_table_request` when calling `delete_route_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_route_table_request' in params:
            body_params = params['delete_route_table_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteRouteTable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteRouteTableResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subnet(self, delete_subnet_request, **kwargs):  # noqa: E501
        """delete_subnet  # noqa: E501

        서브넷삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subnet(delete_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteSubnetRequest delete_subnet_request: deleteSubnetRequest (required)
        :return: DeleteSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_subnet_with_http_info(delete_subnet_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subnet_with_http_info(delete_subnet_request, **kwargs)  # noqa: E501
            return data

    def delete_subnet_with_http_info(self, delete_subnet_request, **kwargs):  # noqa: E501
        """delete_subnet  # noqa: E501

        서브넷삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_subnet_with_http_info(delete_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteSubnetRequest delete_subnet_request: deleteSubnetRequest (required)
        :return: DeleteSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_subnet_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_subnet_request' is set
        if ('delete_subnet_request' not in params or
                params['delete_subnet_request'] is None):
            raise ValueError("Missing the required parameter `delete_subnet_request` when calling `delete_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_subnet_request' in params:
            body_params = params['delete_subnet_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteSubnet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteSubnetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vpc(self, delete_vpc_request, **kwargs):  # noqa: E501
        """delete_vpc  # noqa: E501

        VPC삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vpc(delete_vpc_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteVpcRequest delete_vpc_request: deleteVpcRequest (required)
        :return: DeleteVpcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_vpc_with_http_info(delete_vpc_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vpc_with_http_info(delete_vpc_request, **kwargs)  # noqa: E501
            return data

    def delete_vpc_with_http_info(self, delete_vpc_request, **kwargs):  # noqa: E501
        """delete_vpc  # noqa: E501

        VPC삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vpc_with_http_info(delete_vpc_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteVpcRequest delete_vpc_request: deleteVpcRequest (required)
        :return: DeleteVpcResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_vpc_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vpc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_vpc_request' is set
        if ('delete_vpc_request' not in params or
                params['delete_vpc_request'] is None):
            raise ValueError("Missing the required parameter `delete_vpc_request` when calling `delete_vpc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_vpc_request' in params:
            body_params = params['delete_vpc_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteVpc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVpcResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vpc_peering_instance(self, delete_vpc_peering_instance_request, **kwargs):  # noqa: E501
        """delete_vpc_peering_instance  # noqa: E501

        VPCPeering인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vpc_peering_instance(delete_vpc_peering_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteVpcPeeringInstanceRequest delete_vpc_peering_instance_request: deleteVpcPeeringInstanceRequest (required)
        :return: DeleteVpcPeeringInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_vpc_peering_instance_with_http_info(delete_vpc_peering_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vpc_peering_instance_with_http_info(delete_vpc_peering_instance_request, **kwargs)  # noqa: E501
            return data

    def delete_vpc_peering_instance_with_http_info(self, delete_vpc_peering_instance_request, **kwargs):  # noqa: E501
        """delete_vpc_peering_instance  # noqa: E501

        VPCPeering인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_vpc_peering_instance_with_http_info(delete_vpc_peering_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteVpcPeeringInstanceRequest delete_vpc_peering_instance_request: deleteVpcPeeringInstanceRequest (required)
        :return: DeleteVpcPeeringInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_vpc_peering_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vpc_peering_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_vpc_peering_instance_request' is set
        if ('delete_vpc_peering_instance_request' not in params or
                params['delete_vpc_peering_instance_request'] is None):
            raise ValueError("Missing the required parameter `delete_vpc_peering_instance_request` when calling `delete_vpc_peering_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_vpc_peering_instance_request' in params:
            body_params = params['delete_vpc_peering_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteVpcPeeringInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVpcPeeringInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nat_gateway_instance_detail(self, get_nat_gateway_instance_detail_request, **kwargs):  # noqa: E501
        """get_nat_gateway_instance_detail  # noqa: E501

        NATGateway인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nat_gateway_instance_detail(get_nat_gateway_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNatGatewayInstanceDetailRequest get_nat_gateway_instance_detail_request: getNatGatewayInstanceDetailRequest (required)
        :return: GetNatGatewayInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nat_gateway_instance_detail_with_http_info(get_nat_gateway_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nat_gateway_instance_detail_with_http_info(get_nat_gateway_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_nat_gateway_instance_detail_with_http_info(self, get_nat_gateway_instance_detail_request, **kwargs):  # noqa: E501
        """get_nat_gateway_instance_detail  # noqa: E501

        NATGateway인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nat_gateway_instance_detail_with_http_info(get_nat_gateway_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNatGatewayInstanceDetailRequest get_nat_gateway_instance_detail_request: getNatGatewayInstanceDetailRequest (required)
        :return: GetNatGatewayInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_nat_gateway_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nat_gateway_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_nat_gateway_instance_detail_request' is set
        if ('get_nat_gateway_instance_detail_request' not in params or
                params['get_nat_gateway_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_nat_gateway_instance_detail_request` when calling `get_nat_gateway_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_nat_gateway_instance_detail_request' in params:
            body_params = params['get_nat_gateway_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNatGatewayInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNatGatewayInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nat_gateway_instance_list(self, get_nat_gateway_instance_list_request, **kwargs):  # noqa: E501
        """get_nat_gateway_instance_list  # noqa: E501

        NATGateway인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nat_gateway_instance_list(get_nat_gateway_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNatGatewayInstanceListRequest get_nat_gateway_instance_list_request: getNatGatewayInstanceListRequest (required)
        :return: GetNatGatewayInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nat_gateway_instance_list_with_http_info(get_nat_gateway_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nat_gateway_instance_list_with_http_info(get_nat_gateway_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_nat_gateway_instance_list_with_http_info(self, get_nat_gateway_instance_list_request, **kwargs):  # noqa: E501
        """get_nat_gateway_instance_list  # noqa: E501

        NATGateway인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nat_gateway_instance_list_with_http_info(get_nat_gateway_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNatGatewayInstanceListRequest get_nat_gateway_instance_list_request: getNatGatewayInstanceListRequest (required)
        :return: GetNatGatewayInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_nat_gateway_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nat_gateway_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_nat_gateway_instance_list_request' is set
        if ('get_nat_gateway_instance_list_request' not in params or
                params['get_nat_gateway_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_nat_gateway_instance_list_request` when calling `get_nat_gateway_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_nat_gateway_instance_list_request' in params:
            body_params = params['get_nat_gateway_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNatGatewayInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNatGatewayInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_acl_detail(self, get_network_acl_detail_request, **kwargs):  # noqa: E501
        """get_network_acl_detail  # noqa: E501

        네트워크ACL상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_detail(get_network_acl_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclDetailRequest get_network_acl_detail_request: getNetworkAclDetailRequest (required)
        :return: GetNetworkAclDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_acl_detail_with_http_info(get_network_acl_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_acl_detail_with_http_info(get_network_acl_detail_request, **kwargs)  # noqa: E501
            return data

    def get_network_acl_detail_with_http_info(self, get_network_acl_detail_request, **kwargs):  # noqa: E501
        """get_network_acl_detail  # noqa: E501

        네트워크ACL상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_detail_with_http_info(get_network_acl_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclDetailRequest get_network_acl_detail_request: getNetworkAclDetailRequest (required)
        :return: GetNetworkAclDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_network_acl_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_acl_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_network_acl_detail_request' is set
        if ('get_network_acl_detail_request' not in params or
                params['get_network_acl_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_network_acl_detail_request` when calling `get_network_acl_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_network_acl_detail_request' in params:
            body_params = params['get_network_acl_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNetworkAclDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNetworkAclDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_acl_list(self, get_network_acl_list_request, **kwargs):  # noqa: E501
        """get_network_acl_list  # noqa: E501

        네트워크ACL리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_list(get_network_acl_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclListRequest get_network_acl_list_request: getNetworkAclListRequest (required)
        :return: GetNetworkAclListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_acl_list_with_http_info(get_network_acl_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_acl_list_with_http_info(get_network_acl_list_request, **kwargs)  # noqa: E501
            return data

    def get_network_acl_list_with_http_info(self, get_network_acl_list_request, **kwargs):  # noqa: E501
        """get_network_acl_list  # noqa: E501

        네트워크ACL리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_list_with_http_info(get_network_acl_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclListRequest get_network_acl_list_request: getNetworkAclListRequest (required)
        :return: GetNetworkAclListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_network_acl_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_acl_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_network_acl_list_request' is set
        if ('get_network_acl_list_request' not in params or
                params['get_network_acl_list_request'] is None):
            raise ValueError("Missing the required parameter `get_network_acl_list_request` when calling `get_network_acl_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_network_acl_list_request' in params:
            body_params = params['get_network_acl_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNetworkAclList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNetworkAclListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_acl_rule_list(self, get_network_acl_rule_list_request, **kwargs):  # noqa: E501
        """get_network_acl_rule_list  # noqa: E501

        네트워크ACLRule리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_rule_list(get_network_acl_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclRuleListRequest get_network_acl_rule_list_request: getNetworkAclRuleListRequest (required)
        :return: GetNetworkAclRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_acl_rule_list_with_http_info(get_network_acl_rule_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_acl_rule_list_with_http_info(get_network_acl_rule_list_request, **kwargs)  # noqa: E501
            return data

    def get_network_acl_rule_list_with_http_info(self, get_network_acl_rule_list_request, **kwargs):  # noqa: E501
        """get_network_acl_rule_list  # noqa: E501

        네트워크ACLRule리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_acl_rule_list_with_http_info(get_network_acl_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkAclRuleListRequest get_network_acl_rule_list_request: getNetworkAclRuleListRequest (required)
        :return: GetNetworkAclRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_network_acl_rule_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_acl_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_network_acl_rule_list_request' is set
        if ('get_network_acl_rule_list_request' not in params or
                params['get_network_acl_rule_list_request'] is None):
            raise ValueError("Missing the required parameter `get_network_acl_rule_list_request` when calling `get_network_acl_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_network_acl_rule_list_request' in params:
            body_params = params['get_network_acl_rule_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNetworkAclRuleList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNetworkAclRuleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_route_list(self, get_route_list_request, **kwargs):  # noqa: E501
        """get_route_list  # noqa: E501

        라우트리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_list(get_route_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteListRequest get_route_list_request: getRouteListRequest (required)
        :return: GetRouteListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_route_list_with_http_info(get_route_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_route_list_with_http_info(get_route_list_request, **kwargs)  # noqa: E501
            return data

    def get_route_list_with_http_info(self, get_route_list_request, **kwargs):  # noqa: E501
        """get_route_list  # noqa: E501

        라우트리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_list_with_http_info(get_route_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteListRequest get_route_list_request: getRouteListRequest (required)
        :return: GetRouteListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_route_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_route_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_route_list_request' is set
        if ('get_route_list_request' not in params or
                params['get_route_list_request'] is None):
            raise ValueError("Missing the required parameter `get_route_list_request` when calling `get_route_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_route_list_request' in params:
            body_params = params['get_route_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRouteList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRouteListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_route_table_detail(self, get_route_table_detail_request, **kwargs):  # noqa: E501
        """get_route_table_detail  # noqa: E501

        라우트테이블상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_detail(get_route_table_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableDetailRequest get_route_table_detail_request: getRouteTableDetailRequest (required)
        :return: GetRouteTableDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_route_table_detail_with_http_info(get_route_table_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_route_table_detail_with_http_info(get_route_table_detail_request, **kwargs)  # noqa: E501
            return data

    def get_route_table_detail_with_http_info(self, get_route_table_detail_request, **kwargs):  # noqa: E501
        """get_route_table_detail  # noqa: E501

        라우트테이블상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_detail_with_http_info(get_route_table_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableDetailRequest get_route_table_detail_request: getRouteTableDetailRequest (required)
        :return: GetRouteTableDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_route_table_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_route_table_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_route_table_detail_request' is set
        if ('get_route_table_detail_request' not in params or
                params['get_route_table_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_route_table_detail_request` when calling `get_route_table_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_route_table_detail_request' in params:
            body_params = params['get_route_table_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRouteTableDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRouteTableDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_route_table_list(self, get_route_table_list_request, **kwargs):  # noqa: E501
        """get_route_table_list  # noqa: E501

        라우트테이블리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_list(get_route_table_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableListRequest get_route_table_list_request: getRouteTableListRequest (required)
        :return: GetRouteTableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_route_table_list_with_http_info(get_route_table_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_route_table_list_with_http_info(get_route_table_list_request, **kwargs)  # noqa: E501
            return data

    def get_route_table_list_with_http_info(self, get_route_table_list_request, **kwargs):  # noqa: E501
        """get_route_table_list  # noqa: E501

        라우트테이블리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_list_with_http_info(get_route_table_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableListRequest get_route_table_list_request: getRouteTableListRequest (required)
        :return: GetRouteTableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_route_table_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_route_table_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_route_table_list_request' is set
        if ('get_route_table_list_request' not in params or
                params['get_route_table_list_request'] is None):
            raise ValueError("Missing the required parameter `get_route_table_list_request` when calling `get_route_table_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_route_table_list_request' in params:
            body_params = params['get_route_table_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRouteTableList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRouteTableListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_route_table_subnet_list(self, get_route_table_subnet_list_request, **kwargs):  # noqa: E501
        """get_route_table_subnet_list  # noqa: E501

        라우트테이블에연관된서브넷리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_subnet_list(get_route_table_subnet_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableSubnetListRequest get_route_table_subnet_list_request: getRouteTableSubnetListRequest (required)
        :return: GetRouteTableSubnetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_route_table_subnet_list_with_http_info(get_route_table_subnet_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_route_table_subnet_list_with_http_info(get_route_table_subnet_list_request, **kwargs)  # noqa: E501
            return data

    def get_route_table_subnet_list_with_http_info(self, get_route_table_subnet_list_request, **kwargs):  # noqa: E501
        """get_route_table_subnet_list  # noqa: E501

        라우트테이블에연관된서브넷리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_route_table_subnet_list_with_http_info(get_route_table_subnet_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRouteTableSubnetListRequest get_route_table_subnet_list_request: getRouteTableSubnetListRequest (required)
        :return: GetRouteTableSubnetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_route_table_subnet_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_route_table_subnet_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_route_table_subnet_list_request' is set
        if ('get_route_table_subnet_list_request' not in params or
                params['get_route_table_subnet_list_request'] is None):
            raise ValueError("Missing the required parameter `get_route_table_subnet_list_request` when calling `get_route_table_subnet_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_route_table_subnet_list_request' in params:
            body_params = params['get_route_table_subnet_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRouteTableSubnetList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRouteTableSubnetListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subnet_detail(self, get_subnet_detail_request, **kwargs):  # noqa: E501
        """get_subnet_detail  # noqa: E501

        서브넷상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subnet_detail(get_subnet_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetSubnetDetailRequest get_subnet_detail_request: getSubnetDetailRequest (required)
        :return: GetSubnetDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subnet_detail_with_http_info(get_subnet_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subnet_detail_with_http_info(get_subnet_detail_request, **kwargs)  # noqa: E501
            return data

    def get_subnet_detail_with_http_info(self, get_subnet_detail_request, **kwargs):  # noqa: E501
        """get_subnet_detail  # noqa: E501

        서브넷상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subnet_detail_with_http_info(get_subnet_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetSubnetDetailRequest get_subnet_detail_request: getSubnetDetailRequest (required)
        :return: GetSubnetDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_subnet_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnet_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_subnet_detail_request' is set
        if ('get_subnet_detail_request' not in params or
                params['get_subnet_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_subnet_detail_request` when calling `get_subnet_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_subnet_detail_request' in params:
            body_params = params['get_subnet_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getSubnetDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSubnetDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subnet_list(self, get_subnet_list_request, **kwargs):  # noqa: E501
        """get_subnet_list  # noqa: E501

        서브넷리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subnet_list(get_subnet_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetSubnetListRequest get_subnet_list_request: getSubnetListRequest (required)
        :return: GetSubnetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_subnet_list_with_http_info(get_subnet_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subnet_list_with_http_info(get_subnet_list_request, **kwargs)  # noqa: E501
            return data

    def get_subnet_list_with_http_info(self, get_subnet_list_request, **kwargs):  # noqa: E501
        """get_subnet_list  # noqa: E501

        서브넷리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subnet_list_with_http_info(get_subnet_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetSubnetListRequest get_subnet_list_request: getSubnetListRequest (required)
        :return: GetSubnetListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_subnet_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subnet_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_subnet_list_request' is set
        if ('get_subnet_list_request' not in params or
                params['get_subnet_list_request'] is None):
            raise ValueError("Missing the required parameter `get_subnet_list_request` when calling `get_subnet_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_subnet_list_request' in params:
            body_params = params['get_subnet_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getSubnetList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSubnetListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpc_detail(self, get_vpc_detail_request, **kwargs):  # noqa: E501
        """get_vpc_detail  # noqa: E501

        VPC상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_detail(get_vpc_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcDetailRequest get_vpc_detail_request: getVpcDetailRequest (required)
        :return: GetVpcDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vpc_detail_with_http_info(get_vpc_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpc_detail_with_http_info(get_vpc_detail_request, **kwargs)  # noqa: E501
            return data

    def get_vpc_detail_with_http_info(self, get_vpc_detail_request, **kwargs):  # noqa: E501
        """get_vpc_detail  # noqa: E501

        VPC상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_detail_with_http_info(get_vpc_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcDetailRequest get_vpc_detail_request: getVpcDetailRequest (required)
        :return: GetVpcDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_vpc_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpc_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_vpc_detail_request' is set
        if ('get_vpc_detail_request' not in params or
                params['get_vpc_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_vpc_detail_request` when calling `get_vpc_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_vpc_detail_request' in params:
            body_params = params['get_vpc_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getVpcDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVpcDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpc_list(self, get_vpc_list_request, **kwargs):  # noqa: E501
        """get_vpc_list  # noqa: E501

        VPC리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_list(get_vpc_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcListRequest get_vpc_list_request: getVpcListRequest (required)
        :return: GetVpcListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vpc_list_with_http_info(get_vpc_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpc_list_with_http_info(get_vpc_list_request, **kwargs)  # noqa: E501
            return data

    def get_vpc_list_with_http_info(self, get_vpc_list_request, **kwargs):  # noqa: E501
        """get_vpc_list  # noqa: E501

        VPC리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_list_with_http_info(get_vpc_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcListRequest get_vpc_list_request: getVpcListRequest (required)
        :return: GetVpcListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_vpc_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpc_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_vpc_list_request' is set
        if ('get_vpc_list_request' not in params or
                params['get_vpc_list_request'] is None):
            raise ValueError("Missing the required parameter `get_vpc_list_request` when calling `get_vpc_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_vpc_list_request' in params:
            body_params = params['get_vpc_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getVpcList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVpcListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpc_peering_instance_detail(self, get_vpc_peering_instance_detail_request, **kwargs):  # noqa: E501
        """get_vpc_peering_instance_detail  # noqa: E501

        VPCPeering인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_peering_instance_detail(get_vpc_peering_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcPeeringInstanceDetailRequest get_vpc_peering_instance_detail_request: getVpcPeeringInstanceDetailRequest (required)
        :return: GetVpcPeeringInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vpc_peering_instance_detail_with_http_info(get_vpc_peering_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpc_peering_instance_detail_with_http_info(get_vpc_peering_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_vpc_peering_instance_detail_with_http_info(self, get_vpc_peering_instance_detail_request, **kwargs):  # noqa: E501
        """get_vpc_peering_instance_detail  # noqa: E501

        VPCPeering인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_peering_instance_detail_with_http_info(get_vpc_peering_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcPeeringInstanceDetailRequest get_vpc_peering_instance_detail_request: getVpcPeeringInstanceDetailRequest (required)
        :return: GetVpcPeeringInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_vpc_peering_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpc_peering_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_vpc_peering_instance_detail_request' is set
        if ('get_vpc_peering_instance_detail_request' not in params or
                params['get_vpc_peering_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_vpc_peering_instance_detail_request` when calling `get_vpc_peering_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_vpc_peering_instance_detail_request' in params:
            body_params = params['get_vpc_peering_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getVpcPeeringInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVpcPeeringInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpc_peering_instance_list(self, get_vpc_peering_instance_list_request, **kwargs):  # noqa: E501
        """get_vpc_peering_instance_list  # noqa: E501

        VPCPeering인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_peering_instance_list(get_vpc_peering_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcPeeringInstanceListRequest get_vpc_peering_instance_list_request: getVpcPeeringInstanceListRequest (required)
        :return: GetVpcPeeringInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_vpc_peering_instance_list_with_http_info(get_vpc_peering_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpc_peering_instance_list_with_http_info(get_vpc_peering_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_vpc_peering_instance_list_with_http_info(self, get_vpc_peering_instance_list_request, **kwargs):  # noqa: E501
        """get_vpc_peering_instance_list  # noqa: E501

        VPCPeering인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_vpc_peering_instance_list_with_http_info(get_vpc_peering_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetVpcPeeringInstanceListRequest get_vpc_peering_instance_list_request: getVpcPeeringInstanceListRequest (required)
        :return: GetVpcPeeringInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_vpc_peering_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpc_peering_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_vpc_peering_instance_list_request' is set
        if ('get_vpc_peering_instance_list_request' not in params or
                params['get_vpc_peering_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_vpc_peering_instance_list_request` when calling `get_vpc_peering_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_vpc_peering_instance_list_request' in params:
            body_params = params['get_vpc_peering_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getVpcPeeringInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVpcPeeringInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_network_acl_inbound_rule(self, remove_network_acl_inbound_rule_request, **kwargs):  # noqa: E501
        """remove_network_acl_inbound_rule  # noqa: E501

        네트워크ACLInboundRule제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_acl_inbound_rule(remove_network_acl_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkAclInboundRuleRequest remove_network_acl_inbound_rule_request: removeNetworkAclInboundRuleRequest (required)
        :return: RemoveNetworkAclInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_network_acl_inbound_rule_with_http_info(remove_network_acl_inbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_network_acl_inbound_rule_with_http_info(remove_network_acl_inbound_rule_request, **kwargs)  # noqa: E501
            return data

    def remove_network_acl_inbound_rule_with_http_info(self, remove_network_acl_inbound_rule_request, **kwargs):  # noqa: E501
        """remove_network_acl_inbound_rule  # noqa: E501

        네트워크ACLInboundRule제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_acl_inbound_rule_with_http_info(remove_network_acl_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkAclInboundRuleRequest remove_network_acl_inbound_rule_request: removeNetworkAclInboundRuleRequest (required)
        :return: RemoveNetworkAclInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_network_acl_inbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_network_acl_inbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_network_acl_inbound_rule_request' is set
        if ('remove_network_acl_inbound_rule_request' not in params or
                params['remove_network_acl_inbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `remove_network_acl_inbound_rule_request` when calling `remove_network_acl_inbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_network_acl_inbound_rule_request' in params:
            body_params = params['remove_network_acl_inbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeNetworkAclInboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveNetworkAclInboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_network_acl_outbound_rule(self, remove_network_acl_outbound_rule_request, **kwargs):  # noqa: E501
        """remove_network_acl_outbound_rule  # noqa: E501

        네트워크ACLOutboundRule제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_acl_outbound_rule(remove_network_acl_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkAclOutboundRuleRequest remove_network_acl_outbound_rule_request: removeNetworkAclOutboundRuleRequest (required)
        :return: RemoveNetworkAclOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_network_acl_outbound_rule_with_http_info(remove_network_acl_outbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_network_acl_outbound_rule_with_http_info(remove_network_acl_outbound_rule_request, **kwargs)  # noqa: E501
            return data

    def remove_network_acl_outbound_rule_with_http_info(self, remove_network_acl_outbound_rule_request, **kwargs):  # noqa: E501
        """remove_network_acl_outbound_rule  # noqa: E501

        네트워크ACLOutboundRule제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_acl_outbound_rule_with_http_info(remove_network_acl_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkAclOutboundRuleRequest remove_network_acl_outbound_rule_request: removeNetworkAclOutboundRuleRequest (required)
        :return: RemoveNetworkAclOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_network_acl_outbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_network_acl_outbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_network_acl_outbound_rule_request' is set
        if ('remove_network_acl_outbound_rule_request' not in params or
                params['remove_network_acl_outbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `remove_network_acl_outbound_rule_request` when calling `remove_network_acl_outbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_network_acl_outbound_rule_request' in params:
            body_params = params['remove_network_acl_outbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeNetworkAclOutboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveNetworkAclOutboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_route(self, remove_route_request, **kwargs):  # noqa: E501
        """remove_route  # noqa: E501

        라우트제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_route(remove_route_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveRouteRequest remove_route_request: removeRouteRequest (required)
        :return: RemoveRouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_route_with_http_info(remove_route_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_route_with_http_info(remove_route_request, **kwargs)  # noqa: E501
            return data

    def remove_route_with_http_info(self, remove_route_request, **kwargs):  # noqa: E501
        """remove_route  # noqa: E501

        라우트제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_route_with_http_info(remove_route_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveRouteRequest remove_route_request: removeRouteRequest (required)
        :return: RemoveRouteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_route_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_route_request' is set
        if ('remove_route_request' not in params or
                params['remove_route_request'] is None):
            raise ValueError("Missing the required parameter `remove_route_request` when calling `remove_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_route_request' in params:
            body_params = params['remove_route_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeRoute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveRouteResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_route_table_subnet(self, remove_route_table_subnet_request, **kwargs):  # noqa: E501
        """remove_route_table_subnet  # noqa: E501

        라우트테이블의연관서브넷제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_route_table_subnet(remove_route_table_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveRouteTableSubnetRequest remove_route_table_subnet_request: removeRouteTableSubnetRequest (required)
        :return: RemoveRouteTableSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_route_table_subnet_with_http_info(remove_route_table_subnet_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_route_table_subnet_with_http_info(remove_route_table_subnet_request, **kwargs)  # noqa: E501
            return data

    def remove_route_table_subnet_with_http_info(self, remove_route_table_subnet_request, **kwargs):  # noqa: E501
        """remove_route_table_subnet  # noqa: E501

        라우트테이블의연관서브넷제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_route_table_subnet_with_http_info(remove_route_table_subnet_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveRouteTableSubnetRequest remove_route_table_subnet_request: removeRouteTableSubnetRequest (required)
        :return: RemoveRouteTableSubnetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_route_table_subnet_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_route_table_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_route_table_subnet_request' is set
        if ('remove_route_table_subnet_request' not in params or
                params['remove_route_table_subnet_request'] is None):
            raise ValueError("Missing the required parameter `remove_route_table_subnet_request` when calling `remove_route_table_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_route_table_subnet_request' in params:
            body_params = params['remove_route_table_subnet_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeRouteTableSubnet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveRouteTableSubnetResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_nat_gateway_description(self, set_nat_gateway_description_request, **kwargs):  # noqa: E501
        """set_nat_gateway_description  # noqa: E501

        NATGateway설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_nat_gateway_description(set_nat_gateway_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNatGatewayDescriptionRequest set_nat_gateway_description_request: setNatGatewayDescriptionRequest (required)
        :return: SetNatGatewayDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_nat_gateway_description_with_http_info(set_nat_gateway_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_nat_gateway_description_with_http_info(set_nat_gateway_description_request, **kwargs)  # noqa: E501
            return data

    def set_nat_gateway_description_with_http_info(self, set_nat_gateway_description_request, **kwargs):  # noqa: E501
        """set_nat_gateway_description  # noqa: E501

        NATGateway설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_nat_gateway_description_with_http_info(set_nat_gateway_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNatGatewayDescriptionRequest set_nat_gateway_description_request: setNatGatewayDescriptionRequest (required)
        :return: SetNatGatewayDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_nat_gateway_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_nat_gateway_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_nat_gateway_description_request' is set
        if ('set_nat_gateway_description_request' not in params or
                params['set_nat_gateway_description_request'] is None):
            raise ValueError("Missing the required parameter `set_nat_gateway_description_request` when calling `set_nat_gateway_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_nat_gateway_description_request' in params:
            body_params = params['set_nat_gateway_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setNatGatewayDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetNatGatewayDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_network_acl_description(self, set_network_acl_description_request, **kwargs):  # noqa: E501
        """set_network_acl_description  # noqa: E501

        네트워크ACL설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_network_acl_description(set_network_acl_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNetworkAclDescriptionRequest set_network_acl_description_request: setNetworkAclDescriptionRequest (required)
        :return: SetNetworkAclDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_network_acl_description_with_http_info(set_network_acl_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_network_acl_description_with_http_info(set_network_acl_description_request, **kwargs)  # noqa: E501
            return data

    def set_network_acl_description_with_http_info(self, set_network_acl_description_request, **kwargs):  # noqa: E501
        """set_network_acl_description  # noqa: E501

        네트워크ACL설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_network_acl_description_with_http_info(set_network_acl_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNetworkAclDescriptionRequest set_network_acl_description_request: setNetworkAclDescriptionRequest (required)
        :return: SetNetworkAclDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_network_acl_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_network_acl_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_network_acl_description_request' is set
        if ('set_network_acl_description_request' not in params or
                params['set_network_acl_description_request'] is None):
            raise ValueError("Missing the required parameter `set_network_acl_description_request` when calling `set_network_acl_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_network_acl_description_request' in params:
            body_params = params['set_network_acl_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setNetworkAclDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetNetworkAclDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_route_table_description(self, set_route_table_description_request, **kwargs):  # noqa: E501
        """set_route_table_description  # noqa: E501

        라우트테이블설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_route_table_description(set_route_table_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetRouteTableDescriptionRequest set_route_table_description_request: setRouteTableDescriptionRequest (required)
        :return: SetRouteTableDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_route_table_description_with_http_info(set_route_table_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_route_table_description_with_http_info(set_route_table_description_request, **kwargs)  # noqa: E501
            return data

    def set_route_table_description_with_http_info(self, set_route_table_description_request, **kwargs):  # noqa: E501
        """set_route_table_description  # noqa: E501

        라우트테이블설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_route_table_description_with_http_info(set_route_table_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetRouteTableDescriptionRequest set_route_table_description_request: setRouteTableDescriptionRequest (required)
        :return: SetRouteTableDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_route_table_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_route_table_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_route_table_description_request' is set
        if ('set_route_table_description_request' not in params or
                params['set_route_table_description_request'] is None):
            raise ValueError("Missing the required parameter `set_route_table_description_request` when calling `set_route_table_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_route_table_description_request' in params:
            body_params = params['set_route_table_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setRouteTableDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetRouteTableDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_subnet_network_acl(self, set_subnet_network_acl_request, **kwargs):  # noqa: E501
        """set_subnet_network_acl  # noqa: E501

        서브넷의네트워크ACL설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_subnet_network_acl(set_subnet_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetSubnetNetworkAclRequest set_subnet_network_acl_request: setSubnetNetworkAclRequest (required)
        :return: SetSubnetNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_subnet_network_acl_with_http_info(set_subnet_network_acl_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_subnet_network_acl_with_http_info(set_subnet_network_acl_request, **kwargs)  # noqa: E501
            return data

    def set_subnet_network_acl_with_http_info(self, set_subnet_network_acl_request, **kwargs):  # noqa: E501
        """set_subnet_network_acl  # noqa: E501

        서브넷의네트워크ACL설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_subnet_network_acl_with_http_info(set_subnet_network_acl_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetSubnetNetworkAclRequest set_subnet_network_acl_request: setSubnetNetworkAclRequest (required)
        :return: SetSubnetNetworkAclResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_subnet_network_acl_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_subnet_network_acl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_subnet_network_acl_request' is set
        if ('set_subnet_network_acl_request' not in params or
                params['set_subnet_network_acl_request'] is None):
            raise ValueError("Missing the required parameter `set_subnet_network_acl_request` when calling `set_subnet_network_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_subnet_network_acl_request' in params:
            body_params = params['set_subnet_network_acl_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setSubnetNetworkAcl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetSubnetNetworkAclResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_vpc_peering_description(self, set_vpc_peering_description_request, **kwargs):  # noqa: E501
        """set_vpc_peering_description  # noqa: E501

        VPCPeering설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_vpc_peering_description(set_vpc_peering_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetVpcPeeringDescriptionRequest set_vpc_peering_description_request: setVpcPeeringDescriptionRequest (required)
        :return: SetVpcPeeringDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_vpc_peering_description_with_http_info(set_vpc_peering_description_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_vpc_peering_description_with_http_info(set_vpc_peering_description_request, **kwargs)  # noqa: E501
            return data

    def set_vpc_peering_description_with_http_info(self, set_vpc_peering_description_request, **kwargs):  # noqa: E501
        """set_vpc_peering_description  # noqa: E501

        VPCPeering설명설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_vpc_peering_description_with_http_info(set_vpc_peering_description_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetVpcPeeringDescriptionRequest set_vpc_peering_description_request: setVpcPeeringDescriptionRequest (required)
        :return: SetVpcPeeringDescriptionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_vpc_peering_description_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vpc_peering_description" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_vpc_peering_description_request' is set
        if ('set_vpc_peering_description_request' not in params or
                params['set_vpc_peering_description_request'] is None):
            raise ValueError("Missing the required parameter `set_vpc_peering_description_request` when calling `set_vpc_peering_description`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_vpc_peering_description_request' in params:
            body_params = params['set_vpc_peering_description_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setVpcPeeringDescription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetVpcPeeringDescriptionResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
