# coding: utf-8

"""
    vserver

    OpenAPI spec version: 2020-09-17T02:28:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vserver.model.common_code import CommonCode  # noqa: F401,E501


class NetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_interface_no': 'str',
        'network_interface_name': 'str',
        'subnet_no': 'str',
        'delete_on_termination': 'bool',
        'is_default': 'bool',
        'device_name': 'str',
        'network_interface_status': 'CommonCode',
        'instance_type': 'CommonCode',
        'instance_no': 'str',
        'ip': 'str',
        'access_control_group_no_list': 'list[str]',
        'network_interface_description': 'str'
    }

    attribute_map = {
        'network_interface_no': 'networkInterfaceNo',
        'network_interface_name': 'networkInterfaceName',
        'subnet_no': 'subnetNo',
        'delete_on_termination': 'deleteOnTermination',
        'is_default': 'isDefault',
        'device_name': 'deviceName',
        'network_interface_status': 'networkInterfaceStatus',
        'instance_type': 'instanceType',
        'instance_no': 'instanceNo',
        'ip': 'ip',
        'access_control_group_no_list': 'accessControlGroupNoList',
        'network_interface_description': 'networkInterfaceDescription'
    }

    def __init__(self, network_interface_no=None, network_interface_name=None, subnet_no=None, delete_on_termination=None, is_default=None, device_name=None, network_interface_status=None, instance_type=None, instance_no=None, ip=None, access_control_group_no_list=None, network_interface_description=None):  # noqa: E501
        """NetworkInterface - a model defined in Swagger"""  # noqa: E501

        self._network_interface_no = None
        self._network_interface_name = None
        self._subnet_no = None
        self._delete_on_termination = None
        self._is_default = None
        self._device_name = None
        self._network_interface_status = None
        self._instance_type = None
        self._instance_no = None
        self._ip = None
        self._access_control_group_no_list = None
        self._network_interface_description = None
        self.discriminator = None

        if network_interface_no is not None:
            self.network_interface_no = network_interface_no
        if network_interface_name is not None:
            self.network_interface_name = network_interface_name
        if subnet_no is not None:
            self.subnet_no = subnet_no
        if delete_on_termination is not None:
            self.delete_on_termination = delete_on_termination
        if is_default is not None:
            self.is_default = is_default
        if device_name is not None:
            self.device_name = device_name
        if network_interface_status is not None:
            self.network_interface_status = network_interface_status
        if instance_type is not None:
            self.instance_type = instance_type
        if instance_no is not None:
            self.instance_no = instance_no
        if ip is not None:
            self.ip = ip
        if access_control_group_no_list is not None:
            self.access_control_group_no_list = access_control_group_no_list
        if network_interface_description is not None:
            self.network_interface_description = network_interface_description

    @property
    def network_interface_no(self):
        """Gets the network_interface_no of this NetworkInterface.  # noqa: E501

        네트워크인터페이스번호  # noqa: E501

        :return: The network_interface_no of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._network_interface_no

    @network_interface_no.setter
    def network_interface_no(self, network_interface_no):
        """Sets the network_interface_no of this NetworkInterface.

        네트워크인터페이스번호  # noqa: E501

        :param network_interface_no: The network_interface_no of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._network_interface_no = network_interface_no

    @property
    def network_interface_name(self):
        """Gets the network_interface_name of this NetworkInterface.  # noqa: E501

        네트워크인터페이스이름  # noqa: E501

        :return: The network_interface_name of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._network_interface_name

    @network_interface_name.setter
    def network_interface_name(self, network_interface_name):
        """Sets the network_interface_name of this NetworkInterface.

        네트워크인터페이스이름  # noqa: E501

        :param network_interface_name: The network_interface_name of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._network_interface_name = network_interface_name

    @property
    def subnet_no(self):
        """Gets the subnet_no of this NetworkInterface.  # noqa: E501

        서브넷번호  # noqa: E501

        :return: The subnet_no of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._subnet_no

    @subnet_no.setter
    def subnet_no(self, subnet_no):
        """Sets the subnet_no of this NetworkInterface.

        서브넷번호  # noqa: E501

        :param subnet_no: The subnet_no of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._subnet_no = subnet_no

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this NetworkInterface.  # noqa: E501

        디바이스반납시자동반납여부  # noqa: E501

        :return: The delete_on_termination of this NetworkInterface.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this NetworkInterface.

        디바이스반납시자동반납여부  # noqa: E501

        :param delete_on_termination: The delete_on_termination of this NetworkInterface.  # noqa: E501
        :type: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def is_default(self):
        """Gets the is_default of this NetworkInterface.  # noqa: E501

        Default여부  # noqa: E501

        :return: The is_default of this NetworkInterface.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this NetworkInterface.

        Default여부  # noqa: E501

        :param is_default: The is_default of this NetworkInterface.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def device_name(self):
        """Gets the device_name of this NetworkInterface.  # noqa: E501

        디바이스이름  # noqa: E501

        :return: The device_name of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this NetworkInterface.

        디바이스이름  # noqa: E501

        :param device_name: The device_name of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def network_interface_status(self):
        """Gets the network_interface_status of this NetworkInterface.  # noqa: E501

        네트워크인터페이스상태  # noqa: E501

        :return: The network_interface_status of this NetworkInterface.  # noqa: E501
        :rtype: CommonCode
        """
        return self._network_interface_status

    @network_interface_status.setter
    def network_interface_status(self, network_interface_status):
        """Sets the network_interface_status of this NetworkInterface.

        네트워크인터페이스상태  # noqa: E501

        :param network_interface_status: The network_interface_status of this NetworkInterface.  # noqa: E501
        :type: CommonCode
        """

        self._network_interface_status = network_interface_status

    @property
    def instance_type(self):
        """Gets the instance_type of this NetworkInterface.  # noqa: E501

        인스턴스유형  # noqa: E501

        :return: The instance_type of this NetworkInterface.  # noqa: E501
        :rtype: CommonCode
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this NetworkInterface.

        인스턴스유형  # noqa: E501

        :param instance_type: The instance_type of this NetworkInterface.  # noqa: E501
        :type: CommonCode
        """

        self._instance_type = instance_type

    @property
    def instance_no(self):
        """Gets the instance_no of this NetworkInterface.  # noqa: E501

        인스턴스번호  # noqa: E501

        :return: The instance_no of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._instance_no

    @instance_no.setter
    def instance_no(self, instance_no):
        """Sets the instance_no of this NetworkInterface.

        인스턴스번호  # noqa: E501

        :param instance_no: The instance_no of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._instance_no = instance_no

    @property
    def ip(self):
        """Gets the ip of this NetworkInterface.  # noqa: E501

        IP주소  # noqa: E501

        :return: The ip of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this NetworkInterface.

        IP주소  # noqa: E501

        :param ip: The ip of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def access_control_group_no_list(self):
        """Gets the access_control_group_no_list of this NetworkInterface.  # noqa: E501

        ACG번호리스트  # noqa: E501

        :return: The access_control_group_no_list of this NetworkInterface.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_control_group_no_list

    @access_control_group_no_list.setter
    def access_control_group_no_list(self, access_control_group_no_list):
        """Sets the access_control_group_no_list of this NetworkInterface.

        ACG번호리스트  # noqa: E501

        :param access_control_group_no_list: The access_control_group_no_list of this NetworkInterface.  # noqa: E501
        :type: list[str]
        """

        self._access_control_group_no_list = access_control_group_no_list

    @property
    def network_interface_description(self):
        """Gets the network_interface_description of this NetworkInterface.  # noqa: E501

        네트워크인터페이스설명  # noqa: E501

        :return: The network_interface_description of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._network_interface_description

    @network_interface_description.setter
    def network_interface_description(self, network_interface_description):
        """Sets the network_interface_description of this NetworkInterface.

        네트워크인터페이스설명  # noqa: E501

        :param network_interface_description: The network_interface_description of this NetworkInterface.  # noqa: E501
        :type: str
        """

        self._network_interface_description = network_interface_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
