# coding: utf-8

"""
    vserver

    OpenAPI spec version: 2020-09-17T02:28:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vserver.model.root_password_server_instance_parameter import RootPasswordServerInstanceParameter  # noqa: F401,E501


class GetRootPasswordServerInstanceListRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'root_password_server_instance_list': 'list[RootPasswordServerInstanceParameter]'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'root_password_server_instance_list': 'rootPasswordServerInstanceList'
    }

    def __init__(self, region_code=None, root_password_server_instance_list=None):  # noqa: E501
        """GetRootPasswordServerInstanceListRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._root_password_server_instance_list = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        self.root_password_server_instance_list = root_password_server_instance_list

    @property
    def region_code(self):
        """Gets the region_code of this GetRootPasswordServerInstanceListRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this GetRootPasswordServerInstanceListRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this GetRootPasswordServerInstanceListRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this GetRootPasswordServerInstanceListRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def root_password_server_instance_list(self):
        """Gets the root_password_server_instance_list of this GetRootPasswordServerInstanceListRequest.  # noqa: E501

        루트패스워드서버인스턴스리스트  # noqa: E501

        :return: The root_password_server_instance_list of this GetRootPasswordServerInstanceListRequest.  # noqa: E501
        :rtype: list[RootPasswordServerInstanceParameter]
        """
        return self._root_password_server_instance_list

    @root_password_server_instance_list.setter
    def root_password_server_instance_list(self, root_password_server_instance_list):
        """Sets the root_password_server_instance_list of this GetRootPasswordServerInstanceListRequest.

        루트패스워드서버인스턴스리스트  # noqa: E501

        :param root_password_server_instance_list: The root_password_server_instance_list of this GetRootPasswordServerInstanceListRequest.  # noqa: E501
        :type: list[RootPasswordServerInstanceParameter]
        """
        if root_password_server_instance_list is None:
            raise ValueError("Invalid value for `root_password_server_instance_list`, must not be `None`")  # noqa: E501

        self._root_password_server_instance_list = root_password_server_instance_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRootPasswordServerInstanceListRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
