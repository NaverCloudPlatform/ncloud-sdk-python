# coding: utf-8

"""
    vserver

    OpenAPI spec version: 2020-09-17T02:28:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vserver.model.common_code import CommonCode  # noqa: F401,E501


class AccessControlGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_control_group_no': 'str',
        'access_control_group_name': 'str',
        'is_default': 'bool',
        'vpc_no': 'str',
        'access_control_group_status': 'CommonCode',
        'access_control_group_description': 'str'
    }

    attribute_map = {
        'access_control_group_no': 'accessControlGroupNo',
        'access_control_group_name': 'accessControlGroupName',
        'is_default': 'isDefault',
        'vpc_no': 'vpcNo',
        'access_control_group_status': 'accessControlGroupStatus',
        'access_control_group_description': 'accessControlGroupDescription'
    }

    def __init__(self, access_control_group_no=None, access_control_group_name=None, is_default=None, vpc_no=None, access_control_group_status=None, access_control_group_description=None):  # noqa: E501
        """AccessControlGroup - a model defined in Swagger"""  # noqa: E501

        self._access_control_group_no = None
        self._access_control_group_name = None
        self._is_default = None
        self._vpc_no = None
        self._access_control_group_status = None
        self._access_control_group_description = None
        self.discriminator = None

        if access_control_group_no is not None:
            self.access_control_group_no = access_control_group_no
        if access_control_group_name is not None:
            self.access_control_group_name = access_control_group_name
        if is_default is not None:
            self.is_default = is_default
        if vpc_no is not None:
            self.vpc_no = vpc_no
        if access_control_group_status is not None:
            self.access_control_group_status = access_control_group_status
        if access_control_group_description is not None:
            self.access_control_group_description = access_control_group_description

    @property
    def access_control_group_no(self):
        """Gets the access_control_group_no of this AccessControlGroup.  # noqa: E501

        ACG번호  # noqa: E501

        :return: The access_control_group_no of this AccessControlGroup.  # noqa: E501
        :rtype: str
        """
        return self._access_control_group_no

    @access_control_group_no.setter
    def access_control_group_no(self, access_control_group_no):
        """Sets the access_control_group_no of this AccessControlGroup.

        ACG번호  # noqa: E501

        :param access_control_group_no: The access_control_group_no of this AccessControlGroup.  # noqa: E501
        :type: str
        """

        self._access_control_group_no = access_control_group_no

    @property
    def access_control_group_name(self):
        """Gets the access_control_group_name of this AccessControlGroup.  # noqa: E501

        ACG이름  # noqa: E501

        :return: The access_control_group_name of this AccessControlGroup.  # noqa: E501
        :rtype: str
        """
        return self._access_control_group_name

    @access_control_group_name.setter
    def access_control_group_name(self, access_control_group_name):
        """Sets the access_control_group_name of this AccessControlGroup.

        ACG이름  # noqa: E501

        :param access_control_group_name: The access_control_group_name of this AccessControlGroup.  # noqa: E501
        :type: str
        """

        self._access_control_group_name = access_control_group_name

    @property
    def is_default(self):
        """Gets the is_default of this AccessControlGroup.  # noqa: E501

        Default여부  # noqa: E501

        :return: The is_default of this AccessControlGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AccessControlGroup.

        Default여부  # noqa: E501

        :param is_default: The is_default of this AccessControlGroup.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def vpc_no(self):
        """Gets the vpc_no of this AccessControlGroup.  # noqa: E501

        VPC번호  # noqa: E501

        :return: The vpc_no of this AccessControlGroup.  # noqa: E501
        :rtype: str
        """
        return self._vpc_no

    @vpc_no.setter
    def vpc_no(self, vpc_no):
        """Sets the vpc_no of this AccessControlGroup.

        VPC번호  # noqa: E501

        :param vpc_no: The vpc_no of this AccessControlGroup.  # noqa: E501
        :type: str
        """

        self._vpc_no = vpc_no

    @property
    def access_control_group_status(self):
        """Gets the access_control_group_status of this AccessControlGroup.  # noqa: E501

        ACG상태  # noqa: E501

        :return: The access_control_group_status of this AccessControlGroup.  # noqa: E501
        :rtype: CommonCode
        """
        return self._access_control_group_status

    @access_control_group_status.setter
    def access_control_group_status(self, access_control_group_status):
        """Sets the access_control_group_status of this AccessControlGroup.

        ACG상태  # noqa: E501

        :param access_control_group_status: The access_control_group_status of this AccessControlGroup.  # noqa: E501
        :type: CommonCode
        """

        self._access_control_group_status = access_control_group_status

    @property
    def access_control_group_description(self):
        """Gets the access_control_group_description of this AccessControlGroup.  # noqa: E501

        ACG설명  # noqa: E501

        :return: The access_control_group_description of this AccessControlGroup.  # noqa: E501
        :rtype: str
        """
        return self._access_control_group_description

    @access_control_group_description.setter
    def access_control_group_description(self, access_control_group_description):
        """Sets the access_control_group_description of this AccessControlGroup.

        ACG설명  # noqa: E501

        :param access_control_group_description: The access_control_group_description of this AccessControlGroup.  # noqa: E501
        :type: str
        """

        self._access_control_group_description = access_control_group_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControlGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
