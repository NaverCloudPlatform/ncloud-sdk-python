# coding: utf-8

"""
    vserver

    OpenAPI spec version: 2020-09-17T02:28:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_vserver.model.common_code import CommonCode  # noqa: F401,E501


class PlacementGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement_group_no': 'str',
        'placement_group_name': 'str',
        'placement_group_type': 'CommonCode'
    }

    attribute_map = {
        'placement_group_no': 'placementGroupNo',
        'placement_group_name': 'placementGroupName',
        'placement_group_type': 'placementGroupType'
    }

    def __init__(self, placement_group_no=None, placement_group_name=None, placement_group_type=None):  # noqa: E501
        """PlacementGroup - a model defined in Swagger"""  # noqa: E501

        self._placement_group_no = None
        self._placement_group_name = None
        self._placement_group_type = None
        self.discriminator = None

        if placement_group_no is not None:
            self.placement_group_no = placement_group_no
        if placement_group_name is not None:
            self.placement_group_name = placement_group_name
        if placement_group_type is not None:
            self.placement_group_type = placement_group_type

    @property
    def placement_group_no(self):
        """Gets the placement_group_no of this PlacementGroup.  # noqa: E501

        물리배치그룹번호  # noqa: E501

        :return: The placement_group_no of this PlacementGroup.  # noqa: E501
        :rtype: str
        """
        return self._placement_group_no

    @placement_group_no.setter
    def placement_group_no(self, placement_group_no):
        """Sets the placement_group_no of this PlacementGroup.

        물리배치그룹번호  # noqa: E501

        :param placement_group_no: The placement_group_no of this PlacementGroup.  # noqa: E501
        :type: str
        """

        self._placement_group_no = placement_group_no

    @property
    def placement_group_name(self):
        """Gets the placement_group_name of this PlacementGroup.  # noqa: E501

        물리배치그룹이름  # noqa: E501

        :return: The placement_group_name of this PlacementGroup.  # noqa: E501
        :rtype: str
        """
        return self._placement_group_name

    @placement_group_name.setter
    def placement_group_name(self, placement_group_name):
        """Sets the placement_group_name of this PlacementGroup.

        물리배치그룹이름  # noqa: E501

        :param placement_group_name: The placement_group_name of this PlacementGroup.  # noqa: E501
        :type: str
        """

        self._placement_group_name = placement_group_name

    @property
    def placement_group_type(self):
        """Gets the placement_group_type of this PlacementGroup.  # noqa: E501

        물리배치그룹유형  # noqa: E501

        :return: The placement_group_type of this PlacementGroup.  # noqa: E501
        :rtype: CommonCode
        """
        return self._placement_group_type

    @placement_group_type.setter
    def placement_group_type(self, placement_group_type):
        """Sets the placement_group_type of this PlacementGroup.

        물리배치그룹유형  # noqa: E501

        :param placement_group_type: The placement_group_type of this PlacementGroup.  # noqa: E501
        :type: CommonCode
        """

        self._placement_group_type = placement_group_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
