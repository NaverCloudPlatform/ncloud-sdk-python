# coding: utf-8

"""
    vserver

    OpenAPI spec version: 2020-09-17T02:28:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_vserver.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_access_control_group_inbound_rule(self, add_access_control_group_inbound_rule_request, **kwargs):  # noqa: E501
        """add_access_control_group_inbound_rule  # noqa: E501

        ACGInboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_access_control_group_inbound_rule(add_access_control_group_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddAccessControlGroupInboundRuleRequest add_access_control_group_inbound_rule_request: addAccessControlGroupInboundRuleRequest (required)
        :return: AddAccessControlGroupInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_access_control_group_inbound_rule_with_http_info(add_access_control_group_inbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_access_control_group_inbound_rule_with_http_info(add_access_control_group_inbound_rule_request, **kwargs)  # noqa: E501
            return data

    def add_access_control_group_inbound_rule_with_http_info(self, add_access_control_group_inbound_rule_request, **kwargs):  # noqa: E501
        """add_access_control_group_inbound_rule  # noqa: E501

        ACGInboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_access_control_group_inbound_rule_with_http_info(add_access_control_group_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddAccessControlGroupInboundRuleRequest add_access_control_group_inbound_rule_request: addAccessControlGroupInboundRuleRequest (required)
        :return: AddAccessControlGroupInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_access_control_group_inbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_access_control_group_inbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_access_control_group_inbound_rule_request' is set
        if ('add_access_control_group_inbound_rule_request' not in params or
                params['add_access_control_group_inbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `add_access_control_group_inbound_rule_request` when calling `add_access_control_group_inbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_access_control_group_inbound_rule_request' in params:
            body_params = params['add_access_control_group_inbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addAccessControlGroupInboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddAccessControlGroupInboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_access_control_group_outbound_rule(self, add_access_control_group_outbound_rule_request, **kwargs):  # noqa: E501
        """add_access_control_group_outbound_rule  # noqa: E501

        ACGOutboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_access_control_group_outbound_rule(add_access_control_group_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddAccessControlGroupOutboundRuleRequest add_access_control_group_outbound_rule_request: addAccessControlGroupOutboundRuleRequest (required)
        :return: AddAccessControlGroupOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_access_control_group_outbound_rule_with_http_info(add_access_control_group_outbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_access_control_group_outbound_rule_with_http_info(add_access_control_group_outbound_rule_request, **kwargs)  # noqa: E501
            return data

    def add_access_control_group_outbound_rule_with_http_info(self, add_access_control_group_outbound_rule_request, **kwargs):  # noqa: E501
        """add_access_control_group_outbound_rule  # noqa: E501

        ACGOutboundRule추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_access_control_group_outbound_rule_with_http_info(add_access_control_group_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddAccessControlGroupOutboundRuleRequest add_access_control_group_outbound_rule_request: addAccessControlGroupOutboundRuleRequest (required)
        :return: AddAccessControlGroupOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_access_control_group_outbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_access_control_group_outbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_access_control_group_outbound_rule_request' is set
        if ('add_access_control_group_outbound_rule_request' not in params or
                params['add_access_control_group_outbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `add_access_control_group_outbound_rule_request` when calling `add_access_control_group_outbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_access_control_group_outbound_rule_request' in params:
            body_params = params['add_access_control_group_outbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addAccessControlGroupOutboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddAccessControlGroupOutboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_network_interface_access_control_group(self, add_network_interface_access_control_group_request, **kwargs):  # noqa: E501
        """add_network_interface_access_control_group  # noqa: E501

        네트워크인터페이스의ACG추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_interface_access_control_group(add_network_interface_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkInterfaceAccessControlGroupRequest add_network_interface_access_control_group_request: addNetworkInterfaceAccessControlGroupRequest (required)
        :return: AddNetworkInterfaceAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_network_interface_access_control_group_with_http_info(add_network_interface_access_control_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_network_interface_access_control_group_with_http_info(add_network_interface_access_control_group_request, **kwargs)  # noqa: E501
            return data

    def add_network_interface_access_control_group_with_http_info(self, add_network_interface_access_control_group_request, **kwargs):  # noqa: E501
        """add_network_interface_access_control_group  # noqa: E501

        네트워크인터페이스의ACG추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_network_interface_access_control_group_with_http_info(add_network_interface_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNetworkInterfaceAccessControlGroupRequest add_network_interface_access_control_group_request: addNetworkInterfaceAccessControlGroupRequest (required)
        :return: AddNetworkInterfaceAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_network_interface_access_control_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_network_interface_access_control_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_network_interface_access_control_group_request' is set
        if ('add_network_interface_access_control_group_request' not in params or
                params['add_network_interface_access_control_group_request'] is None):
            raise ValueError("Missing the required parameter `add_network_interface_access_control_group_request` when calling `add_network_interface_access_control_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_network_interface_access_control_group_request' in params:
            body_params = params['add_network_interface_access_control_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addNetworkInterfaceAccessControlGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddNetworkInterfaceAccessControlGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_placement_group_server_instance(self, add_placement_group_server_instance_request, **kwargs):  # noqa: E501
        """add_placement_group_server_instance  # noqa: E501

        물리배치그룹에서버인스턴스추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_placement_group_server_instance(add_placement_group_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddPlacementGroupServerInstanceRequest add_placement_group_server_instance_request: addPlacementGroupServerInstanceRequest (required)
        :return: AddPlacementGroupServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_placement_group_server_instance_with_http_info(add_placement_group_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_placement_group_server_instance_with_http_info(add_placement_group_server_instance_request, **kwargs)  # noqa: E501
            return data

    def add_placement_group_server_instance_with_http_info(self, add_placement_group_server_instance_request, **kwargs):  # noqa: E501
        """add_placement_group_server_instance  # noqa: E501

        물리배치그룹에서버인스턴스추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_placement_group_server_instance_with_http_info(add_placement_group_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddPlacementGroupServerInstanceRequest add_placement_group_server_instance_request: addPlacementGroupServerInstanceRequest (required)
        :return: AddPlacementGroupServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_placement_group_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_placement_group_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_placement_group_server_instance_request' is set
        if ('add_placement_group_server_instance_request' not in params or
                params['add_placement_group_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `add_placement_group_server_instance_request` when calling `add_placement_group_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_placement_group_server_instance_request' in params:
            body_params = params['add_placement_group_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addPlacementGroupServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddPlacementGroupServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def associate_public_ip_with_server_instance(self, associate_public_ip_with_server_instance_request, **kwargs):  # noqa: E501
        """associate_public_ip_with_server_instance  # noqa: E501

        공인IP를서버인스턴스에할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.associate_public_ip_with_server_instance(associate_public_ip_with_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AssociatePublicIpWithServerInstanceRequest associate_public_ip_with_server_instance_request: associatePublicIpWithServerInstanceRequest (required)
        :return: AssociatePublicIpWithServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.associate_public_ip_with_server_instance_with_http_info(associate_public_ip_with_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.associate_public_ip_with_server_instance_with_http_info(associate_public_ip_with_server_instance_request, **kwargs)  # noqa: E501
            return data

    def associate_public_ip_with_server_instance_with_http_info(self, associate_public_ip_with_server_instance_request, **kwargs):  # noqa: E501
        """associate_public_ip_with_server_instance  # noqa: E501

        공인IP를서버인스턴스에할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.associate_public_ip_with_server_instance_with_http_info(associate_public_ip_with_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AssociatePublicIpWithServerInstanceRequest associate_public_ip_with_server_instance_request: associatePublicIpWithServerInstanceRequest (required)
        :return: AssociatePublicIpWithServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['associate_public_ip_with_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method associate_public_ip_with_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'associate_public_ip_with_server_instance_request' is set
        if ('associate_public_ip_with_server_instance_request' not in params or
                params['associate_public_ip_with_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `associate_public_ip_with_server_instance_request` when calling `associate_public_ip_with_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'associate_public_ip_with_server_instance_request' in params:
            body_params = params['associate_public_ip_with_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/associatePublicIpWithServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssociatePublicIpWithServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_block_storage_instance(self, attach_block_storage_instance_request, **kwargs):  # noqa: E501
        """attach_block_storage_instance  # noqa: E501

        블록스토리지인스턴스할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.attach_block_storage_instance(attach_block_storage_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AttachBlockStorageInstanceRequest attach_block_storage_instance_request: attachBlockStorageInstanceRequest (required)
        :return: AttachBlockStorageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.attach_block_storage_instance_with_http_info(attach_block_storage_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_block_storage_instance_with_http_info(attach_block_storage_instance_request, **kwargs)  # noqa: E501
            return data

    def attach_block_storage_instance_with_http_info(self, attach_block_storage_instance_request, **kwargs):  # noqa: E501
        """attach_block_storage_instance  # noqa: E501

        블록스토리지인스턴스할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.attach_block_storage_instance_with_http_info(attach_block_storage_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AttachBlockStorageInstanceRequest attach_block_storage_instance_request: attachBlockStorageInstanceRequest (required)
        :return: AttachBlockStorageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attach_block_storage_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_block_storage_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attach_block_storage_instance_request' is set
        if ('attach_block_storage_instance_request' not in params or
                params['attach_block_storage_instance_request'] is None):
            raise ValueError("Missing the required parameter `attach_block_storage_instance_request` when calling `attach_block_storage_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attach_block_storage_instance_request' in params:
            body_params = params['attach_block_storage_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/attachBlockStorageInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachBlockStorageInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attach_network_interface(self, attach_network_interface_request, **kwargs):  # noqa: E501
        """attach_network_interface  # noqa: E501

        네트워크인터페이스할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.attach_network_interface(attach_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AttachNetworkInterfaceRequest attach_network_interface_request: attachNetworkInterfaceRequest (required)
        :return: AttachNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.attach_network_interface_with_http_info(attach_network_interface_request, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_network_interface_with_http_info(attach_network_interface_request, **kwargs)  # noqa: E501
            return data

    def attach_network_interface_with_http_info(self, attach_network_interface_request, **kwargs):  # noqa: E501
        """attach_network_interface  # noqa: E501

        네트워크인터페이스할당  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.attach_network_interface_with_http_info(attach_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AttachNetworkInterfaceRequest attach_network_interface_request: attachNetworkInterfaceRequest (required)
        :return: AttachNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attach_network_interface_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attach_network_interface_request' is set
        if ('attach_network_interface_request' not in params or
                params['attach_network_interface_request'] is None):
            raise ValueError("Missing the required parameter `attach_network_interface_request` when calling `attach_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attach_network_interface_request' in params:
            body_params = params['attach_network_interface_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/attachNetworkInterface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachNetworkInterfaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_block_storage_volume_size(self, change_block_storage_volume_size_request, **kwargs):  # noqa: E501
        """change_block_storage_volume_size  # noqa: E501

        블록스토리지볼륨사이즈변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_block_storage_volume_size(change_block_storage_volume_size_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeBlockStorageVolumeSizeRequest change_block_storage_volume_size_request: changeBlockStorageVolumeSizeRequest (required)
        :return: ChangeBlockStorageVolumeSizeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_block_storage_volume_size_with_http_info(change_block_storage_volume_size_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_block_storage_volume_size_with_http_info(change_block_storage_volume_size_request, **kwargs)  # noqa: E501
            return data

    def change_block_storage_volume_size_with_http_info(self, change_block_storage_volume_size_request, **kwargs):  # noqa: E501
        """change_block_storage_volume_size  # noqa: E501

        블록스토리지볼륨사이즈변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_block_storage_volume_size_with_http_info(change_block_storage_volume_size_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeBlockStorageVolumeSizeRequest change_block_storage_volume_size_request: changeBlockStorageVolumeSizeRequest (required)
        :return: ChangeBlockStorageVolumeSizeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_block_storage_volume_size_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_block_storage_volume_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_block_storage_volume_size_request' is set
        if ('change_block_storage_volume_size_request' not in params or
                params['change_block_storage_volume_size_request'] is None):
            raise ValueError("Missing the required parameter `change_block_storage_volume_size_request` when calling `change_block_storage_volume_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_block_storage_volume_size_request' in params:
            body_params = params['change_block_storage_volume_size_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeBlockStorageVolumeSize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeBlockStorageVolumeSizeResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_server_instance_spec(self, change_server_instance_spec_request, **kwargs):  # noqa: E501
        """change_server_instance_spec  # noqa: E501

        서버인스턴스스펙변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_server_instance_spec(change_server_instance_spec_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeServerInstanceSpecRequest change_server_instance_spec_request: changeServerInstanceSpecRequest (required)
        :return: ChangeServerInstanceSpecResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_server_instance_spec_with_http_info(change_server_instance_spec_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_server_instance_spec_with_http_info(change_server_instance_spec_request, **kwargs)  # noqa: E501
            return data

    def change_server_instance_spec_with_http_info(self, change_server_instance_spec_request, **kwargs):  # noqa: E501
        """change_server_instance_spec  # noqa: E501

        서버인스턴스스펙변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_server_instance_spec_with_http_info(change_server_instance_spec_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeServerInstanceSpecRequest change_server_instance_spec_request: changeServerInstanceSpecRequest (required)
        :return: ChangeServerInstanceSpecResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_server_instance_spec_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_server_instance_spec" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_server_instance_spec_request' is set
        if ('change_server_instance_spec_request' not in params or
                params['change_server_instance_spec_request'] is None):
            raise ValueError("Missing the required parameter `change_server_instance_spec_request` when calling `change_server_instance_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_server_instance_spec_request' in params:
            body_params = params['change_server_instance_spec_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeServerInstanceSpec', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeServerInstanceSpecResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_access_control_group(self, create_access_control_group_request, **kwargs):  # noqa: E501
        """create_access_control_group  # noqa: E501

        ACG생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_access_control_group(create_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAccessControlGroupRequest create_access_control_group_request: createAccessControlGroupRequest (required)
        :return: CreateAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_access_control_group_with_http_info(create_access_control_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_access_control_group_with_http_info(create_access_control_group_request, **kwargs)  # noqa: E501
            return data

    def create_access_control_group_with_http_info(self, create_access_control_group_request, **kwargs):  # noqa: E501
        """create_access_control_group  # noqa: E501

        ACG생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_access_control_group_with_http_info(create_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateAccessControlGroupRequest create_access_control_group_request: createAccessControlGroupRequest (required)
        :return: CreateAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_access_control_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_access_control_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_access_control_group_request' is set
        if ('create_access_control_group_request' not in params or
                params['create_access_control_group_request'] is None):
            raise ValueError("Missing the required parameter `create_access_control_group_request` when calling `create_access_control_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_access_control_group_request' in params:
            body_params = params['create_access_control_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createAccessControlGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateAccessControlGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_block_storage_instance(self, create_block_storage_instance_request, **kwargs):  # noqa: E501
        """create_block_storage_instance  # noqa: E501

        블록스토리지인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_block_storage_instance(create_block_storage_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBlockStorageInstanceRequest create_block_storage_instance_request: createBlockStorageInstanceRequest (required)
        :return: CreateBlockStorageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_block_storage_instance_with_http_info(create_block_storage_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_block_storage_instance_with_http_info(create_block_storage_instance_request, **kwargs)  # noqa: E501
            return data

    def create_block_storage_instance_with_http_info(self, create_block_storage_instance_request, **kwargs):  # noqa: E501
        """create_block_storage_instance  # noqa: E501

        블록스토리지인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_block_storage_instance_with_http_info(create_block_storage_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBlockStorageInstanceRequest create_block_storage_instance_request: createBlockStorageInstanceRequest (required)
        :return: CreateBlockStorageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_block_storage_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_block_storage_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_block_storage_instance_request' is set
        if ('create_block_storage_instance_request' not in params or
                params['create_block_storage_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_block_storage_instance_request` when calling `create_block_storage_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_block_storage_instance_request' in params:
            body_params = params['create_block_storage_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createBlockStorageInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateBlockStorageInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_block_storage_snapshot_instance(self, create_block_storage_snapshot_instance_request, **kwargs):  # noqa: E501
        """create_block_storage_snapshot_instance  # noqa: E501

        블록스토리지스냅샷인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_block_storage_snapshot_instance(create_block_storage_snapshot_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBlockStorageSnapshotInstanceRequest create_block_storage_snapshot_instance_request: createBlockStorageSnapshotInstanceRequest (required)
        :return: CreateBlockStorageSnapshotInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_block_storage_snapshot_instance_with_http_info(create_block_storage_snapshot_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_block_storage_snapshot_instance_with_http_info(create_block_storage_snapshot_instance_request, **kwargs)  # noqa: E501
            return data

    def create_block_storage_snapshot_instance_with_http_info(self, create_block_storage_snapshot_instance_request, **kwargs):  # noqa: E501
        """create_block_storage_snapshot_instance  # noqa: E501

        블록스토리지스냅샷인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_block_storage_snapshot_instance_with_http_info(create_block_storage_snapshot_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateBlockStorageSnapshotInstanceRequest create_block_storage_snapshot_instance_request: createBlockStorageSnapshotInstanceRequest (required)
        :return: CreateBlockStorageSnapshotInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_block_storage_snapshot_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_block_storage_snapshot_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_block_storage_snapshot_instance_request' is set
        if ('create_block_storage_snapshot_instance_request' not in params or
                params['create_block_storage_snapshot_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_block_storage_snapshot_instance_request` when calling `create_block_storage_snapshot_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_block_storage_snapshot_instance_request' in params:
            body_params = params['create_block_storage_snapshot_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createBlockStorageSnapshotInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateBlockStorageSnapshotInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_init_script(self, create_init_script_request, **kwargs):  # noqa: E501
        """create_init_script  # noqa: E501

        초기화스크립트생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_init_script(create_init_script_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInitScriptRequest create_init_script_request: createInitScriptRequest (required)
        :return: CreateInitScriptResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_init_script_with_http_info(create_init_script_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_init_script_with_http_info(create_init_script_request, **kwargs)  # noqa: E501
            return data

    def create_init_script_with_http_info(self, create_init_script_request, **kwargs):  # noqa: E501
        """create_init_script  # noqa: E501

        초기화스크립트생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_init_script_with_http_info(create_init_script_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateInitScriptRequest create_init_script_request: createInitScriptRequest (required)
        :return: CreateInitScriptResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_init_script_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_init_script" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_init_script_request' is set
        if ('create_init_script_request' not in params or
                params['create_init_script_request'] is None):
            raise ValueError("Missing the required parameter `create_init_script_request` when calling `create_init_script`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_init_script_request' in params:
            body_params = params['create_init_script_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createInitScript', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateInitScriptResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_login_key(self, create_login_key_request, **kwargs):  # noqa: E501
        """create_login_key  # noqa: E501

        로그인키생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_login_key(create_login_key_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoginKeyRequest create_login_key_request: createLoginKeyRequest (required)
        :return: CreateLoginKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_login_key_with_http_info(create_login_key_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_login_key_with_http_info(create_login_key_request, **kwargs)  # noqa: E501
            return data

    def create_login_key_with_http_info(self, create_login_key_request, **kwargs):  # noqa: E501
        """create_login_key  # noqa: E501

        로그인키생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_login_key_with_http_info(create_login_key_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoginKeyRequest create_login_key_request: createLoginKeyRequest (required)
        :return: CreateLoginKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_login_key_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_login_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_login_key_request' is set
        if ('create_login_key_request' not in params or
                params['create_login_key_request'] is None):
            raise ValueError("Missing the required parameter `create_login_key_request` when calling `create_login_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_login_key_request' in params:
            body_params = params['create_login_key_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createLoginKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLoginKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_member_server_image_instance(self, create_member_server_image_instance_request, **kwargs):  # noqa: E501
        """create_member_server_image_instance  # noqa: E501

        회원서버이미지인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_member_server_image_instance(create_member_server_image_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMemberServerImageInstanceRequest create_member_server_image_instance_request: createMemberServerImageInstanceRequest (required)
        :return: CreateMemberServerImageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_member_server_image_instance_with_http_info(create_member_server_image_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_member_server_image_instance_with_http_info(create_member_server_image_instance_request, **kwargs)  # noqa: E501
            return data

    def create_member_server_image_instance_with_http_info(self, create_member_server_image_instance_request, **kwargs):  # noqa: E501
        """create_member_server_image_instance  # noqa: E501

        회원서버이미지인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_member_server_image_instance_with_http_info(create_member_server_image_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateMemberServerImageInstanceRequest create_member_server_image_instance_request: createMemberServerImageInstanceRequest (required)
        :return: CreateMemberServerImageInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_member_server_image_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_member_server_image_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_member_server_image_instance_request' is set
        if ('create_member_server_image_instance_request' not in params or
                params['create_member_server_image_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_member_server_image_instance_request` when calling `create_member_server_image_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_member_server_image_instance_request' in params:
            body_params = params['create_member_server_image_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createMemberServerImageInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMemberServerImageInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_network_interface(self, create_network_interface_request, **kwargs):  # noqa: E501
        """create_network_interface  # noqa: E501

        네트워크인터페이스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_network_interface(create_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNetworkInterfaceRequest create_network_interface_request: createNetworkInterfaceRequest (required)
        :return: CreateNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_network_interface_with_http_info(create_network_interface_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_network_interface_with_http_info(create_network_interface_request, **kwargs)  # noqa: E501
            return data

    def create_network_interface_with_http_info(self, create_network_interface_request, **kwargs):  # noqa: E501
        """create_network_interface  # noqa: E501

        네트워크인터페이스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_network_interface_with_http_info(create_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNetworkInterfaceRequest create_network_interface_request: createNetworkInterfaceRequest (required)
        :return: CreateNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_network_interface_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_network_interface_request' is set
        if ('create_network_interface_request' not in params or
                params['create_network_interface_request'] is None):
            raise ValueError("Missing the required parameter `create_network_interface_request` when calling `create_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_network_interface_request' in params:
            body_params = params['create_network_interface_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createNetworkInterface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateNetworkInterfaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_placement_group(self, create_placement_group_request, **kwargs):  # noqa: E501
        """create_placement_group  # noqa: E501

        물리배치그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_placement_group(create_placement_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePlacementGroupRequest create_placement_group_request: createPlacementGroupRequest (required)
        :return: CreatePlacementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_placement_group_with_http_info(create_placement_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_placement_group_with_http_info(create_placement_group_request, **kwargs)  # noqa: E501
            return data

    def create_placement_group_with_http_info(self, create_placement_group_request, **kwargs):  # noqa: E501
        """create_placement_group  # noqa: E501

        물리배치그룹생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_placement_group_with_http_info(create_placement_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePlacementGroupRequest create_placement_group_request: createPlacementGroupRequest (required)
        :return: CreatePlacementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_placement_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_placement_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_placement_group_request' is set
        if ('create_placement_group_request' not in params or
                params['create_placement_group_request'] is None):
            raise ValueError("Missing the required parameter `create_placement_group_request` when calling `create_placement_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_placement_group_request' in params:
            body_params = params['create_placement_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createPlacementGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePlacementGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_public_ip_instance(self, create_public_ip_instance_request, **kwargs):  # noqa: E501
        """create_public_ip_instance  # noqa: E501

        공인IP인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_public_ip_instance(create_public_ip_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePublicIpInstanceRequest create_public_ip_instance_request: createPublicIpInstanceRequest (required)
        :return: CreatePublicIpInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_public_ip_instance_with_http_info(create_public_ip_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_public_ip_instance_with_http_info(create_public_ip_instance_request, **kwargs)  # noqa: E501
            return data

    def create_public_ip_instance_with_http_info(self, create_public_ip_instance_request, **kwargs):  # noqa: E501
        """create_public_ip_instance  # noqa: E501

        공인IP인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_public_ip_instance_with_http_info(create_public_ip_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreatePublicIpInstanceRequest create_public_ip_instance_request: createPublicIpInstanceRequest (required)
        :return: CreatePublicIpInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_public_ip_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_public_ip_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_public_ip_instance_request' is set
        if ('create_public_ip_instance_request' not in params or
                params['create_public_ip_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_public_ip_instance_request` when calling `create_public_ip_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_public_ip_instance_request' in params:
            body_params = params['create_public_ip_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createPublicIpInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePublicIpInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_server_instances(self, create_server_instances_request, **kwargs):  # noqa: E501
        """create_server_instances  # noqa: E501

        서버인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_server_instances(create_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateServerInstancesRequest create_server_instances_request: createServerInstancesRequest (required)
        :return: CreateServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_server_instances_with_http_info(create_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_server_instances_with_http_info(create_server_instances_request, **kwargs)  # noqa: E501
            return data

    def create_server_instances_with_http_info(self, create_server_instances_request, **kwargs):  # noqa: E501
        """create_server_instances  # noqa: E501

        서버인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_server_instances_with_http_info(create_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateServerInstancesRequest create_server_instances_request: createServerInstancesRequest (required)
        :return: CreateServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_server_instances_request' is set
        if ('create_server_instances_request' not in params or
                params['create_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `create_server_instances_request` when calling `create_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_server_instances_request' in params:
            body_params = params['create_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_access_control_group(self, delete_access_control_group_request, **kwargs):  # noqa: E501
        """delete_access_control_group  # noqa: E501

        ACG삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_access_control_group(delete_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAccessControlGroupRequest delete_access_control_group_request: deleteAccessControlGroupRequest (required)
        :return: DeleteAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_access_control_group_with_http_info(delete_access_control_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_access_control_group_with_http_info(delete_access_control_group_request, **kwargs)  # noqa: E501
            return data

    def delete_access_control_group_with_http_info(self, delete_access_control_group_request, **kwargs):  # noqa: E501
        """delete_access_control_group  # noqa: E501

        ACG삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_access_control_group_with_http_info(delete_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteAccessControlGroupRequest delete_access_control_group_request: deleteAccessControlGroupRequest (required)
        :return: DeleteAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_access_control_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_access_control_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_access_control_group_request' is set
        if ('delete_access_control_group_request' not in params or
                params['delete_access_control_group_request'] is None):
            raise ValueError("Missing the required parameter `delete_access_control_group_request` when calling `delete_access_control_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_access_control_group_request' in params:
            body_params = params['delete_access_control_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteAccessControlGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteAccessControlGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_block_storage_instances(self, delete_block_storage_instances_request, **kwargs):  # noqa: E501
        """delete_block_storage_instances  # noqa: E501

        블록스토리지인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_block_storage_instances(delete_block_storage_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteBlockStorageInstancesRequest delete_block_storage_instances_request: deleteBlockStorageInstancesRequest (required)
        :return: DeleteBlockStorageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_block_storage_instances_with_http_info(delete_block_storage_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_block_storage_instances_with_http_info(delete_block_storage_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_block_storage_instances_with_http_info(self, delete_block_storage_instances_request, **kwargs):  # noqa: E501
        """delete_block_storage_instances  # noqa: E501

        블록스토리지인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_block_storage_instances_with_http_info(delete_block_storage_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteBlockStorageInstancesRequest delete_block_storage_instances_request: deleteBlockStorageInstancesRequest (required)
        :return: DeleteBlockStorageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_block_storage_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_block_storage_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_block_storage_instances_request' is set
        if ('delete_block_storage_instances_request' not in params or
                params['delete_block_storage_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_block_storage_instances_request` when calling `delete_block_storage_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_block_storage_instances_request' in params:
            body_params = params['delete_block_storage_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteBlockStorageInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteBlockStorageInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_block_storage_snapshot_instances(self, delete_block_storage_snapshot_instances_request, **kwargs):  # noqa: E501
        """delete_block_storage_snapshot_instances  # noqa: E501

        블록스토리지스냅샷인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_block_storage_snapshot_instances(delete_block_storage_snapshot_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteBlockStorageSnapshotInstancesRequest delete_block_storage_snapshot_instances_request: deleteBlockStorageSnapshotInstancesRequest (required)
        :return: DeleteBlockStorageSnapshotInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_block_storage_snapshot_instances_with_http_info(delete_block_storage_snapshot_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_block_storage_snapshot_instances_with_http_info(delete_block_storage_snapshot_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_block_storage_snapshot_instances_with_http_info(self, delete_block_storage_snapshot_instances_request, **kwargs):  # noqa: E501
        """delete_block_storage_snapshot_instances  # noqa: E501

        블록스토리지스냅샷인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_block_storage_snapshot_instances_with_http_info(delete_block_storage_snapshot_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteBlockStorageSnapshotInstancesRequest delete_block_storage_snapshot_instances_request: deleteBlockStorageSnapshotInstancesRequest (required)
        :return: DeleteBlockStorageSnapshotInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_block_storage_snapshot_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_block_storage_snapshot_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_block_storage_snapshot_instances_request' is set
        if ('delete_block_storage_snapshot_instances_request' not in params or
                params['delete_block_storage_snapshot_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_block_storage_snapshot_instances_request` when calling `delete_block_storage_snapshot_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_block_storage_snapshot_instances_request' in params:
            body_params = params['delete_block_storage_snapshot_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteBlockStorageSnapshotInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteBlockStorageSnapshotInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_init_scripts(self, delete_init_scripts_request, **kwargs):  # noqa: E501
        """delete_init_scripts  # noqa: E501

        초기화스크립트삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_init_scripts(delete_init_scripts_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteInitScriptsRequest delete_init_scripts_request: deleteInitScriptsRequest (required)
        :return: DeleteInitScriptsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_init_scripts_with_http_info(delete_init_scripts_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_init_scripts_with_http_info(delete_init_scripts_request, **kwargs)  # noqa: E501
            return data

    def delete_init_scripts_with_http_info(self, delete_init_scripts_request, **kwargs):  # noqa: E501
        """delete_init_scripts  # noqa: E501

        초기화스크립트삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_init_scripts_with_http_info(delete_init_scripts_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteInitScriptsRequest delete_init_scripts_request: deleteInitScriptsRequest (required)
        :return: DeleteInitScriptsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_init_scripts_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_init_scripts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_init_scripts_request' is set
        if ('delete_init_scripts_request' not in params or
                params['delete_init_scripts_request'] is None):
            raise ValueError("Missing the required parameter `delete_init_scripts_request` when calling `delete_init_scripts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_init_scripts_request' in params:
            body_params = params['delete_init_scripts_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteInitScripts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteInitScriptsResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_login_keys(self, delete_login_keys_request, **kwargs):  # noqa: E501
        """delete_login_keys  # noqa: E501

        로그인키삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_login_keys(delete_login_keys_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoginKeysRequest delete_login_keys_request: deleteLoginKeysRequest (required)
        :return: DeleteLoginKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_login_keys_with_http_info(delete_login_keys_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_login_keys_with_http_info(delete_login_keys_request, **kwargs)  # noqa: E501
            return data

    def delete_login_keys_with_http_info(self, delete_login_keys_request, **kwargs):  # noqa: E501
        """delete_login_keys  # noqa: E501

        로그인키삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_login_keys_with_http_info(delete_login_keys_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoginKeysRequest delete_login_keys_request: deleteLoginKeysRequest (required)
        :return: DeleteLoginKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_login_keys_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_login_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_login_keys_request' is set
        if ('delete_login_keys_request' not in params or
                params['delete_login_keys_request'] is None):
            raise ValueError("Missing the required parameter `delete_login_keys_request` when calling `delete_login_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_login_keys_request' in params:
            body_params = params['delete_login_keys_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteLoginKeys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoginKeysResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member_server_image_instances(self, delete_member_server_image_instances_request, **kwargs):  # noqa: E501
        """delete_member_server_image_instances  # noqa: E501

        회원서버이미지인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_member_server_image_instances(delete_member_server_image_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteMemberServerImageInstancesRequest delete_member_server_image_instances_request: deleteMemberServerImageInstancesRequest (required)
        :return: DeleteMemberServerImageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_member_server_image_instances_with_http_info(delete_member_server_image_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_server_image_instances_with_http_info(delete_member_server_image_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_member_server_image_instances_with_http_info(self, delete_member_server_image_instances_request, **kwargs):  # noqa: E501
        """delete_member_server_image_instances  # noqa: E501

        회원서버이미지인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_member_server_image_instances_with_http_info(delete_member_server_image_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteMemberServerImageInstancesRequest delete_member_server_image_instances_request: deleteMemberServerImageInstancesRequest (required)
        :return: DeleteMemberServerImageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_member_server_image_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member_server_image_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_member_server_image_instances_request' is set
        if ('delete_member_server_image_instances_request' not in params or
                params['delete_member_server_image_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_member_server_image_instances_request` when calling `delete_member_server_image_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_member_server_image_instances_request' in params:
            body_params = params['delete_member_server_image_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteMemberServerImageInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteMemberServerImageInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_network_interface(self, delete_network_interface_request, **kwargs):  # noqa: E501
        """delete_network_interface  # noqa: E501

        네트워크인터페이스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_interface(delete_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNetworkInterfaceRequest delete_network_interface_request: deleteNetworkInterfaceRequest (required)
        :return: DeleteNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_network_interface_with_http_info(delete_network_interface_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_network_interface_with_http_info(delete_network_interface_request, **kwargs)  # noqa: E501
            return data

    def delete_network_interface_with_http_info(self, delete_network_interface_request, **kwargs):  # noqa: E501
        """delete_network_interface  # noqa: E501

        네트워크인터페이스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_network_interface_with_http_info(delete_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNetworkInterfaceRequest delete_network_interface_request: deleteNetworkInterfaceRequest (required)
        :return: DeleteNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_network_interface_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_network_interface_request' is set
        if ('delete_network_interface_request' not in params or
                params['delete_network_interface_request'] is None):
            raise ValueError("Missing the required parameter `delete_network_interface_request` when calling `delete_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_network_interface_request' in params:
            body_params = params['delete_network_interface_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteNetworkInterface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteNetworkInterfaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_placement_group(self, delete_placement_group_request, **kwargs):  # noqa: E501
        """delete_placement_group  # noqa: E501

        물리배치그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_placement_group(delete_placement_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePlacementGroupRequest delete_placement_group_request: deletePlacementGroupRequest (required)
        :return: DeletePlacementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_placement_group_with_http_info(delete_placement_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_placement_group_with_http_info(delete_placement_group_request, **kwargs)  # noqa: E501
            return data

    def delete_placement_group_with_http_info(self, delete_placement_group_request, **kwargs):  # noqa: E501
        """delete_placement_group  # noqa: E501

        물리배치그룹삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_placement_group_with_http_info(delete_placement_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePlacementGroupRequest delete_placement_group_request: deletePlacementGroupRequest (required)
        :return: DeletePlacementGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_placement_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_placement_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_placement_group_request' is set
        if ('delete_placement_group_request' not in params or
                params['delete_placement_group_request'] is None):
            raise ValueError("Missing the required parameter `delete_placement_group_request` when calling `delete_placement_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_placement_group_request' in params:
            body_params = params['delete_placement_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deletePlacementGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletePlacementGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_public_ip_instance(self, delete_public_ip_instance_request, **kwargs):  # noqa: E501
        """delete_public_ip_instance  # noqa: E501

        공인IP인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_public_ip_instance(delete_public_ip_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePublicIpInstanceRequest delete_public_ip_instance_request: deletePublicIpInstanceRequest (required)
        :return: DeletePublicIpInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_public_ip_instance_with_http_info(delete_public_ip_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_public_ip_instance_with_http_info(delete_public_ip_instance_request, **kwargs)  # noqa: E501
            return data

    def delete_public_ip_instance_with_http_info(self, delete_public_ip_instance_request, **kwargs):  # noqa: E501
        """delete_public_ip_instance  # noqa: E501

        공인IP인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_public_ip_instance_with_http_info(delete_public_ip_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeletePublicIpInstanceRequest delete_public_ip_instance_request: deletePublicIpInstanceRequest (required)
        :return: DeletePublicIpInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_public_ip_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_public_ip_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_public_ip_instance_request' is set
        if ('delete_public_ip_instance_request' not in params or
                params['delete_public_ip_instance_request'] is None):
            raise ValueError("Missing the required parameter `delete_public_ip_instance_request` when calling `delete_public_ip_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_public_ip_instance_request' in params:
            body_params = params['delete_public_ip_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deletePublicIpInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeletePublicIpInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_block_storage_instances(self, detach_block_storage_instances_request, **kwargs):  # noqa: E501
        """detach_block_storage_instances  # noqa: E501

        블록스토리지인스턴스할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.detach_block_storage_instances(detach_block_storage_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DetachBlockStorageInstancesRequest detach_block_storage_instances_request: detachBlockStorageInstancesRequest (required)
        :return: DetachBlockStorageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.detach_block_storage_instances_with_http_info(detach_block_storage_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_block_storage_instances_with_http_info(detach_block_storage_instances_request, **kwargs)  # noqa: E501
            return data

    def detach_block_storage_instances_with_http_info(self, detach_block_storage_instances_request, **kwargs):  # noqa: E501
        """detach_block_storage_instances  # noqa: E501

        블록스토리지인스턴스할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.detach_block_storage_instances_with_http_info(detach_block_storage_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DetachBlockStorageInstancesRequest detach_block_storage_instances_request: detachBlockStorageInstancesRequest (required)
        :return: DetachBlockStorageInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['detach_block_storage_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_block_storage_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'detach_block_storage_instances_request' is set
        if ('detach_block_storage_instances_request' not in params or
                params['detach_block_storage_instances_request'] is None):
            raise ValueError("Missing the required parameter `detach_block_storage_instances_request` when calling `detach_block_storage_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'detach_block_storage_instances_request' in params:
            body_params = params['detach_block_storage_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/detachBlockStorageInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetachBlockStorageInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_network_interface(self, detach_network_interface_request, **kwargs):  # noqa: E501
        """detach_network_interface  # noqa: E501

        네트워크인터페이스할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.detach_network_interface(detach_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DetachNetworkInterfaceRequest detach_network_interface_request: detachNetworkInterfaceRequest (required)
        :return: DetachNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.detach_network_interface_with_http_info(detach_network_interface_request, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_network_interface_with_http_info(detach_network_interface_request, **kwargs)  # noqa: E501
            return data

    def detach_network_interface_with_http_info(self, detach_network_interface_request, **kwargs):  # noqa: E501
        """detach_network_interface  # noqa: E501

        네트워크인터페이스할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.detach_network_interface_with_http_info(detach_network_interface_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DetachNetworkInterfaceRequest detach_network_interface_request: detachNetworkInterfaceRequest (required)
        :return: DetachNetworkInterfaceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['detach_network_interface_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'detach_network_interface_request' is set
        if ('detach_network_interface_request' not in params or
                params['detach_network_interface_request'] is None):
            raise ValueError("Missing the required parameter `detach_network_interface_request` when calling `detach_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'detach_network_interface_request' in params:
            body_params = params['detach_network_interface_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/detachNetworkInterface', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetachNetworkInterfaceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disassociate_public_ip_from_server_instance(self, disassociate_public_ip_from_server_instance_request, **kwargs):  # noqa: E501
        """disassociate_public_ip_from_server_instance  # noqa: E501

        공인IP를서버인스턴스에서할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.disassociate_public_ip_from_server_instance(disassociate_public_ip_from_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DisassociatePublicIpFromServerInstanceRequest disassociate_public_ip_from_server_instance_request: disassociatePublicIpFromServerInstanceRequest (required)
        :return: DisassociatePublicIpFromServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.disassociate_public_ip_from_server_instance_with_http_info(disassociate_public_ip_from_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.disassociate_public_ip_from_server_instance_with_http_info(disassociate_public_ip_from_server_instance_request, **kwargs)  # noqa: E501
            return data

    def disassociate_public_ip_from_server_instance_with_http_info(self, disassociate_public_ip_from_server_instance_request, **kwargs):  # noqa: E501
        """disassociate_public_ip_from_server_instance  # noqa: E501

        공인IP를서버인스턴스에서할당해제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.disassociate_public_ip_from_server_instance_with_http_info(disassociate_public_ip_from_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DisassociatePublicIpFromServerInstanceRequest disassociate_public_ip_from_server_instance_request: disassociatePublicIpFromServerInstanceRequest (required)
        :return: DisassociatePublicIpFromServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['disassociate_public_ip_from_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disassociate_public_ip_from_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'disassociate_public_ip_from_server_instance_request' is set
        if ('disassociate_public_ip_from_server_instance_request' not in params or
                params['disassociate_public_ip_from_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `disassociate_public_ip_from_server_instance_request` when calling `disassociate_public_ip_from_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'disassociate_public_ip_from_server_instance_request' in params:
            body_params = params['disassociate_public_ip_from_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/disassociatePublicIpFromServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DisassociatePublicIpFromServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_access_control_group_detail(self, get_access_control_group_detail_request, **kwargs):  # noqa: E501
        """get_access_control_group_detail  # noqa: E501

        ACG상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_detail(get_access_control_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupDetailRequest get_access_control_group_detail_request: getAccessControlGroupDetailRequest (required)
        :return: GetAccessControlGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_access_control_group_detail_with_http_info(get_access_control_group_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_access_control_group_detail_with_http_info(get_access_control_group_detail_request, **kwargs)  # noqa: E501
            return data

    def get_access_control_group_detail_with_http_info(self, get_access_control_group_detail_request, **kwargs):  # noqa: E501
        """get_access_control_group_detail  # noqa: E501

        ACG상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_detail_with_http_info(get_access_control_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupDetailRequest get_access_control_group_detail_request: getAccessControlGroupDetailRequest (required)
        :return: GetAccessControlGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_access_control_group_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_access_control_group_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_access_control_group_detail_request' is set
        if ('get_access_control_group_detail_request' not in params or
                params['get_access_control_group_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_access_control_group_detail_request` when calling `get_access_control_group_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_access_control_group_detail_request' in params:
            body_params = params['get_access_control_group_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAccessControlGroupDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccessControlGroupDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_access_control_group_list(self, get_access_control_group_list_request, **kwargs):  # noqa: E501
        """get_access_control_group_list  # noqa: E501

        ACG리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_list(get_access_control_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupListRequest get_access_control_group_list_request: getAccessControlGroupListRequest (required)
        :return: GetAccessControlGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_access_control_group_list_with_http_info(get_access_control_group_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_access_control_group_list_with_http_info(get_access_control_group_list_request, **kwargs)  # noqa: E501
            return data

    def get_access_control_group_list_with_http_info(self, get_access_control_group_list_request, **kwargs):  # noqa: E501
        """get_access_control_group_list  # noqa: E501

        ACG리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_list_with_http_info(get_access_control_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupListRequest get_access_control_group_list_request: getAccessControlGroupListRequest (required)
        :return: GetAccessControlGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_access_control_group_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_access_control_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_access_control_group_list_request' is set
        if ('get_access_control_group_list_request' not in params or
                params['get_access_control_group_list_request'] is None):
            raise ValueError("Missing the required parameter `get_access_control_group_list_request` when calling `get_access_control_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_access_control_group_list_request' in params:
            body_params = params['get_access_control_group_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAccessControlGroupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccessControlGroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_access_control_group_rule_list(self, get_access_control_group_rule_list_request, **kwargs):  # noqa: E501
        """get_access_control_group_rule_list  # noqa: E501

        ACGRule리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_rule_list(get_access_control_group_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupRuleListRequest get_access_control_group_rule_list_request: getAccessControlGroupRuleListRequest (required)
        :return: GetAccessControlGroupRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_access_control_group_rule_list_with_http_info(get_access_control_group_rule_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_access_control_group_rule_list_with_http_info(get_access_control_group_rule_list_request, **kwargs)  # noqa: E501
            return data

    def get_access_control_group_rule_list_with_http_info(self, get_access_control_group_rule_list_request, **kwargs):  # noqa: E501
        """get_access_control_group_rule_list  # noqa: E501

        ACGRule리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_access_control_group_rule_list_with_http_info(get_access_control_group_rule_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetAccessControlGroupRuleListRequest get_access_control_group_rule_list_request: getAccessControlGroupRuleListRequest (required)
        :return: GetAccessControlGroupRuleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_access_control_group_rule_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_access_control_group_rule_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_access_control_group_rule_list_request' is set
        if ('get_access_control_group_rule_list_request' not in params or
                params['get_access_control_group_rule_list_request'] is None):
            raise ValueError("Missing the required parameter `get_access_control_group_rule_list_request` when calling `get_access_control_group_rule_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_access_control_group_rule_list_request' in params:
            body_params = params['get_access_control_group_rule_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getAccessControlGroupRuleList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAccessControlGroupRuleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_storage_instance_detail(self, get_block_storage_instance_detail_request, **kwargs):  # noqa: E501
        """get_block_storage_instance_detail  # noqa: E501

        블록스토리지인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_instance_detail(get_block_storage_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageInstanceDetailRequest get_block_storage_instance_detail_request: getBlockStorageInstanceDetailRequest (required)
        :return: GetBlockStorageInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_storage_instance_detail_with_http_info(get_block_storage_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_storage_instance_detail_with_http_info(get_block_storage_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_block_storage_instance_detail_with_http_info(self, get_block_storage_instance_detail_request, **kwargs):  # noqa: E501
        """get_block_storage_instance_detail  # noqa: E501

        블록스토리지인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_instance_detail_with_http_info(get_block_storage_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageInstanceDetailRequest get_block_storage_instance_detail_request: getBlockStorageInstanceDetailRequest (required)
        :return: GetBlockStorageInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_block_storage_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_storage_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_block_storage_instance_detail_request' is set
        if ('get_block_storage_instance_detail_request' not in params or
                params['get_block_storage_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_block_storage_instance_detail_request` when calling `get_block_storage_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_block_storage_instance_detail_request' in params:
            body_params = params['get_block_storage_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getBlockStorageInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockStorageInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_storage_instance_list(self, get_block_storage_instance_list_request, **kwargs):  # noqa: E501
        """get_block_storage_instance_list  # noqa: E501

        블록스토리지인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_instance_list(get_block_storage_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageInstanceListRequest get_block_storage_instance_list_request: getBlockStorageInstanceListRequest (required)
        :return: GetBlockStorageInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_storage_instance_list_with_http_info(get_block_storage_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_storage_instance_list_with_http_info(get_block_storage_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_block_storage_instance_list_with_http_info(self, get_block_storage_instance_list_request, **kwargs):  # noqa: E501
        """get_block_storage_instance_list  # noqa: E501

        블록스토리지인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_instance_list_with_http_info(get_block_storage_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageInstanceListRequest get_block_storage_instance_list_request: getBlockStorageInstanceListRequest (required)
        :return: GetBlockStorageInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_block_storage_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_storage_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_block_storage_instance_list_request' is set
        if ('get_block_storage_instance_list_request' not in params or
                params['get_block_storage_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_block_storage_instance_list_request` when calling `get_block_storage_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_block_storage_instance_list_request' in params:
            body_params = params['get_block_storage_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getBlockStorageInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockStorageInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_storage_snapshot_instance_detail(self, get_block_storage_snapshot_instance_detail_request, **kwargs):  # noqa: E501
        """get_block_storage_snapshot_instance_detail  # noqa: E501

        블록스토리지스냅샷인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_snapshot_instance_detail(get_block_storage_snapshot_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageSnapshotInstanceDetailRequest get_block_storage_snapshot_instance_detail_request: getBlockStorageSnapshotInstanceDetailRequest (required)
        :return: GetBlockStorageSnapshotInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_storage_snapshot_instance_detail_with_http_info(get_block_storage_snapshot_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_storage_snapshot_instance_detail_with_http_info(get_block_storage_snapshot_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_block_storage_snapshot_instance_detail_with_http_info(self, get_block_storage_snapshot_instance_detail_request, **kwargs):  # noqa: E501
        """get_block_storage_snapshot_instance_detail  # noqa: E501

        블록스토리지스냅샷인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_snapshot_instance_detail_with_http_info(get_block_storage_snapshot_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageSnapshotInstanceDetailRequest get_block_storage_snapshot_instance_detail_request: getBlockStorageSnapshotInstanceDetailRequest (required)
        :return: GetBlockStorageSnapshotInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_block_storage_snapshot_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_storage_snapshot_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_block_storage_snapshot_instance_detail_request' is set
        if ('get_block_storage_snapshot_instance_detail_request' not in params or
                params['get_block_storage_snapshot_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_block_storage_snapshot_instance_detail_request` when calling `get_block_storage_snapshot_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_block_storage_snapshot_instance_detail_request' in params:
            body_params = params['get_block_storage_snapshot_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getBlockStorageSnapshotInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockStorageSnapshotInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_storage_snapshot_instance_list(self, get_block_storage_snapshot_instance_list_request, **kwargs):  # noqa: E501
        """get_block_storage_snapshot_instance_list  # noqa: E501

        블록스토리지스냅샷인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_snapshot_instance_list(get_block_storage_snapshot_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageSnapshotInstanceListRequest get_block_storage_snapshot_instance_list_request: getBlockStorageSnapshotInstanceListRequest (required)
        :return: GetBlockStorageSnapshotInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_storage_snapshot_instance_list_with_http_info(get_block_storage_snapshot_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_storage_snapshot_instance_list_with_http_info(get_block_storage_snapshot_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_block_storage_snapshot_instance_list_with_http_info(self, get_block_storage_snapshot_instance_list_request, **kwargs):  # noqa: E501
        """get_block_storage_snapshot_instance_list  # noqa: E501

        블록스토리지스냅샷인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_storage_snapshot_instance_list_with_http_info(get_block_storage_snapshot_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBlockStorageSnapshotInstanceListRequest get_block_storage_snapshot_instance_list_request: getBlockStorageSnapshotInstanceListRequest (required)
        :return: GetBlockStorageSnapshotInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_block_storage_snapshot_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_storage_snapshot_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_block_storage_snapshot_instance_list_request' is set
        if ('get_block_storage_snapshot_instance_list_request' not in params or
                params['get_block_storage_snapshot_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_block_storage_snapshot_instance_list_request` when calling `get_block_storage_snapshot_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_block_storage_snapshot_instance_list_request' in params:
            body_params = params['get_block_storage_snapshot_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getBlockStorageSnapshotInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockStorageSnapshotInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_init_script_detail(self, get_init_script_detail_request, **kwargs):  # noqa: E501
        """get_init_script_detail  # noqa: E501

        초기화스크립트상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_init_script_detail(get_init_script_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetInitScriptDetailRequest get_init_script_detail_request: getInitScriptDetailRequest (required)
        :return: GetInitScriptDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_init_script_detail_with_http_info(get_init_script_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_init_script_detail_with_http_info(get_init_script_detail_request, **kwargs)  # noqa: E501
            return data

    def get_init_script_detail_with_http_info(self, get_init_script_detail_request, **kwargs):  # noqa: E501
        """get_init_script_detail  # noqa: E501

        초기화스크립트상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_init_script_detail_with_http_info(get_init_script_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetInitScriptDetailRequest get_init_script_detail_request: getInitScriptDetailRequest (required)
        :return: GetInitScriptDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_init_script_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_init_script_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_init_script_detail_request' is set
        if ('get_init_script_detail_request' not in params or
                params['get_init_script_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_init_script_detail_request` when calling `get_init_script_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_init_script_detail_request' in params:
            body_params = params['get_init_script_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getInitScriptDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInitScriptDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_init_script_list(self, get_init_script_list_request, **kwargs):  # noqa: E501
        """get_init_script_list  # noqa: E501

        초기화스크립트리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_init_script_list(get_init_script_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetInitScriptListRequest get_init_script_list_request: getInitScriptListRequest (required)
        :return: GetInitScriptListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_init_script_list_with_http_info(get_init_script_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_init_script_list_with_http_info(get_init_script_list_request, **kwargs)  # noqa: E501
            return data

    def get_init_script_list_with_http_info(self, get_init_script_list_request, **kwargs):  # noqa: E501
        """get_init_script_list  # noqa: E501

        초기화스크립트리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_init_script_list_with_http_info(get_init_script_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetInitScriptListRequest get_init_script_list_request: getInitScriptListRequest (required)
        :return: GetInitScriptListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_init_script_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_init_script_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_init_script_list_request' is set
        if ('get_init_script_list_request' not in params or
                params['get_init_script_list_request'] is None):
            raise ValueError("Missing the required parameter `get_init_script_list_request` when calling `get_init_script_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_init_script_list_request' in params:
            body_params = params['get_init_script_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getInitScriptList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetInitScriptListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_login_key_list(self, get_login_key_list_request, **kwargs):  # noqa: E501
        """get_login_key_list  # noqa: E501

        로그인키리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_login_key_list(get_login_key_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoginKeyListRequest get_login_key_list_request: getLoginKeyListRequest (required)
        :return: GetLoginKeyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_login_key_list_with_http_info(get_login_key_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_login_key_list_with_http_info(get_login_key_list_request, **kwargs)  # noqa: E501
            return data

    def get_login_key_list_with_http_info(self, get_login_key_list_request, **kwargs):  # noqa: E501
        """get_login_key_list  # noqa: E501

        로그인키리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_login_key_list_with_http_info(get_login_key_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoginKeyListRequest get_login_key_list_request: getLoginKeyListRequest (required)
        :return: GetLoginKeyListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_login_key_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_login_key_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_login_key_list_request' is set
        if ('get_login_key_list_request' not in params or
                params['get_login_key_list_request'] is None):
            raise ValueError("Missing the required parameter `get_login_key_list_request` when calling `get_login_key_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_login_key_list_request' in params:
            body_params = params['get_login_key_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoginKeyList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoginKeyListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_member_server_image_instance_detail(self, get_member_server_image_instance_detail_request, **kwargs):  # noqa: E501
        """get_member_server_image_instance_detail  # noqa: E501

        회원서버이미지인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_member_server_image_instance_detail(get_member_server_image_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetMemberServerImageInstanceDetailRequest get_member_server_image_instance_detail_request: getMemberServerImageInstanceDetailRequest (required)
        :return: GetMemberServerImageInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_member_server_image_instance_detail_with_http_info(get_member_server_image_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_member_server_image_instance_detail_with_http_info(get_member_server_image_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_member_server_image_instance_detail_with_http_info(self, get_member_server_image_instance_detail_request, **kwargs):  # noqa: E501
        """get_member_server_image_instance_detail  # noqa: E501

        회원서버이미지인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_member_server_image_instance_detail_with_http_info(get_member_server_image_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetMemberServerImageInstanceDetailRequest get_member_server_image_instance_detail_request: getMemberServerImageInstanceDetailRequest (required)
        :return: GetMemberServerImageInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_member_server_image_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_member_server_image_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_member_server_image_instance_detail_request' is set
        if ('get_member_server_image_instance_detail_request' not in params or
                params['get_member_server_image_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_member_server_image_instance_detail_request` when calling `get_member_server_image_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_member_server_image_instance_detail_request' in params:
            body_params = params['get_member_server_image_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getMemberServerImageInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMemberServerImageInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_member_server_image_instance_list(self, get_member_server_image_instance_list_request, **kwargs):  # noqa: E501
        """get_member_server_image_instance_list  # noqa: E501

        회원서버이미지인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_member_server_image_instance_list(get_member_server_image_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetMemberServerImageInstanceListRequest get_member_server_image_instance_list_request: getMemberServerImageInstanceListRequest (required)
        :return: GetMemberServerImageInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_member_server_image_instance_list_with_http_info(get_member_server_image_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_member_server_image_instance_list_with_http_info(get_member_server_image_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_member_server_image_instance_list_with_http_info(self, get_member_server_image_instance_list_request, **kwargs):  # noqa: E501
        """get_member_server_image_instance_list  # noqa: E501

        회원서버이미지인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_member_server_image_instance_list_with_http_info(get_member_server_image_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetMemberServerImageInstanceListRequest get_member_server_image_instance_list_request: getMemberServerImageInstanceListRequest (required)
        :return: GetMemberServerImageInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_member_server_image_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_member_server_image_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_member_server_image_instance_list_request' is set
        if ('get_member_server_image_instance_list_request' not in params or
                params['get_member_server_image_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_member_server_image_instance_list_request` when calling `get_member_server_image_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_member_server_image_instance_list_request' in params:
            body_params = params['get_member_server_image_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getMemberServerImageInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMemberServerImageInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_interface_detail(self, get_network_interface_detail_request, **kwargs):  # noqa: E501
        """get_network_interface_detail  # noqa: E501

        네트워크인터페이스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_detail(get_network_interface_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkInterfaceDetailRequest get_network_interface_detail_request: getNetworkInterfaceDetailRequest (required)
        :return: GetNetworkInterfaceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_interface_detail_with_http_info(get_network_interface_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_interface_detail_with_http_info(get_network_interface_detail_request, **kwargs)  # noqa: E501
            return data

    def get_network_interface_detail_with_http_info(self, get_network_interface_detail_request, **kwargs):  # noqa: E501
        """get_network_interface_detail  # noqa: E501

        네트워크인터페이스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_detail_with_http_info(get_network_interface_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkInterfaceDetailRequest get_network_interface_detail_request: getNetworkInterfaceDetailRequest (required)
        :return: GetNetworkInterfaceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_network_interface_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_interface_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_network_interface_detail_request' is set
        if ('get_network_interface_detail_request' not in params or
                params['get_network_interface_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_network_interface_detail_request` when calling `get_network_interface_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_network_interface_detail_request' in params:
            body_params = params['get_network_interface_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNetworkInterfaceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNetworkInterfaceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_network_interface_list(self, get_network_interface_list_request, **kwargs):  # noqa: E501
        """get_network_interface_list  # noqa: E501

        네트워크인터페이스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_list(get_network_interface_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkInterfaceListRequest get_network_interface_list_request: getNetworkInterfaceListRequest (required)
        :return: GetNetworkInterfaceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_network_interface_list_with_http_info(get_network_interface_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_network_interface_list_with_http_info(get_network_interface_list_request, **kwargs)  # noqa: E501
            return data

    def get_network_interface_list_with_http_info(self, get_network_interface_list_request, **kwargs):  # noqa: E501
        """get_network_interface_list  # noqa: E501

        네트워크인터페이스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_network_interface_list_with_http_info(get_network_interface_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNetworkInterfaceListRequest get_network_interface_list_request: getNetworkInterfaceListRequest (required)
        :return: GetNetworkInterfaceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_network_interface_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_network_interface_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_network_interface_list_request' is set
        if ('get_network_interface_list_request' not in params or
                params['get_network_interface_list_request'] is None):
            raise ValueError("Missing the required parameter `get_network_interface_list_request` when calling `get_network_interface_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_network_interface_list_request' in params:
            body_params = params['get_network_interface_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNetworkInterfaceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNetworkInterfaceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_placement_group_detail(self, get_placement_group_detail_request, **kwargs):  # noqa: E501
        """get_placement_group_detail  # noqa: E501

        물리배치그룹상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_placement_group_detail(get_placement_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPlacementGroupDetailRequest get_placement_group_detail_request: getPlacementGroupDetailRequest (required)
        :return: GetPlacementGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_placement_group_detail_with_http_info(get_placement_group_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_placement_group_detail_with_http_info(get_placement_group_detail_request, **kwargs)  # noqa: E501
            return data

    def get_placement_group_detail_with_http_info(self, get_placement_group_detail_request, **kwargs):  # noqa: E501
        """get_placement_group_detail  # noqa: E501

        물리배치그룹상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_placement_group_detail_with_http_info(get_placement_group_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPlacementGroupDetailRequest get_placement_group_detail_request: getPlacementGroupDetailRequest (required)
        :return: GetPlacementGroupDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_placement_group_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_placement_group_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_placement_group_detail_request' is set
        if ('get_placement_group_detail_request' not in params or
                params['get_placement_group_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_placement_group_detail_request` when calling `get_placement_group_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_placement_group_detail_request' in params:
            body_params = params['get_placement_group_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getPlacementGroupDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPlacementGroupDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_placement_group_list(self, get_placement_group_list_request, **kwargs):  # noqa: E501
        """get_placement_group_list  # noqa: E501

        물리배치그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_placement_group_list(get_placement_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPlacementGroupListRequest get_placement_group_list_request: getPlacementGroupListRequest (required)
        :return: GetPlacementGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_placement_group_list_with_http_info(get_placement_group_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_placement_group_list_with_http_info(get_placement_group_list_request, **kwargs)  # noqa: E501
            return data

    def get_placement_group_list_with_http_info(self, get_placement_group_list_request, **kwargs):  # noqa: E501
        """get_placement_group_list  # noqa: E501

        물리배치그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_placement_group_list_with_http_info(get_placement_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPlacementGroupListRequest get_placement_group_list_request: getPlacementGroupListRequest (required)
        :return: GetPlacementGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_placement_group_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_placement_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_placement_group_list_request' is set
        if ('get_placement_group_list_request' not in params or
                params['get_placement_group_list_request'] is None):
            raise ValueError("Missing the required parameter `get_placement_group_list_request` when calling `get_placement_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_placement_group_list_request' in params:
            body_params = params['get_placement_group_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getPlacementGroupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPlacementGroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_ip_instance_detail(self, get_public_ip_instance_detail_request, **kwargs):  # noqa: E501
        """get_public_ip_instance_detail  # noqa: E501

        공인IP인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_instance_detail(get_public_ip_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpInstanceDetailRequest get_public_ip_instance_detail_request: getPublicIpInstanceDetailRequest (required)
        :return: GetPublicIpInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_public_ip_instance_detail_with_http_info(get_public_ip_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_ip_instance_detail_with_http_info(get_public_ip_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_public_ip_instance_detail_with_http_info(self, get_public_ip_instance_detail_request, **kwargs):  # noqa: E501
        """get_public_ip_instance_detail  # noqa: E501

        공인IP인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_instance_detail_with_http_info(get_public_ip_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpInstanceDetailRequest get_public_ip_instance_detail_request: getPublicIpInstanceDetailRequest (required)
        :return: GetPublicIpInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_public_ip_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_ip_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_public_ip_instance_detail_request' is set
        if ('get_public_ip_instance_detail_request' not in params or
                params['get_public_ip_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_public_ip_instance_detail_request` when calling `get_public_ip_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_public_ip_instance_detail_request' in params:
            body_params = params['get_public_ip_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getPublicIpInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPublicIpInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_ip_instance_list(self, get_public_ip_instance_list_request, **kwargs):  # noqa: E501
        """get_public_ip_instance_list  # noqa: E501

        공인IP인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_instance_list(get_public_ip_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpInstanceListRequest get_public_ip_instance_list_request: getPublicIpInstanceListRequest (required)
        :return: GetPublicIpInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_public_ip_instance_list_with_http_info(get_public_ip_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_ip_instance_list_with_http_info(get_public_ip_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_public_ip_instance_list_with_http_info(self, get_public_ip_instance_list_request, **kwargs):  # noqa: E501
        """get_public_ip_instance_list  # noqa: E501

        공인IP인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_instance_list_with_http_info(get_public_ip_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpInstanceListRequest get_public_ip_instance_list_request: getPublicIpInstanceListRequest (required)
        :return: GetPublicIpInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_public_ip_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_ip_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_public_ip_instance_list_request' is set
        if ('get_public_ip_instance_list_request' not in params or
                params['get_public_ip_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_public_ip_instance_list_request` when calling `get_public_ip_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_public_ip_instance_list_request' in params:
            body_params = params['get_public_ip_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getPublicIpInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPublicIpInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_ip_target_server_instance_list(self, get_public_ip_target_server_instance_list_request, **kwargs):  # noqa: E501
        """get_public_ip_target_server_instance_list  # noqa: E501

        공인IP할당가능서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_target_server_instance_list(get_public_ip_target_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpTargetServerInstanceListRequest get_public_ip_target_server_instance_list_request: getPublicIpTargetServerInstanceListRequest (required)
        :return: GetPublicIpTargetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_public_ip_target_server_instance_list_with_http_info(get_public_ip_target_server_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_ip_target_server_instance_list_with_http_info(get_public_ip_target_server_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_public_ip_target_server_instance_list_with_http_info(self, get_public_ip_target_server_instance_list_request, **kwargs):  # noqa: E501
        """get_public_ip_target_server_instance_list  # noqa: E501

        공인IP할당가능서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_ip_target_server_instance_list_with_http_info(get_public_ip_target_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetPublicIpTargetServerInstanceListRequest get_public_ip_target_server_instance_list_request: getPublicIpTargetServerInstanceListRequest (required)
        :return: GetPublicIpTargetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_public_ip_target_server_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_ip_target_server_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_public_ip_target_server_instance_list_request' is set
        if ('get_public_ip_target_server_instance_list_request' not in params or
                params['get_public_ip_target_server_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_public_ip_target_server_instance_list_request` when calling `get_public_ip_target_server_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_public_ip_target_server_instance_list_request' in params:
            body_params = params['get_public_ip_target_server_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getPublicIpTargetServerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPublicIpTargetServerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_region_list(self, get_region_list_request, **kwargs):  # noqa: E501
        """get_region_list  # noqa: E501

        REGION리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region_list(get_region_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRegionListRequest get_region_list_request: getRegionListRequest (required)
        :return: GetRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_region_list_with_http_info(get_region_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_region_list_with_http_info(get_region_list_request, **kwargs)  # noqa: E501
            return data

    def get_region_list_with_http_info(self, get_region_list_request, **kwargs):  # noqa: E501
        """get_region_list  # noqa: E501

        REGION리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_region_list_with_http_info(get_region_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRegionListRequest get_region_list_request: getRegionListRequest (required)
        :return: GetRegionListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_region_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_region_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_region_list_request' is set
        if ('get_region_list_request' not in params or
                params['get_region_list_request'] is None):
            raise ValueError("Missing the required parameter `get_region_list_request` when calling `get_region_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_region_list_request' in params:
            body_params = params['get_region_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRegionList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRegionListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_root_password(self, get_root_password_request, **kwargs):  # noqa: E501
        """get_root_password  # noqa: E501

        서버인스턴스의루트패스워드조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root_password(get_root_password_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRootPasswordRequest get_root_password_request: getRootPasswordRequest (required)
        :return: GetRootPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_root_password_with_http_info(get_root_password_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_root_password_with_http_info(get_root_password_request, **kwargs)  # noqa: E501
            return data

    def get_root_password_with_http_info(self, get_root_password_request, **kwargs):  # noqa: E501
        """get_root_password  # noqa: E501

        서버인스턴스의루트패스워드조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root_password_with_http_info(get_root_password_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRootPasswordRequest get_root_password_request: getRootPasswordRequest (required)
        :return: GetRootPasswordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_root_password_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_root_password_request' is set
        if ('get_root_password_request' not in params or
                params['get_root_password_request'] is None):
            raise ValueError("Missing the required parameter `get_root_password_request` when calling `get_root_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_root_password_request' in params:
            body_params = params['get_root_password_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRootPassword', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRootPasswordResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_root_password_server_instance_list(self, get_root_password_server_instance_list_request, **kwargs):  # noqa: E501
        """get_root_password_server_instance_list  # noqa: E501

        서버인스턴스리스트의루트패스워드조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root_password_server_instance_list(get_root_password_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRootPasswordServerInstanceListRequest get_root_password_server_instance_list_request: getRootPasswordServerInstanceListRequest (required)
        :return: GetRootPasswordServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_root_password_server_instance_list_with_http_info(get_root_password_server_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_root_password_server_instance_list_with_http_info(get_root_password_server_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_root_password_server_instance_list_with_http_info(self, get_root_password_server_instance_list_request, **kwargs):  # noqa: E501
        """get_root_password_server_instance_list  # noqa: E501

        서버인스턴스리스트의루트패스워드조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_root_password_server_instance_list_with_http_info(get_root_password_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetRootPasswordServerInstanceListRequest get_root_password_server_instance_list_request: getRootPasswordServerInstanceListRequest (required)
        :return: GetRootPasswordServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_root_password_server_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_root_password_server_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_root_password_server_instance_list_request' is set
        if ('get_root_password_server_instance_list_request' not in params or
                params['get_root_password_server_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_root_password_server_instance_list_request` when calling `get_root_password_server_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_root_password_server_instance_list_request' in params:
            body_params = params['get_root_password_server_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getRootPasswordServerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRootPasswordServerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_image_product_list(self, get_server_image_product_list_request, **kwargs):  # noqa: E501
        """get_server_image_product_list  # noqa: E501

        서버이미지상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_image_product_list(get_server_image_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerImageProductListRequest get_server_image_product_list_request: getServerImageProductListRequest (required)
        :return: GetServerImageProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_server_image_product_list_with_http_info(get_server_image_product_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_image_product_list_with_http_info(get_server_image_product_list_request, **kwargs)  # noqa: E501
            return data

    def get_server_image_product_list_with_http_info(self, get_server_image_product_list_request, **kwargs):  # noqa: E501
        """get_server_image_product_list  # noqa: E501

        서버이미지상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_image_product_list_with_http_info(get_server_image_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerImageProductListRequest get_server_image_product_list_request: getServerImageProductListRequest (required)
        :return: GetServerImageProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_server_image_product_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_image_product_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_server_image_product_list_request' is set
        if ('get_server_image_product_list_request' not in params or
                params['get_server_image_product_list_request'] is None):
            raise ValueError("Missing the required parameter `get_server_image_product_list_request` when calling `get_server_image_product_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_server_image_product_list_request' in params:
            body_params = params['get_server_image_product_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getServerImageProductList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServerImageProductListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_instance_detail(self, get_server_instance_detail_request, **kwargs):  # noqa: E501
        """get_server_instance_detail  # noqa: E501

        서버인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_instance_detail(get_server_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerInstanceDetailRequest get_server_instance_detail_request: getServerInstanceDetailRequest (required)
        :return: GetServerInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_server_instance_detail_with_http_info(get_server_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_instance_detail_with_http_info(get_server_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_server_instance_detail_with_http_info(self, get_server_instance_detail_request, **kwargs):  # noqa: E501
        """get_server_instance_detail  # noqa: E501

        서버인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_instance_detail_with_http_info(get_server_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerInstanceDetailRequest get_server_instance_detail_request: getServerInstanceDetailRequest (required)
        :return: GetServerInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_server_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_server_instance_detail_request' is set
        if ('get_server_instance_detail_request' not in params or
                params['get_server_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_server_instance_detail_request` when calling `get_server_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_server_instance_detail_request' in params:
            body_params = params['get_server_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getServerInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServerInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_instance_list(self, get_server_instance_list_request, **kwargs):  # noqa: E501
        """get_server_instance_list  # noqa: E501

        서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_instance_list(get_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerInstanceListRequest get_server_instance_list_request: getServerInstanceListRequest (required)
        :return: GetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_server_instance_list_with_http_info(get_server_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_instance_list_with_http_info(get_server_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_server_instance_list_with_http_info(self, get_server_instance_list_request, **kwargs):  # noqa: E501
        """get_server_instance_list  # noqa: E501

        서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_instance_list_with_http_info(get_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerInstanceListRequest get_server_instance_list_request: getServerInstanceListRequest (required)
        :return: GetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_server_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_server_instance_list_request' is set
        if ('get_server_instance_list_request' not in params or
                params['get_server_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_server_instance_list_request` when calling `get_server_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_server_instance_list_request' in params:
            body_params = params['get_server_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getServerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_product_list(self, get_server_product_list_request, **kwargs):  # noqa: E501
        """get_server_product_list  # noqa: E501

        서버상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_product_list(get_server_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerProductListRequest get_server_product_list_request: getServerProductListRequest (required)
        :return: GetServerProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_server_product_list_with_http_info(get_server_product_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_product_list_with_http_info(get_server_product_list_request, **kwargs)  # noqa: E501
            return data

    def get_server_product_list_with_http_info(self, get_server_product_list_request, **kwargs):  # noqa: E501
        """get_server_product_list  # noqa: E501

        서버상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_product_list_with_http_info(get_server_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetServerProductListRequest get_server_product_list_request: getServerProductListRequest (required)
        :return: GetServerProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_server_product_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_product_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_server_product_list_request' is set
        if ('get_server_product_list_request' not in params or
                params['get_server_product_list_request'] is None):
            raise ValueError("Missing the required parameter `get_server_product_list_request` when calling `get_server_product_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_server_product_list_request' in params:
            body_params = params['get_server_product_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getServerProductList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetServerProductListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zone_list(self, get_zone_list_request, **kwargs):  # noqa: E501
        """get_zone_list  # noqa: E501

        ZONE리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_list(get_zone_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetZoneListRequest get_zone_list_request: getZoneListRequest (required)
        :return: GetZoneListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_zone_list_with_http_info(get_zone_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zone_list_with_http_info(get_zone_list_request, **kwargs)  # noqa: E501
            return data

    def get_zone_list_with_http_info(self, get_zone_list_request, **kwargs):  # noqa: E501
        """get_zone_list  # noqa: E501

        ZONE리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_zone_list_with_http_info(get_zone_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetZoneListRequest get_zone_list_request: getZoneListRequest (required)
        :return: GetZoneListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_zone_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zone_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_zone_list_request' is set
        if ('get_zone_list_request' not in params or
                params['get_zone_list_request'] is None):
            raise ValueError("Missing the required parameter `get_zone_list_request` when calling `get_zone_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_zone_list_request' in params:
            body_params = params['get_zone_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getZoneList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetZoneListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_login_key(self, import_login_key_request, **kwargs):  # noqa: E501
        """import_login_key  # noqa: E501

        사용자가생성한로그인키import  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_login_key(import_login_key_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ImportLoginKeyRequest import_login_key_request: importLoginKeyRequest (required)
        :return: ImportLoginKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.import_login_key_with_http_info(import_login_key_request, **kwargs)  # noqa: E501
        else:
            (data) = self.import_login_key_with_http_info(import_login_key_request, **kwargs)  # noqa: E501
            return data

    def import_login_key_with_http_info(self, import_login_key_request, **kwargs):  # noqa: E501
        """import_login_key  # noqa: E501

        사용자가생성한로그인키import  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_login_key_with_http_info(import_login_key_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ImportLoginKeyRequest import_login_key_request: importLoginKeyRequest (required)
        :return: ImportLoginKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_login_key_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_login_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_login_key_request' is set
        if ('import_login_key_request' not in params or
                params['import_login_key_request'] is None):
            raise ValueError("Missing the required parameter `import_login_key_request` when calling `import_login_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'import_login_key_request' in params:
            body_params = params['import_login_key_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/importLoginKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportLoginKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reboot_server_instances(self, reboot_server_instances_request, **kwargs):  # noqa: E501
        """reboot_server_instances  # noqa: E501

        서버인스턴스재시작  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reboot_server_instances(reboot_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RebootServerInstancesRequest reboot_server_instances_request: rebootServerInstancesRequest (required)
        :return: RebootServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reboot_server_instances_with_http_info(reboot_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.reboot_server_instances_with_http_info(reboot_server_instances_request, **kwargs)  # noqa: E501
            return data

    def reboot_server_instances_with_http_info(self, reboot_server_instances_request, **kwargs):  # noqa: E501
        """reboot_server_instances  # noqa: E501

        서버인스턴스재시작  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reboot_server_instances_with_http_info(reboot_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RebootServerInstancesRequest reboot_server_instances_request: rebootServerInstancesRequest (required)
        :return: RebootServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reboot_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reboot_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reboot_server_instances_request' is set
        if ('reboot_server_instances_request' not in params or
                params['reboot_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `reboot_server_instances_request` when calling `reboot_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reboot_server_instances_request' in params:
            body_params = params['reboot_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/rebootServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RebootServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_access_control_group_inbound_rule(self, remove_access_control_group_inbound_rule_request, **kwargs):  # noqa: E501
        """remove_access_control_group_inbound_rule  # noqa: E501

        ACGInboundRule삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_access_control_group_inbound_rule(remove_access_control_group_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveAccessControlGroupInboundRuleRequest remove_access_control_group_inbound_rule_request: removeAccessControlGroupInboundRuleRequest (required)
        :return: RemoveAccessControlGroupInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_access_control_group_inbound_rule_with_http_info(remove_access_control_group_inbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_access_control_group_inbound_rule_with_http_info(remove_access_control_group_inbound_rule_request, **kwargs)  # noqa: E501
            return data

    def remove_access_control_group_inbound_rule_with_http_info(self, remove_access_control_group_inbound_rule_request, **kwargs):  # noqa: E501
        """remove_access_control_group_inbound_rule  # noqa: E501

        ACGInboundRule삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_access_control_group_inbound_rule_with_http_info(remove_access_control_group_inbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveAccessControlGroupInboundRuleRequest remove_access_control_group_inbound_rule_request: removeAccessControlGroupInboundRuleRequest (required)
        :return: RemoveAccessControlGroupInboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_access_control_group_inbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_access_control_group_inbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_access_control_group_inbound_rule_request' is set
        if ('remove_access_control_group_inbound_rule_request' not in params or
                params['remove_access_control_group_inbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `remove_access_control_group_inbound_rule_request` when calling `remove_access_control_group_inbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_access_control_group_inbound_rule_request' in params:
            body_params = params['remove_access_control_group_inbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeAccessControlGroupInboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveAccessControlGroupInboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_access_control_group_outbound_rule(self, remove_access_control_group_outbound_rule_request, **kwargs):  # noqa: E501
        """remove_access_control_group_outbound_rule  # noqa: E501

        ACGOutboundRule삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_access_control_group_outbound_rule(remove_access_control_group_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveAccessControlGroupOutboundRuleRequest remove_access_control_group_outbound_rule_request: removeAccessControlGroupOutboundRuleRequest (required)
        :return: RemoveAccessControlGroupOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_access_control_group_outbound_rule_with_http_info(remove_access_control_group_outbound_rule_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_access_control_group_outbound_rule_with_http_info(remove_access_control_group_outbound_rule_request, **kwargs)  # noqa: E501
            return data

    def remove_access_control_group_outbound_rule_with_http_info(self, remove_access_control_group_outbound_rule_request, **kwargs):  # noqa: E501
        """remove_access_control_group_outbound_rule  # noqa: E501

        ACGOutboundRule삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_access_control_group_outbound_rule_with_http_info(remove_access_control_group_outbound_rule_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveAccessControlGroupOutboundRuleRequest remove_access_control_group_outbound_rule_request: removeAccessControlGroupOutboundRuleRequest (required)
        :return: RemoveAccessControlGroupOutboundRuleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_access_control_group_outbound_rule_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_access_control_group_outbound_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_access_control_group_outbound_rule_request' is set
        if ('remove_access_control_group_outbound_rule_request' not in params or
                params['remove_access_control_group_outbound_rule_request'] is None):
            raise ValueError("Missing the required parameter `remove_access_control_group_outbound_rule_request` when calling `remove_access_control_group_outbound_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_access_control_group_outbound_rule_request' in params:
            body_params = params['remove_access_control_group_outbound_rule_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeAccessControlGroupOutboundRule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveAccessControlGroupOutboundRuleResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_network_interface_access_control_group(self, remove_network_interface_access_control_group_request, **kwargs):  # noqa: E501
        """remove_network_interface_access_control_group  # noqa: E501

        네트워크인터페이스의ACG제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_interface_access_control_group(remove_network_interface_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkInterfaceAccessControlGroupRequest remove_network_interface_access_control_group_request: removeNetworkInterfaceAccessControlGroupRequest (required)
        :return: RemoveNetworkInterfaceAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_network_interface_access_control_group_with_http_info(remove_network_interface_access_control_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_network_interface_access_control_group_with_http_info(remove_network_interface_access_control_group_request, **kwargs)  # noqa: E501
            return data

    def remove_network_interface_access_control_group_with_http_info(self, remove_network_interface_access_control_group_request, **kwargs):  # noqa: E501
        """remove_network_interface_access_control_group  # noqa: E501

        네트워크인터페이스의ACG제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_network_interface_access_control_group_with_http_info(remove_network_interface_access_control_group_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNetworkInterfaceAccessControlGroupRequest remove_network_interface_access_control_group_request: removeNetworkInterfaceAccessControlGroupRequest (required)
        :return: RemoveNetworkInterfaceAccessControlGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_network_interface_access_control_group_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_network_interface_access_control_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_network_interface_access_control_group_request' is set
        if ('remove_network_interface_access_control_group_request' not in params or
                params['remove_network_interface_access_control_group_request'] is None):
            raise ValueError("Missing the required parameter `remove_network_interface_access_control_group_request` when calling `remove_network_interface_access_control_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_network_interface_access_control_group_request' in params:
            body_params = params['remove_network_interface_access_control_group_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeNetworkInterfaceAccessControlGroup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveNetworkInterfaceAccessControlGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_placement_group_server_instance(self, remove_placement_group_server_instance_request, **kwargs):  # noqa: E501
        """remove_placement_group_server_instance  # noqa: E501

        물리배치그룹에서서버인스턴스제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_placement_group_server_instance(remove_placement_group_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemovePlacementGroupServerInstanceRequest remove_placement_group_server_instance_request: removePlacementGroupServerInstanceRequest (required)
        :return: RemovePlacementGroupServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_placement_group_server_instance_with_http_info(remove_placement_group_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_placement_group_server_instance_with_http_info(remove_placement_group_server_instance_request, **kwargs)  # noqa: E501
            return data

    def remove_placement_group_server_instance_with_http_info(self, remove_placement_group_server_instance_request, **kwargs):  # noqa: E501
        """remove_placement_group_server_instance  # noqa: E501

        물리배치그룹에서서버인스턴스제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_placement_group_server_instance_with_http_info(remove_placement_group_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemovePlacementGroupServerInstanceRequest remove_placement_group_server_instance_request: removePlacementGroupServerInstanceRequest (required)
        :return: RemovePlacementGroupServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_placement_group_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_placement_group_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_placement_group_server_instance_request' is set
        if ('remove_placement_group_server_instance_request' not in params or
                params['remove_placement_group_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `remove_placement_group_server_instance_request` when calling `remove_placement_group_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_placement_group_server_instance_request' in params:
            body_params = params['remove_placement_group_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removePlacementGroupServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemovePlacementGroupServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_server_instances(self, start_server_instances_request, **kwargs):  # noqa: E501
        """start_server_instances  # noqa: E501

        서버인스턴스시작  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_server_instances(start_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param StartServerInstancesRequest start_server_instances_request: startServerInstancesRequest (required)
        :return: StartServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_server_instances_with_http_info(start_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.start_server_instances_with_http_info(start_server_instances_request, **kwargs)  # noqa: E501
            return data

    def start_server_instances_with_http_info(self, start_server_instances_request, **kwargs):  # noqa: E501
        """start_server_instances  # noqa: E501

        서버인스턴스시작  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_server_instances_with_http_info(start_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param StartServerInstancesRequest start_server_instances_request: startServerInstancesRequest (required)
        :return: StartServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_server_instances_request' is set
        if ('start_server_instances_request' not in params or
                params['start_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `start_server_instances_request` when calling `start_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'start_server_instances_request' in params:
            body_params = params['start_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/startServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_server_instances(self, stop_server_instances_request, **kwargs):  # noqa: E501
        """stop_server_instances  # noqa: E501

        서버인스턴스정지  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_server_instances(stop_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param StopServerInstancesRequest stop_server_instances_request: stopServerInstancesRequest (required)
        :return: StopServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stop_server_instances_with_http_info(stop_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_server_instances_with_http_info(stop_server_instances_request, **kwargs)  # noqa: E501
            return data

    def stop_server_instances_with_http_info(self, stop_server_instances_request, **kwargs):  # noqa: E501
        """stop_server_instances  # noqa: E501

        서버인스턴스정지  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stop_server_instances_with_http_info(stop_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param StopServerInstancesRequest stop_server_instances_request: stopServerInstancesRequest (required)
        :return: StopServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stop_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stop_server_instances_request' is set
        if ('stop_server_instances_request' not in params or
                params['stop_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `stop_server_instances_request` when calling `stop_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stop_server_instances_request' in params:
            body_params = params['stop_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/stopServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StopServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terminate_server_instances(self, terminate_server_instances_request, **kwargs):  # noqa: E501
        """terminate_server_instances  # noqa: E501

        서버인스턴스반납  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.terminate_server_instances(terminate_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TerminateServerInstancesRequest terminate_server_instances_request: terminateServerInstancesRequest (required)
        :return: TerminateServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.terminate_server_instances_with_http_info(terminate_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.terminate_server_instances_with_http_info(terminate_server_instances_request, **kwargs)  # noqa: E501
            return data

    def terminate_server_instances_with_http_info(self, terminate_server_instances_request, **kwargs):  # noqa: E501
        """terminate_server_instances  # noqa: E501

        서버인스턴스반납  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.terminate_server_instances_with_http_info(terminate_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TerminateServerInstancesRequest terminate_server_instances_request: terminateServerInstancesRequest (required)
        :return: TerminateServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['terminate_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'terminate_server_instances_request' is set
        if ('terminate_server_instances_request' not in params or
                params['terminate_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `terminate_server_instances_request` when calling `terminate_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terminate_server_instances_request' in params:
            body_params = params['terminate_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/terminateServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TerminateServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
