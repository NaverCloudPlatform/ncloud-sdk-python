# coding: utf-8

"""
    server

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_server.model.common_code import CommonCode  # noqa: F401,E501


class InstanceTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_no': 'str',
        'instance_type': 'CommonCode',
        'tag_key': 'str',
        'tag_value': 'str'
    }

    attribute_map = {
        'instance_no': 'instanceNo',
        'instance_type': 'instanceType',
        'tag_key': 'tagKey',
        'tag_value': 'tagValue'
    }

    def __init__(self, instance_no=None, instance_type=None, tag_key=None, tag_value=None):  # noqa: E501
        """InstanceTag - a model defined in Swagger"""  # noqa: E501

        self._instance_no = None
        self._instance_type = None
        self._tag_key = None
        self._tag_value = None
        self.discriminator = None

        if instance_no is not None:
            self.instance_no = instance_no
        if instance_type is not None:
            self.instance_type = instance_type
        if tag_key is not None:
            self.tag_key = tag_key
        if tag_value is not None:
            self.tag_value = tag_value

    @property
    def instance_no(self):
        """Gets the instance_no of this InstanceTag.  # noqa: E501

        인스턴스번호  # noqa: E501

        :return: The instance_no of this InstanceTag.  # noqa: E501
        :rtype: str
        """
        return self._instance_no

    @instance_no.setter
    def instance_no(self, instance_no):
        """Sets the instance_no of this InstanceTag.

        인스턴스번호  # noqa: E501

        :param instance_no: The instance_no of this InstanceTag.  # noqa: E501
        :type: str
        """

        self._instance_no = instance_no

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceTag.  # noqa: E501

        인스턴스유형  # noqa: E501

        :return: The instance_type of this InstanceTag.  # noqa: E501
        :rtype: CommonCode
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceTag.

        인스턴스유형  # noqa: E501

        :param instance_type: The instance_type of this InstanceTag.  # noqa: E501
        :type: CommonCode
        """

        self._instance_type = instance_type

    @property
    def tag_key(self):
        """Gets the tag_key of this InstanceTag.  # noqa: E501

        태그키  # noqa: E501

        :return: The tag_key of this InstanceTag.  # noqa: E501
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this InstanceTag.

        태그키  # noqa: E501

        :param tag_key: The tag_key of this InstanceTag.  # noqa: E501
        :type: str
        """

        self._tag_key = tag_key

    @property
    def tag_value(self):
        """Gets the tag_value of this InstanceTag.  # noqa: E501

        태그값  # noqa: E501

        :return: The tag_value of this InstanceTag.  # noqa: E501
        :rtype: str
        """
        return self._tag_value

    @tag_value.setter
    def tag_value(self, tag_value):
        """Sets the tag_value of this InstanceTag.

        태그값  # noqa: E501

        :param tag_value: The tag_value of this InstanceTag.  # noqa: E501
        :type: str
        """

        self._tag_value = tag_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
