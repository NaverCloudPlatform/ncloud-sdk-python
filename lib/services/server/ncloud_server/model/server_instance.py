# coding: utf-8

"""
    server

    OpenAPI spec version: 2018-06-22T02:34:44Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_server.model.access_control_group import AccessControlGroup  # noqa: F401,E501
from ncloud_server.model.common_code import CommonCode  # noqa: F401,E501
from ncloud_server.model.region import Region  # noqa: F401,E501
from ncloud_server.model.zone import Zone  # noqa: F401,E501


class ServerInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_instance_no': 'str',
        'server_name': 'str',
        'server_description': 'str',
        'cpu_count': 'int',
        'memory_size': 'int',
        'base_block_storage_size': 'int',
        'platform_type': 'CommonCode',
        'login_key_name': 'str',
        'is_fee_charging_monitoring': 'bool',
        'public_ip': 'str',
        'private_ip': 'str',
        'server_image_name': 'str',
        'server_instance_status': 'CommonCode',
        'server_instance_operation': 'CommonCode',
        'server_instance_status_name': 'str',
        'create_date': 'str',
        'uptime': 'str',
        'server_image_product_code': 'str',
        'server_product_code': 'str',
        'is_protect_server_termination': 'bool',
        'port_forwarding_public_ip': 'str',
        'port_forwarding_external_port': 'int',
        'port_forwarding_internal_port': 'int',
        'zone': 'Zone',
        'region': 'Region',
        'base_block_storage_disk_type': 'CommonCode',
        'base_block_stroage_disk_detail_type': 'CommonCode',
        'internet_line_type': 'CommonCode',
        'server_instance_type': 'CommonCode',
        'user_data': 'str',
        'access_control_group_list': 'list[AccessControlGroup]'
    }

    attribute_map = {
        'server_instance_no': 'serverInstanceNo',
        'server_name': 'serverName',
        'server_description': 'serverDescription',
        'cpu_count': 'cpuCount',
        'memory_size': 'memorySize',
        'base_block_storage_size': 'baseBlockStorageSize',
        'platform_type': 'platformType',
        'login_key_name': 'loginKeyName',
        'is_fee_charging_monitoring': 'isFeeChargingMonitoring',
        'public_ip': 'publicIp',
        'private_ip': 'privateIp',
        'server_image_name': 'serverImageName',
        'server_instance_status': 'serverInstanceStatus',
        'server_instance_operation': 'serverInstanceOperation',
        'server_instance_status_name': 'serverInstanceStatusName',
        'create_date': 'createDate',
        'uptime': 'uptime',
        'server_image_product_code': 'serverImageProductCode',
        'server_product_code': 'serverProductCode',
        'is_protect_server_termination': 'isProtectServerTermination',
        'port_forwarding_public_ip': 'portForwardingPublicIp',
        'port_forwarding_external_port': 'portForwardingExternalPort',
        'port_forwarding_internal_port': 'portForwardingInternalPort',
        'zone': 'zone',
        'region': 'region',
        'base_block_storage_disk_type': 'baseBlockStorageDiskType',
        'base_block_stroage_disk_detail_type': 'baseBlockStroageDiskDetailType',
        'internet_line_type': 'internetLineType',
        'server_instance_type': 'serverInstanceType',
        'user_data': 'userData',
        'access_control_group_list': 'accessControlGroupList'
    }

    def __init__(self, server_instance_no=None, server_name=None, server_description=None, cpu_count=None, memory_size=None, base_block_storage_size=None, platform_type=None, login_key_name=None, is_fee_charging_monitoring=None, public_ip=None, private_ip=None, server_image_name=None, server_instance_status=None, server_instance_operation=None, server_instance_status_name=None, create_date=None, uptime=None, server_image_product_code=None, server_product_code=None, is_protect_server_termination=None, port_forwarding_public_ip=None, port_forwarding_external_port=None, port_forwarding_internal_port=None, zone=None, region=None, base_block_storage_disk_type=None, base_block_stroage_disk_detail_type=None, internet_line_type=None, server_instance_type=None, user_data=None, access_control_group_list=None):  # noqa: E501
        """ServerInstance - a model defined in Swagger"""  # noqa: E501

        self._server_instance_no = None
        self._server_name = None
        self._server_description = None
        self._cpu_count = None
        self._memory_size = None
        self._base_block_storage_size = None
        self._platform_type = None
        self._login_key_name = None
        self._is_fee_charging_monitoring = None
        self._public_ip = None
        self._private_ip = None
        self._server_image_name = None
        self._server_instance_status = None
        self._server_instance_operation = None
        self._server_instance_status_name = None
        self._create_date = None
        self._uptime = None
        self._server_image_product_code = None
        self._server_product_code = None
        self._is_protect_server_termination = None
        self._port_forwarding_public_ip = None
        self._port_forwarding_external_port = None
        self._port_forwarding_internal_port = None
        self._zone = None
        self._region = None
        self._base_block_storage_disk_type = None
        self._base_block_stroage_disk_detail_type = None
        self._internet_line_type = None
        self._server_instance_type = None
        self._user_data = None
        self._access_control_group_list = None
        self.discriminator = None

        if server_instance_no is not None:
            self.server_instance_no = server_instance_no
        if server_name is not None:
            self.server_name = server_name
        if server_description is not None:
            self.server_description = server_description
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if memory_size is not None:
            self.memory_size = memory_size
        if base_block_storage_size is not None:
            self.base_block_storage_size = base_block_storage_size
        if platform_type is not None:
            self.platform_type = platform_type
        if login_key_name is not None:
            self.login_key_name = login_key_name
        if is_fee_charging_monitoring is not None:
            self.is_fee_charging_monitoring = is_fee_charging_monitoring
        if public_ip is not None:
            self.public_ip = public_ip
        if private_ip is not None:
            self.private_ip = private_ip
        if server_image_name is not None:
            self.server_image_name = server_image_name
        if server_instance_status is not None:
            self.server_instance_status = server_instance_status
        if server_instance_operation is not None:
            self.server_instance_operation = server_instance_operation
        if server_instance_status_name is not None:
            self.server_instance_status_name = server_instance_status_name
        if create_date is not None:
            self.create_date = create_date
        if uptime is not None:
            self.uptime = uptime
        if server_image_product_code is not None:
            self.server_image_product_code = server_image_product_code
        if server_product_code is not None:
            self.server_product_code = server_product_code
        if is_protect_server_termination is not None:
            self.is_protect_server_termination = is_protect_server_termination
        if port_forwarding_public_ip is not None:
            self.port_forwarding_public_ip = port_forwarding_public_ip
        if port_forwarding_external_port is not None:
            self.port_forwarding_external_port = port_forwarding_external_port
        if port_forwarding_internal_port is not None:
            self.port_forwarding_internal_port = port_forwarding_internal_port
        if zone is not None:
            self.zone = zone
        if region is not None:
            self.region = region
        if base_block_storage_disk_type is not None:
            self.base_block_storage_disk_type = base_block_storage_disk_type
        if base_block_stroage_disk_detail_type is not None:
            self.base_block_stroage_disk_detail_type = base_block_stroage_disk_detail_type
        if internet_line_type is not None:
            self.internet_line_type = internet_line_type
        if server_instance_type is not None:
            self.server_instance_type = server_instance_type
        if user_data is not None:
            self.user_data = user_data
        if access_control_group_list is not None:
            self.access_control_group_list = access_control_group_list

    @property
    def server_instance_no(self):
        """Gets the server_instance_no of this ServerInstance.  # noqa: E501

        서버인스턴스번호  # noqa: E501

        :return: The server_instance_no of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_instance_no

    @server_instance_no.setter
    def server_instance_no(self, server_instance_no):
        """Sets the server_instance_no of this ServerInstance.

        서버인스턴스번호  # noqa: E501

        :param server_instance_no: The server_instance_no of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_instance_no = server_instance_no

    @property
    def server_name(self):
        """Gets the server_name of this ServerInstance.  # noqa: E501

        서버명  # noqa: E501

        :return: The server_name of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this ServerInstance.

        서버명  # noqa: E501

        :param server_name: The server_name of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def server_description(self):
        """Gets the server_description of this ServerInstance.  # noqa: E501

        서버설명  # noqa: E501

        :return: The server_description of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_description

    @server_description.setter
    def server_description(self, server_description):
        """Sets the server_description of this ServerInstance.

        서버설명  # noqa: E501

        :param server_description: The server_description of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_description = server_description

    @property
    def cpu_count(self):
        """Gets the cpu_count of this ServerInstance.  # noqa: E501

        CPU수  # noqa: E501

        :return: The cpu_count of this ServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this ServerInstance.

        CPU수  # noqa: E501

        :param cpu_count: The cpu_count of this ServerInstance.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def memory_size(self):
        """Gets the memory_size of this ServerInstance.  # noqa: E501

        메모리사이즈  # noqa: E501

        :return: The memory_size of this ServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._memory_size

    @memory_size.setter
    def memory_size(self, memory_size):
        """Sets the memory_size of this ServerInstance.

        메모리사이즈  # noqa: E501

        :param memory_size: The memory_size of this ServerInstance.  # noqa: E501
        :type: int
        """

        self._memory_size = memory_size

    @property
    def base_block_storage_size(self):
        """Gets the base_block_storage_size of this ServerInstance.  # noqa: E501

        기본블럭스토리지사이즈  # noqa: E501

        :return: The base_block_storage_size of this ServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._base_block_storage_size

    @base_block_storage_size.setter
    def base_block_storage_size(self, base_block_storage_size):
        """Sets the base_block_storage_size of this ServerInstance.

        기본블럭스토리지사이즈  # noqa: E501

        :param base_block_storage_size: The base_block_storage_size of this ServerInstance.  # noqa: E501
        :type: int
        """

        self._base_block_storage_size = base_block_storage_size

    @property
    def platform_type(self):
        """Gets the platform_type of this ServerInstance.  # noqa: E501

        플랫폼구분  # noqa: E501

        :return: The platform_type of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this ServerInstance.

        플랫폼구분  # noqa: E501

        :param platform_type: The platform_type of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._platform_type = platform_type

    @property
    def login_key_name(self):
        """Gets the login_key_name of this ServerInstance.  # noqa: E501

        로그인키명  # noqa: E501

        :return: The login_key_name of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._login_key_name

    @login_key_name.setter
    def login_key_name(self, login_key_name):
        """Sets the login_key_name of this ServerInstance.

        로그인키명  # noqa: E501

        :param login_key_name: The login_key_name of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._login_key_name = login_key_name

    @property
    def is_fee_charging_monitoring(self):
        """Gets the is_fee_charging_monitoring of this ServerInstance.  # noqa: E501

        유료모니터링여부  # noqa: E501

        :return: The is_fee_charging_monitoring of this ServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_fee_charging_monitoring

    @is_fee_charging_monitoring.setter
    def is_fee_charging_monitoring(self, is_fee_charging_monitoring):
        """Sets the is_fee_charging_monitoring of this ServerInstance.

        유료모니터링여부  # noqa: E501

        :param is_fee_charging_monitoring: The is_fee_charging_monitoring of this ServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_fee_charging_monitoring = is_fee_charging_monitoring

    @property
    def public_ip(self):
        """Gets the public_ip of this ServerInstance.  # noqa: E501

        공인IP  # noqa: E501

        :return: The public_ip of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this ServerInstance.

        공인IP  # noqa: E501

        :param public_ip: The public_ip of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def private_ip(self):
        """Gets the private_ip of this ServerInstance.  # noqa: E501

        사설IP  # noqa: E501

        :return: The private_ip of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this ServerInstance.

        사설IP  # noqa: E501

        :param private_ip: The private_ip of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def server_image_name(self):
        """Gets the server_image_name of this ServerInstance.  # noqa: E501

        서버이미지명  # noqa: E501

        :return: The server_image_name of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_image_name

    @server_image_name.setter
    def server_image_name(self, server_image_name):
        """Sets the server_image_name of this ServerInstance.

        서버이미지명  # noqa: E501

        :param server_image_name: The server_image_name of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_image_name = server_image_name

    @property
    def server_instance_status(self):
        """Gets the server_instance_status of this ServerInstance.  # noqa: E501

        서버인스턴스상태  # noqa: E501

        :return: The server_instance_status of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._server_instance_status

    @server_instance_status.setter
    def server_instance_status(self, server_instance_status):
        """Sets the server_instance_status of this ServerInstance.

        서버인스턴스상태  # noqa: E501

        :param server_instance_status: The server_instance_status of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._server_instance_status = server_instance_status

    @property
    def server_instance_operation(self):
        """Gets the server_instance_operation of this ServerInstance.  # noqa: E501

        서버인스턴스OP  # noqa: E501

        :return: The server_instance_operation of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._server_instance_operation

    @server_instance_operation.setter
    def server_instance_operation(self, server_instance_operation):
        """Sets the server_instance_operation of this ServerInstance.

        서버인스턴스OP  # noqa: E501

        :param server_instance_operation: The server_instance_operation of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._server_instance_operation = server_instance_operation

    @property
    def server_instance_status_name(self):
        """Gets the server_instance_status_name of this ServerInstance.  # noqa: E501

        서버인스턴스상태명  # noqa: E501

        :return: The server_instance_status_name of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_instance_status_name

    @server_instance_status_name.setter
    def server_instance_status_name(self, server_instance_status_name):
        """Sets the server_instance_status_name of this ServerInstance.

        서버인스턴스상태명  # noqa: E501

        :param server_instance_status_name: The server_instance_status_name of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_instance_status_name = server_instance_status_name

    @property
    def create_date(self):
        """Gets the create_date of this ServerInstance.  # noqa: E501

        생성일자  # noqa: E501

        :return: The create_date of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this ServerInstance.

        생성일자  # noqa: E501

        :param create_date: The create_date of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def uptime(self):
        """Gets the uptime of this ServerInstance.  # noqa: E501

        UPTIME  # noqa: E501

        :return: The uptime of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ServerInstance.

        UPTIME  # noqa: E501

        :param uptime: The uptime of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._uptime = uptime

    @property
    def server_image_product_code(self):
        """Gets the server_image_product_code of this ServerInstance.  # noqa: E501

        서버이미지상품코드  # noqa: E501

        :return: The server_image_product_code of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_image_product_code

    @server_image_product_code.setter
    def server_image_product_code(self, server_image_product_code):
        """Sets the server_image_product_code of this ServerInstance.

        서버이미지상품코드  # noqa: E501

        :param server_image_product_code: The server_image_product_code of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_image_product_code = server_image_product_code

    @property
    def server_product_code(self):
        """Gets the server_product_code of this ServerInstance.  # noqa: E501

        서버상품코드  # noqa: E501

        :return: The server_product_code of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._server_product_code

    @server_product_code.setter
    def server_product_code(self, server_product_code):
        """Sets the server_product_code of this ServerInstance.

        서버상품코드  # noqa: E501

        :param server_product_code: The server_product_code of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._server_product_code = server_product_code

    @property
    def is_protect_server_termination(self):
        """Gets the is_protect_server_termination of this ServerInstance.  # noqa: E501

        반납보호여부  # noqa: E501

        :return: The is_protect_server_termination of this ServerInstance.  # noqa: E501
        :rtype: bool
        """
        return self._is_protect_server_termination

    @is_protect_server_termination.setter
    def is_protect_server_termination(self, is_protect_server_termination):
        """Sets the is_protect_server_termination of this ServerInstance.

        반납보호여부  # noqa: E501

        :param is_protect_server_termination: The is_protect_server_termination of this ServerInstance.  # noqa: E501
        :type: bool
        """

        self._is_protect_server_termination = is_protect_server_termination

    @property
    def port_forwarding_public_ip(self):
        """Gets the port_forwarding_public_ip of this ServerInstance.  # noqa: E501

        portForwarding 공인 Ip  # noqa: E501

        :return: The port_forwarding_public_ip of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._port_forwarding_public_ip

    @port_forwarding_public_ip.setter
    def port_forwarding_public_ip(self, port_forwarding_public_ip):
        """Sets the port_forwarding_public_ip of this ServerInstance.

        portForwarding 공인 Ip  # noqa: E501

        :param port_forwarding_public_ip: The port_forwarding_public_ip of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._port_forwarding_public_ip = port_forwarding_public_ip

    @property
    def port_forwarding_external_port(self):
        """Gets the port_forwarding_external_port of this ServerInstance.  # noqa: E501

        portForwarding 외부 포트  # noqa: E501

        :return: The port_forwarding_external_port of this ServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._port_forwarding_external_port

    @port_forwarding_external_port.setter
    def port_forwarding_external_port(self, port_forwarding_external_port):
        """Sets the port_forwarding_external_port of this ServerInstance.

        portForwarding 외부 포트  # noqa: E501

        :param port_forwarding_external_port: The port_forwarding_external_port of this ServerInstance.  # noqa: E501
        :type: int
        """

        self._port_forwarding_external_port = port_forwarding_external_port

    @property
    def port_forwarding_internal_port(self):
        """Gets the port_forwarding_internal_port of this ServerInstance.  # noqa: E501

        portForwarding 내부 포트  # noqa: E501

        :return: The port_forwarding_internal_port of this ServerInstance.  # noqa: E501
        :rtype: int
        """
        return self._port_forwarding_internal_port

    @port_forwarding_internal_port.setter
    def port_forwarding_internal_port(self, port_forwarding_internal_port):
        """Sets the port_forwarding_internal_port of this ServerInstance.

        portForwarding 내부 포트  # noqa: E501

        :param port_forwarding_internal_port: The port_forwarding_internal_port of this ServerInstance.  # noqa: E501
        :type: int
        """

        self._port_forwarding_internal_port = port_forwarding_internal_port

    @property
    def zone(self):
        """Gets the zone of this ServerInstance.  # noqa: E501

        Zone  # noqa: E501

        :return: The zone of this ServerInstance.  # noqa: E501
        :rtype: Zone
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this ServerInstance.

        Zone  # noqa: E501

        :param zone: The zone of this ServerInstance.  # noqa: E501
        :type: Zone
        """

        self._zone = zone

    @property
    def region(self):
        """Gets the region of this ServerInstance.  # noqa: E501

        리전  # noqa: E501

        :return: The region of this ServerInstance.  # noqa: E501
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ServerInstance.

        리전  # noqa: E501

        :param region: The region of this ServerInstance.  # noqa: E501
        :type: Region
        """

        self._region = region

    @property
    def base_block_storage_disk_type(self):
        """Gets the base_block_storage_disk_type of this ServerInstance.  # noqa: E501

        기본블록스토리지디스크유형  # noqa: E501

        :return: The base_block_storage_disk_type of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._base_block_storage_disk_type

    @base_block_storage_disk_type.setter
    def base_block_storage_disk_type(self, base_block_storage_disk_type):
        """Sets the base_block_storage_disk_type of this ServerInstance.

        기본블록스토리지디스크유형  # noqa: E501

        :param base_block_storage_disk_type: The base_block_storage_disk_type of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._base_block_storage_disk_type = base_block_storage_disk_type

    @property
    def base_block_stroage_disk_detail_type(self):
        """Gets the base_block_stroage_disk_detail_type of this ServerInstance.  # noqa: E501

        기본블록스토리지디스크상세유형  # noqa: E501

        :return: The base_block_stroage_disk_detail_type of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._base_block_stroage_disk_detail_type

    @base_block_stroage_disk_detail_type.setter
    def base_block_stroage_disk_detail_type(self, base_block_stroage_disk_detail_type):
        """Sets the base_block_stroage_disk_detail_type of this ServerInstance.

        기본블록스토리지디스크상세유형  # noqa: E501

        :param base_block_stroage_disk_detail_type: The base_block_stroage_disk_detail_type of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._base_block_stroage_disk_detail_type = base_block_stroage_disk_detail_type

    @property
    def internet_line_type(self):
        """Gets the internet_line_type of this ServerInstance.  # noqa: E501

        인터넷라인구분  # noqa: E501

        :return: The internet_line_type of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._internet_line_type

    @internet_line_type.setter
    def internet_line_type(self, internet_line_type):
        """Sets the internet_line_type of this ServerInstance.

        인터넷라인구분  # noqa: E501

        :param internet_line_type: The internet_line_type of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._internet_line_type = internet_line_type

    @property
    def server_instance_type(self):
        """Gets the server_instance_type of this ServerInstance.  # noqa: E501

        서버인스턴스구분  # noqa: E501

        :return: The server_instance_type of this ServerInstance.  # noqa: E501
        :rtype: CommonCode
        """
        return self._server_instance_type

    @server_instance_type.setter
    def server_instance_type(self, server_instance_type):
        """Sets the server_instance_type of this ServerInstance.

        서버인스턴스구분  # noqa: E501

        :param server_instance_type: The server_instance_type of this ServerInstance.  # noqa: E501
        :type: CommonCode
        """

        self._server_instance_type = server_instance_type

    @property
    def user_data(self):
        """Gets the user_data of this ServerInstance.  # noqa: E501

        사용자데이타  # noqa: E501

        :return: The user_data of this ServerInstance.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ServerInstance.

        사용자데이타  # noqa: E501

        :param user_data: The user_data of this ServerInstance.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    @property
    def access_control_group_list(self):
        """Gets the access_control_group_list of this ServerInstance.  # noqa: E501

        ACG리스트  # noqa: E501

        :return: The access_control_group_list of this ServerInstance.  # noqa: E501
        :rtype: list[AccessControlGroup]
        """
        return self._access_control_group_list

    @access_control_group_list.setter
    def access_control_group_list(self, access_control_group_list):
        """Sets the access_control_group_list of this ServerInstance.

        ACG리스트  # noqa: E501

        :param access_control_group_list: The access_control_group_list of this ServerInstance.  # noqa: E501
        :type: list[AccessControlGroup]
        """

        self._access_control_group_list = access_control_group_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
