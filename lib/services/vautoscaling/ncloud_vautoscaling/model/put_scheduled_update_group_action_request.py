# coding: utf-8

"""
    vautoscaling

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutScheduledUpdateGroupActionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'auto_scaling_group_no': 'str',
        'scheduled_action_no': 'str',
        'scheduled_action_name': 'str',
        'min_size': 'int',
        'max_size': 'int',
        'desired_capacity': 'int',
        'start_time': 'str',
        'end_time': 'str',
        'recurrence': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'auto_scaling_group_no': 'autoScalingGroupNo',
        'scheduled_action_no': 'scheduledActionNo',
        'scheduled_action_name': 'scheduledActionName',
        'min_size': 'minSize',
        'max_size': 'maxSize',
        'desired_capacity': 'desiredCapacity',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'recurrence': 'recurrence',
        'time_zone': 'timeZone'
    }

    def __init__(self, region_code=None, auto_scaling_group_no=None, scheduled_action_no=None, scheduled_action_name=None, min_size=None, max_size=None, desired_capacity=None, start_time=None, end_time=None, recurrence=None, time_zone=None):  # noqa: E501
        """PutScheduledUpdateGroupActionRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._auto_scaling_group_no = None
        self._scheduled_action_no = None
        self._scheduled_action_name = None
        self._min_size = None
        self._max_size = None
        self._desired_capacity = None
        self._start_time = None
        self._end_time = None
        self._recurrence = None
        self._time_zone = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        self.auto_scaling_group_no = auto_scaling_group_no
        if scheduled_action_no is not None:
            self.scheduled_action_no = scheduled_action_no
        if scheduled_action_name is not None:
            self.scheduled_action_name = scheduled_action_name
        self.min_size = min_size
        self.max_size = max_size
        if desired_capacity is not None:
            self.desired_capacity = desired_capacity
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if recurrence is not None:
            self.recurrence = recurrence
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def region_code(self):
        """Gets the region_code of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this PutScheduledUpdateGroupActionRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def auto_scaling_group_no(self):
        """Gets the auto_scaling_group_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        오토스케일링그룹번호  # noqa: E501

        :return: The auto_scaling_group_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._auto_scaling_group_no

    @auto_scaling_group_no.setter
    def auto_scaling_group_no(self, auto_scaling_group_no):
        """Sets the auto_scaling_group_no of this PutScheduledUpdateGroupActionRequest.

        오토스케일링그룹번호  # noqa: E501

        :param auto_scaling_group_no: The auto_scaling_group_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """
        if auto_scaling_group_no is None:
            raise ValueError("Invalid value for `auto_scaling_group_no`, must not be `None`")  # noqa: E501

        self._auto_scaling_group_no = auto_scaling_group_no

    @property
    def scheduled_action_no(self):
        """Gets the scheduled_action_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        스케쥴액션번호  # noqa: E501

        :return: The scheduled_action_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_action_no

    @scheduled_action_no.setter
    def scheduled_action_no(self, scheduled_action_no):
        """Sets the scheduled_action_no of this PutScheduledUpdateGroupActionRequest.

        스케쥴액션번호  # noqa: E501

        :param scheduled_action_no: The scheduled_action_no of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._scheduled_action_no = scheduled_action_no

    @property
    def scheduled_action_name(self):
        """Gets the scheduled_action_name of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        스케쥴액션이름  # noqa: E501

        :return: The scheduled_action_name of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_action_name

    @scheduled_action_name.setter
    def scheduled_action_name(self, scheduled_action_name):
        """Sets the scheduled_action_name of this PutScheduledUpdateGroupActionRequest.

        스케쥴액션이름  # noqa: E501

        :param scheduled_action_name: The scheduled_action_name of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._scheduled_action_name = scheduled_action_name

    @property
    def min_size(self):
        """Gets the min_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        최소용량  # noqa: E501

        :return: The min_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_size

    @min_size.setter
    def min_size(self, min_size):
        """Sets the min_size of this PutScheduledUpdateGroupActionRequest.

        최소용량  # noqa: E501

        :param min_size: The min_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: int
        """
        if min_size is None:
            raise ValueError("Invalid value for `min_size`, must not be `None`")  # noqa: E501

        self._min_size = min_size

    @property
    def max_size(self):
        """Gets the max_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        최대용량  # noqa: E501

        :return: The max_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this PutScheduledUpdateGroupActionRequest.

        최대용량  # noqa: E501

        :param max_size: The max_size of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: int
        """
        if max_size is None:
            raise ValueError("Invalid value for `max_size`, must not be `None`")  # noqa: E501

        self._max_size = max_size

    @property
    def desired_capacity(self):
        """Gets the desired_capacity of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        기대용량  # noqa: E501

        :return: The desired_capacity of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: int
        """
        return self._desired_capacity

    @desired_capacity.setter
    def desired_capacity(self, desired_capacity):
        """Sets the desired_capacity of this PutScheduledUpdateGroupActionRequest.

        기대용량  # noqa: E501

        :param desired_capacity: The desired_capacity of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: int
        """

        self._desired_capacity = desired_capacity

    @property
    def start_time(self):
        """Gets the start_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        스케쥴시작일시  # noqa: E501

        :return: The start_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PutScheduledUpdateGroupActionRequest.

        스케쥴시작일시  # noqa: E501

        :param start_time: The start_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        스케쥴종료일시  # noqa: E501

        :return: The end_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PutScheduledUpdateGroupActionRequest.

        스케쥴종료일시  # noqa: E501

        :param end_time: The end_time of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def recurrence(self):
        """Gets the recurrence of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        반복설정  # noqa: E501

        :return: The recurrence of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this PutScheduledUpdateGroupActionRequest.

        반복설정  # noqa: E501

        :param recurrence: The recurrence of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._recurrence = recurrence

    @property
    def time_zone(self):
        """Gets the time_zone of this PutScheduledUpdateGroupActionRequest.  # noqa: E501

        타임존  # noqa: E501

        :return: The time_zone of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this PutScheduledUpdateGroupActionRequest.

        타임존  # noqa: E501

        :param time_zone: The time_zone of this PutScheduledUpdateGroupActionRequest.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutScheduledUpdateGroupActionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
