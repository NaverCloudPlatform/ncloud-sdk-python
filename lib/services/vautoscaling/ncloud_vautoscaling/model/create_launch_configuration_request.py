# coding: utf-8

"""
    vautoscaling

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateLaunchConfigurationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'server_image_product_code': 'str',
        'member_server_image_instance_no': 'str',
        'server_product_code': 'str',
        'is_encrypted_volume': 'bool',
        'init_script_no': 'str',
        'launch_configuration_name': 'str',
        'login_key_name': 'str'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'server_image_product_code': 'serverImageProductCode',
        'member_server_image_instance_no': 'memberServerImageInstanceNo',
        'server_product_code': 'serverProductCode',
        'is_encrypted_volume': 'isEncryptedVolume',
        'init_script_no': 'initScriptNo',
        'launch_configuration_name': 'launchConfigurationName',
        'login_key_name': 'loginKeyName'
    }

    def __init__(self, region_code=None, server_image_product_code=None, member_server_image_instance_no=None, server_product_code=None, is_encrypted_volume=None, init_script_no=None, launch_configuration_name=None, login_key_name=None):  # noqa: E501
        """CreateLaunchConfigurationRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._server_image_product_code = None
        self._member_server_image_instance_no = None
        self._server_product_code = None
        self._is_encrypted_volume = None
        self._init_script_no = None
        self._launch_configuration_name = None
        self._login_key_name = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        if server_image_product_code is not None:
            self.server_image_product_code = server_image_product_code
        if member_server_image_instance_no is not None:
            self.member_server_image_instance_no = member_server_image_instance_no
        if server_product_code is not None:
            self.server_product_code = server_product_code
        if is_encrypted_volume is not None:
            self.is_encrypted_volume = is_encrypted_volume
        if init_script_no is not None:
            self.init_script_no = init_script_no
        if launch_configuration_name is not None:
            self.launch_configuration_name = launch_configuration_name
        if login_key_name is not None:
            self.login_key_name = login_key_name

    @property
    def region_code(self):
        """Gets the region_code of this CreateLaunchConfigurationRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this CreateLaunchConfigurationRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def server_image_product_code(self):
        """Gets the server_image_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501

        서버이미지상품코드  # noqa: E501

        :return: The server_image_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._server_image_product_code

    @server_image_product_code.setter
    def server_image_product_code(self, server_image_product_code):
        """Sets the server_image_product_code of this CreateLaunchConfigurationRequest.

        서버이미지상품코드  # noqa: E501

        :param server_image_product_code: The server_image_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._server_image_product_code = server_image_product_code

    @property
    def member_server_image_instance_no(self):
        """Gets the member_server_image_instance_no of this CreateLaunchConfigurationRequest.  # noqa: E501

        회원서버이미지인스턴스번호  # noqa: E501

        :return: The member_server_image_instance_no of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._member_server_image_instance_no

    @member_server_image_instance_no.setter
    def member_server_image_instance_no(self, member_server_image_instance_no):
        """Sets the member_server_image_instance_no of this CreateLaunchConfigurationRequest.

        회원서버이미지인스턴스번호  # noqa: E501

        :param member_server_image_instance_no: The member_server_image_instance_no of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._member_server_image_instance_no = member_server_image_instance_no

    @property
    def server_product_code(self):
        """Gets the server_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501

        서버상품코드  # noqa: E501

        :return: The server_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._server_product_code

    @server_product_code.setter
    def server_product_code(self, server_product_code):
        """Sets the server_product_code of this CreateLaunchConfigurationRequest.

        서버상품코드  # noqa: E501

        :param server_product_code: The server_product_code of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._server_product_code = server_product_code

    @property
    def is_encrypted_volume(self):
        """Gets the is_encrypted_volume of this CreateLaunchConfigurationRequest.  # noqa: E501

        볼륨암호화여부  # noqa: E501

        :return: The is_encrypted_volume of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_encrypted_volume

    @is_encrypted_volume.setter
    def is_encrypted_volume(self, is_encrypted_volume):
        """Sets the is_encrypted_volume of this CreateLaunchConfigurationRequest.

        볼륨암호화여부  # noqa: E501

        :param is_encrypted_volume: The is_encrypted_volume of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: bool
        """

        self._is_encrypted_volume = is_encrypted_volume

    @property
    def init_script_no(self):
        """Gets the init_script_no of this CreateLaunchConfigurationRequest.  # noqa: E501

        초기화스크립트번호  # noqa: E501

        :return: The init_script_no of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._init_script_no

    @init_script_no.setter
    def init_script_no(self, init_script_no):
        """Sets the init_script_no of this CreateLaunchConfigurationRequest.

        초기화스크립트번호  # noqa: E501

        :param init_script_no: The init_script_no of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._init_script_no = init_script_no

    @property
    def launch_configuration_name(self):
        """Gets the launch_configuration_name of this CreateLaunchConfigurationRequest.  # noqa: E501

        론치설정이름  # noqa: E501

        :return: The launch_configuration_name of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._launch_configuration_name

    @launch_configuration_name.setter
    def launch_configuration_name(self, launch_configuration_name):
        """Sets the launch_configuration_name of this CreateLaunchConfigurationRequest.

        론치설정이름  # noqa: E501

        :param launch_configuration_name: The launch_configuration_name of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._launch_configuration_name = launch_configuration_name

    @property
    def login_key_name(self):
        """Gets the login_key_name of this CreateLaunchConfigurationRequest.  # noqa: E501

        로그인키이름  # noqa: E501

        :return: The login_key_name of this CreateLaunchConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._login_key_name

    @login_key_name.setter
    def login_key_name(self, login_key_name):
        """Sets the login_key_name of this CreateLaunchConfigurationRequest.

        로그인키이름  # noqa: E501

        :param login_key_name: The login_key_name of this CreateLaunchConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._login_key_name = login_key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLaunchConfigurationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
