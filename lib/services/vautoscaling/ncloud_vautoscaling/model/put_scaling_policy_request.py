# coding: utf-8

"""
    vautoscaling

    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PutScalingPolicyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_code': 'str',
        'auto_scaling_group_no': 'str',
        'policy_no': 'str',
        'policy_name': 'str',
        'adjustment_type_code': 'str',
        'scaling_adjustment': 'int',
        'min_adjustment_step': 'int',
        'cool_down': 'int'
    }

    attribute_map = {
        'region_code': 'regionCode',
        'auto_scaling_group_no': 'autoScalingGroupNo',
        'policy_no': 'policyNo',
        'policy_name': 'policyName',
        'adjustment_type_code': 'adjustmentTypeCode',
        'scaling_adjustment': 'scalingAdjustment',
        'min_adjustment_step': 'minAdjustmentStep',
        'cool_down': 'coolDown'
    }

    def __init__(self, region_code=None, auto_scaling_group_no=None, policy_no=None, policy_name=None, adjustment_type_code=None, scaling_adjustment=None, min_adjustment_step=None, cool_down=None):  # noqa: E501
        """PutScalingPolicyRequest - a model defined in Swagger"""  # noqa: E501

        self._region_code = None
        self._auto_scaling_group_no = None
        self._policy_no = None
        self._policy_name = None
        self._adjustment_type_code = None
        self._scaling_adjustment = None
        self._min_adjustment_step = None
        self._cool_down = None
        self.discriminator = None

        if region_code is not None:
            self.region_code = region_code
        self.auto_scaling_group_no = auto_scaling_group_no
        if policy_no is not None:
            self.policy_no = policy_no
        if policy_name is not None:
            self.policy_name = policy_name
        self.adjustment_type_code = adjustment_type_code
        self.scaling_adjustment = scaling_adjustment
        if min_adjustment_step is not None:
            self.min_adjustment_step = min_adjustment_step
        if cool_down is not None:
            self.cool_down = cool_down

    @property
    def region_code(self):
        """Gets the region_code of this PutScalingPolicyRequest.  # noqa: E501

        REGION코드  # noqa: E501

        :return: The region_code of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this PutScalingPolicyRequest.

        REGION코드  # noqa: E501

        :param region_code: The region_code of this PutScalingPolicyRequest.  # noqa: E501
        :type: str
        """

        self._region_code = region_code

    @property
    def auto_scaling_group_no(self):
        """Gets the auto_scaling_group_no of this PutScalingPolicyRequest.  # noqa: E501

        오토스케일링그룹번호  # noqa: E501

        :return: The auto_scaling_group_no of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._auto_scaling_group_no

    @auto_scaling_group_no.setter
    def auto_scaling_group_no(self, auto_scaling_group_no):
        """Sets the auto_scaling_group_no of this PutScalingPolicyRequest.

        오토스케일링그룹번호  # noqa: E501

        :param auto_scaling_group_no: The auto_scaling_group_no of this PutScalingPolicyRequest.  # noqa: E501
        :type: str
        """
        if auto_scaling_group_no is None:
            raise ValueError("Invalid value for `auto_scaling_group_no`, must not be `None`")  # noqa: E501

        self._auto_scaling_group_no = auto_scaling_group_no

    @property
    def policy_no(self):
        """Gets the policy_no of this PutScalingPolicyRequest.  # noqa: E501

        정책번호  # noqa: E501

        :return: The policy_no of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._policy_no

    @policy_no.setter
    def policy_no(self, policy_no):
        """Sets the policy_no of this PutScalingPolicyRequest.

        정책번호  # noqa: E501

        :param policy_no: The policy_no of this PutScalingPolicyRequest.  # noqa: E501
        :type: str
        """

        self._policy_no = policy_no

    @property
    def policy_name(self):
        """Gets the policy_name of this PutScalingPolicyRequest.  # noqa: E501

        정책이름  # noqa: E501

        :return: The policy_name of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PutScalingPolicyRequest.

        정책이름  # noqa: E501

        :param policy_name: The policy_name of this PutScalingPolicyRequest.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def adjustment_type_code(self):
        """Gets the adjustment_type_code of this PutScalingPolicyRequest.  # noqa: E501

        조정유형코드  # noqa: E501

        :return: The adjustment_type_code of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_type_code

    @adjustment_type_code.setter
    def adjustment_type_code(self, adjustment_type_code):
        """Sets the adjustment_type_code of this PutScalingPolicyRequest.

        조정유형코드  # noqa: E501

        :param adjustment_type_code: The adjustment_type_code of this PutScalingPolicyRequest.  # noqa: E501
        :type: str
        """
        if adjustment_type_code is None:
            raise ValueError("Invalid value for `adjustment_type_code`, must not be `None`")  # noqa: E501

        self._adjustment_type_code = adjustment_type_code

    @property
    def scaling_adjustment(self):
        """Gets the scaling_adjustment of this PutScalingPolicyRequest.  # noqa: E501

        조정값  # noqa: E501

        :return: The scaling_adjustment of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: int
        """
        return self._scaling_adjustment

    @scaling_adjustment.setter
    def scaling_adjustment(self, scaling_adjustment):
        """Sets the scaling_adjustment of this PutScalingPolicyRequest.

        조정값  # noqa: E501

        :param scaling_adjustment: The scaling_adjustment of this PutScalingPolicyRequest.  # noqa: E501
        :type: int
        """
        if scaling_adjustment is None:
            raise ValueError("Invalid value for `scaling_adjustment`, must not be `None`")  # noqa: E501

        self._scaling_adjustment = scaling_adjustment

    @property
    def min_adjustment_step(self):
        """Gets the min_adjustment_step of this PutScalingPolicyRequest.  # noqa: E501

        최소조정폭  # noqa: E501

        :return: The min_adjustment_step of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: int
        """
        return self._min_adjustment_step

    @min_adjustment_step.setter
    def min_adjustment_step(self, min_adjustment_step):
        """Sets the min_adjustment_step of this PutScalingPolicyRequest.

        최소조정폭  # noqa: E501

        :param min_adjustment_step: The min_adjustment_step of this PutScalingPolicyRequest.  # noqa: E501
        :type: int
        """

        self._min_adjustment_step = min_adjustment_step

    @property
    def cool_down(self):
        """Gets the cool_down of this PutScalingPolicyRequest.  # noqa: E501

        쿨다운  # noqa: E501

        :return: The cool_down of this PutScalingPolicyRequest.  # noqa: E501
        :rtype: int
        """
        return self._cool_down

    @cool_down.setter
    def cool_down(self, cool_down):
        """Sets the cool_down of this PutScalingPolicyRequest.

        쿨다운  # noqa: E501

        :param cool_down: The cool_down of this PutScalingPolicyRequest.  # noqa: E501
        :type: int
        """

        self._cool_down = cool_down

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutScalingPolicyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
