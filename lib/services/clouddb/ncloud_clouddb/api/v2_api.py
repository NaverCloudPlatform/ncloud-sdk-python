# coding: utf-8

"""
    clouddb

    OpenAPI spec version: 2018-11-13T06:30:03Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_clouddb.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cloud_db_instance(self, create_cloud_db_instance_request, **kwargs):  # noqa: E501
        """create_cloud_db_instance  # noqa: E501

        CloudDB인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cloud_db_instance(create_cloud_db_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCloudDBInstanceRequest create_cloud_db_instance_request: createCloudDBInstanceRequest (required)
        :return: CreateCloudDBInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_cloud_db_instance_with_http_info(create_cloud_db_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cloud_db_instance_with_http_info(create_cloud_db_instance_request, **kwargs)  # noqa: E501
            return data

    def create_cloud_db_instance_with_http_info(self, create_cloud_db_instance_request, **kwargs):  # noqa: E501
        """create_cloud_db_instance  # noqa: E501

        CloudDB인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_cloud_db_instance_with_http_info(create_cloud_db_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCloudDBInstanceRequest create_cloud_db_instance_request: createCloudDBInstanceRequest (required)
        :return: CreateCloudDBInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_cloud_db_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cloud_db_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_cloud_db_instance_request' is set
        if ('create_cloud_db_instance_request' not in params or
                params['create_cloud_db_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_cloud_db_instance_request` when calling `create_cloud_db_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_cloud_db_instance_request' in params:
            body_params = params['create_cloud_db_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createCloudDBInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateCloudDBInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_db_server_instance(self, delete_cloud_db_server_instance_request, **kwargs):  # noqa: E501
        """delete_cloud_db_server_instance  # noqa: E501

        CloudDB서버인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cloud_db_server_instance(delete_cloud_db_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteCloudDBServerInstanceRequest delete_cloud_db_server_instance_request: deleteCloudDBServerInstanceRequest (required)
        :return: DeleteCloudDBServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_cloud_db_server_instance_with_http_info(delete_cloud_db_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_db_server_instance_with_http_info(delete_cloud_db_server_instance_request, **kwargs)  # noqa: E501
            return data

    def delete_cloud_db_server_instance_with_http_info(self, delete_cloud_db_server_instance_request, **kwargs):  # noqa: E501
        """delete_cloud_db_server_instance  # noqa: E501

        CloudDB서버인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_cloud_db_server_instance_with_http_info(delete_cloud_db_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteCloudDBServerInstanceRequest delete_cloud_db_server_instance_request: deleteCloudDBServerInstanceRequest (required)
        :return: DeleteCloudDBServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_cloud_db_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_db_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_cloud_db_server_instance_request' is set
        if ('delete_cloud_db_server_instance_request' not in params or
                params['delete_cloud_db_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `delete_cloud_db_server_instance_request` when calling `delete_cloud_db_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_cloud_db_server_instance_request' in params:
            body_params = params['delete_cloud_db_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteCloudDBServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteCloudDBServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_dms_file(self, download_dms_file_request, **kwargs):  # noqa: E501
        """download_dms_file  # noqa: E501

        DMS파일다운로드  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_dms_file(download_dms_file_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DownloadDmsFileRequest download_dms_file_request: downloadDmsFileRequest (required)
        :return: DownloadDmsFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_dms_file_with_http_info(download_dms_file_request, **kwargs)  # noqa: E501
        else:
            (data) = self.download_dms_file_with_http_info(download_dms_file_request, **kwargs)  # noqa: E501
            return data

    def download_dms_file_with_http_info(self, download_dms_file_request, **kwargs):  # noqa: E501
        """download_dms_file  # noqa: E501

        DMS파일다운로드  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_dms_file_with_http_info(download_dms_file_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DownloadDmsFileRequest download_dms_file_request: downloadDmsFileRequest (required)
        :return: DownloadDmsFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['download_dms_file_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_dms_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'download_dms_file_request' is set
        if ('download_dms_file_request' not in params or
                params['download_dms_file_request'] is None):
            raise ValueError("Missing the required parameter `download_dms_file_request` when calling `download_dms_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'download_dms_file_request' in params:
            body_params = params['download_dms_file_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/downloadDmsFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadDmsFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flush_cloud_db_instance(self, flush_cloud_db_instance_request, **kwargs):  # noqa: E501
        """flush_cloud_db_instance  # noqa: E501

        CloudDB Flush  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.flush_cloud_db_instance(flush_cloud_db_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param FlushCloudDBInstanceRequest flush_cloud_db_instance_request: flushCloudDBInstanceRequest (required)
        :return: FlushCloudDBInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.flush_cloud_db_instance_with_http_info(flush_cloud_db_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.flush_cloud_db_instance_with_http_info(flush_cloud_db_instance_request, **kwargs)  # noqa: E501
            return data

    def flush_cloud_db_instance_with_http_info(self, flush_cloud_db_instance_request, **kwargs):  # noqa: E501
        """flush_cloud_db_instance  # noqa: E501

        CloudDB Flush  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.flush_cloud_db_instance_with_http_info(flush_cloud_db_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param FlushCloudDBInstanceRequest flush_cloud_db_instance_request: flushCloudDBInstanceRequest (required)
        :return: FlushCloudDBInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['flush_cloud_db_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flush_cloud_db_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flush_cloud_db_instance_request' is set
        if ('flush_cloud_db_instance_request' not in params or
                params['flush_cloud_db_instance_request'] is None):
            raise ValueError("Missing the required parameter `flush_cloud_db_instance_request` when calling `flush_cloud_db_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'flush_cloud_db_instance_request' in params:
            body_params = params['flush_cloud_db_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/flushCloudDBInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FlushCloudDBInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_list(self, get_backup_list_request, **kwargs):  # noqa: E501
        """get_backup_list  # noqa: E501

        백업리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_backup_list(get_backup_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBackupListRequest get_backup_list_request: getBackupListRequest (required)
        :return: GetBackupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_backup_list_with_http_info(get_backup_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_list_with_http_info(get_backup_list_request, **kwargs)  # noqa: E501
            return data

    def get_backup_list_with_http_info(self, get_backup_list_request, **kwargs):  # noqa: E501
        """get_backup_list  # noqa: E501

        백업리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_backup_list_with_http_info(get_backup_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetBackupListRequest get_backup_list_request: getBackupListRequest (required)
        :return: GetBackupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_backup_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_backup_list_request' is set
        if ('get_backup_list_request' not in params or
                params['get_backup_list_request'] is None):
            raise ValueError("Missing the required parameter `get_backup_list_request` when calling `get_backup_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_backup_list_request' in params:
            body_params = params['get_backup_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getBackupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBackupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_db_config_group_list(self, get_cloud_db_config_group_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_config_group_list  # noqa: E501

        CloudDB설정그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_config_group_list(get_cloud_db_config_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBConfigGroupListRequest get_cloud_db_config_group_list_request: getCloudDBConfigGroupListRequest (required)
        :return: GetCloudDBConfigGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cloud_db_config_group_list_with_http_info(get_cloud_db_config_group_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_db_config_group_list_with_http_info(get_cloud_db_config_group_list_request, **kwargs)  # noqa: E501
            return data

    def get_cloud_db_config_group_list_with_http_info(self, get_cloud_db_config_group_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_config_group_list  # noqa: E501

        CloudDB설정그룹리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_config_group_list_with_http_info(get_cloud_db_config_group_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBConfigGroupListRequest get_cloud_db_config_group_list_request: getCloudDBConfigGroupListRequest (required)
        :return: GetCloudDBConfigGroupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cloud_db_config_group_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_db_config_group_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cloud_db_config_group_list_request' is set
        if ('get_cloud_db_config_group_list_request' not in params or
                params['get_cloud_db_config_group_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cloud_db_config_group_list_request` when calling `get_cloud_db_config_group_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cloud_db_config_group_list_request' in params:
            body_params = params['get_cloud_db_config_group_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCloudDBConfigGroupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCloudDBConfigGroupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_db_image_product_list(self, get_cloud_db_image_product_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_image_product_list  # noqa: E501

        CloudDB이미지상품리스트  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_image_product_list(get_cloud_db_image_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBImageProductListRequest get_cloud_db_image_product_list_request: getCloudDBImageProductListRequest (required)
        :return: GetCloudDBImageProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cloud_db_image_product_list_with_http_info(get_cloud_db_image_product_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_db_image_product_list_with_http_info(get_cloud_db_image_product_list_request, **kwargs)  # noqa: E501
            return data

    def get_cloud_db_image_product_list_with_http_info(self, get_cloud_db_image_product_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_image_product_list  # noqa: E501

        CloudDB이미지상품리스트  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_image_product_list_with_http_info(get_cloud_db_image_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBImageProductListRequest get_cloud_db_image_product_list_request: getCloudDBImageProductListRequest (required)
        :return: GetCloudDBImageProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cloud_db_image_product_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_db_image_product_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cloud_db_image_product_list_request' is set
        if ('get_cloud_db_image_product_list_request' not in params or
                params['get_cloud_db_image_product_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cloud_db_image_product_list_request` when calling `get_cloud_db_image_product_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cloud_db_image_product_list_request' in params:
            body_params = params['get_cloud_db_image_product_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCloudDBImageProductList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCloudDBImageProductListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_db_instance_list(self, get_cloud_db_instance_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_instance_list  # noqa: E501

        CloudDB인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_instance_list(get_cloud_db_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBInstanceListRequest get_cloud_db_instance_list_request: getCloudDBInstanceListRequest (required)
        :return: GetCloudDBInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cloud_db_instance_list_with_http_info(get_cloud_db_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_db_instance_list_with_http_info(get_cloud_db_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_cloud_db_instance_list_with_http_info(self, get_cloud_db_instance_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_instance_list  # noqa: E501

        CloudDB인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_instance_list_with_http_info(get_cloud_db_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBInstanceListRequest get_cloud_db_instance_list_request: getCloudDBInstanceListRequest (required)
        :return: GetCloudDBInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cloud_db_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_db_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cloud_db_instance_list_request' is set
        if ('get_cloud_db_instance_list_request' not in params or
                params['get_cloud_db_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cloud_db_instance_list_request` when calling `get_cloud_db_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cloud_db_instance_list_request' in params:
            body_params = params['get_cloud_db_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCloudDBInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCloudDBInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_db_product_list(self, get_cloud_db_product_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_product_list  # noqa: E501

        CloudDB상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_product_list(get_cloud_db_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBProductListRequest get_cloud_db_product_list_request: getCloudDBProductListRequest (required)
        :return: GetCloudDBProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cloud_db_product_list_with_http_info(get_cloud_db_product_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_db_product_list_with_http_info(get_cloud_db_product_list_request, **kwargs)  # noqa: E501
            return data

    def get_cloud_db_product_list_with_http_info(self, get_cloud_db_product_list_request, **kwargs):  # noqa: E501
        """get_cloud_db_product_list  # noqa: E501

        CloudDB상품리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cloud_db_product_list_with_http_info(get_cloud_db_product_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCloudDBProductListRequest get_cloud_db_product_list_request: getCloudDBProductListRequest (required)
        :return: GetCloudDBProductListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cloud_db_product_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_db_product_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cloud_db_product_list_request' is set
        if ('get_cloud_db_product_list_request' not in params or
                params['get_cloud_db_product_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cloud_db_product_list_request` when calling `get_cloud_db_product_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cloud_db_product_list_request' in params:
            body_params = params['get_cloud_db_product_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCloudDBProductList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCloudDBProductListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dms_operation(self, get_dms_operation_request, **kwargs):  # noqa: E501
        """get_dms_operation  # noqa: E501

        DMS상태조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dms_operation(get_dms_operation_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetDmsOperationRequest get_dms_operation_request: getDmsOperationRequest (required)
        :return: GetDmsOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dms_operation_with_http_info(get_dms_operation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dms_operation_with_http_info(get_dms_operation_request, **kwargs)  # noqa: E501
            return data

    def get_dms_operation_with_http_info(self, get_dms_operation_request, **kwargs):  # noqa: E501
        """get_dms_operation  # noqa: E501

        DMS상태조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dms_operation_with_http_info(get_dms_operation_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetDmsOperationRequest get_dms_operation_request: getDmsOperationRequest (required)
        :return: GetDmsOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_dms_operation_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dms_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_dms_operation_request' is set
        if ('get_dms_operation_request' not in params or
                params['get_dms_operation_request'] is None):
            raise ValueError("Missing the required parameter `get_dms_operation_request` when calling `get_dms_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_dms_operation_request' in params:
            body_params = params['get_dms_operation_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getDmsOperation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDmsOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_storage_backup_list(self, get_object_storage_backup_list_request, **kwargs):  # noqa: E501
        """get_object_storage_backup_list  # noqa: E501

        오브젝트스토리지백업리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_object_storage_backup_list(get_object_storage_backup_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetObjectStorageBackupListRequest get_object_storage_backup_list_request: getObjectStorageBackupListRequest (required)
        :return: GetObjectStorageBackupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_object_storage_backup_list_with_http_info(get_object_storage_backup_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_storage_backup_list_with_http_info(get_object_storage_backup_list_request, **kwargs)  # noqa: E501
            return data

    def get_object_storage_backup_list_with_http_info(self, get_object_storage_backup_list_request, **kwargs):  # noqa: E501
        """get_object_storage_backup_list  # noqa: E501

        오브젝트스토리지백업리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_object_storage_backup_list_with_http_info(get_object_storage_backup_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetObjectStorageBackupListRequest get_object_storage_backup_list_request: getObjectStorageBackupListRequest (required)
        :return: GetObjectStorageBackupListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_object_storage_backup_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_storage_backup_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_object_storage_backup_list_request' is set
        if ('get_object_storage_backup_list_request' not in params or
                params['get_object_storage_backup_list_request'] is None):
            raise ValueError("Missing the required parameter `get_object_storage_backup_list_request` when calling `get_object_storage_backup_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_object_storage_backup_list_request' in params:
            body_params = params['get_object_storage_backup_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getObjectStorageBackupList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetObjectStorageBackupListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reboot_cloud_db_server_instance(self, reboot_cloud_db_server_instance_request, **kwargs):  # noqa: E501
        """reboot_cloud_db_server_instance  # noqa: E501

        CloudDB서버인스턴스재부팅  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reboot_cloud_db_server_instance(reboot_cloud_db_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RebootCloudDBServerInstanceRequest reboot_cloud_db_server_instance_request: rebootCloudDBServerInstanceRequest (required)
        :return: RebootCloudDBServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reboot_cloud_db_server_instance_with_http_info(reboot_cloud_db_server_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.reboot_cloud_db_server_instance_with_http_info(reboot_cloud_db_server_instance_request, **kwargs)  # noqa: E501
            return data

    def reboot_cloud_db_server_instance_with_http_info(self, reboot_cloud_db_server_instance_request, **kwargs):  # noqa: E501
        """reboot_cloud_db_server_instance  # noqa: E501

        CloudDB서버인스턴스재부팅  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reboot_cloud_db_server_instance_with_http_info(reboot_cloud_db_server_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RebootCloudDBServerInstanceRequest reboot_cloud_db_server_instance_request: rebootCloudDBServerInstanceRequest (required)
        :return: RebootCloudDBServerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reboot_cloud_db_server_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reboot_cloud_db_server_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reboot_cloud_db_server_instance_request' is set
        if ('reboot_cloud_db_server_instance_request' not in params or
                params['reboot_cloud_db_server_instance_request'] is None):
            raise ValueError("Missing the required parameter `reboot_cloud_db_server_instance_request` when calling `reboot_cloud_db_server_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reboot_cloud_db_server_instance_request' in params:
            body_params = params['reboot_cloud_db_server_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/rebootCloudDBServerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RebootCloudDBServerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_dms_database(self, restore_dms_database_request, **kwargs):  # noqa: E501
        """restore_dms_database  # noqa: E501

        DMS데이터베이스복구  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_dms_database(restore_dms_database_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RestoreDmsDatabaseRequest restore_dms_database_request: restoreDmsDatabaseRequest (required)
        :return: RestoreDmsDatabaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.restore_dms_database_with_http_info(restore_dms_database_request, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_dms_database_with_http_info(restore_dms_database_request, **kwargs)  # noqa: E501
            return data

    def restore_dms_database_with_http_info(self, restore_dms_database_request, **kwargs):  # noqa: E501
        """restore_dms_database  # noqa: E501

        DMS데이터베이스복구  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_dms_database_with_http_info(restore_dms_database_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RestoreDmsDatabaseRequest restore_dms_database_request: restoreDmsDatabaseRequest (required)
        :return: RestoreDmsDatabaseResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['restore_dms_database_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_dms_database" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'restore_dms_database_request' is set
        if ('restore_dms_database_request' not in params or
                params['restore_dms_database_request'] is None):
            raise ValueError("Missing the required parameter `restore_dms_database_request` when calling `restore_dms_database`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'restore_dms_database_request' in params:
            body_params = params['restore_dms_database_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/restoreDmsDatabase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestoreDmsDatabaseResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_dms_transaction_log(self, restore_dms_transaction_log_request, **kwargs):  # noqa: E501
        """restore_dms_transaction_log  # noqa: E501

        DMS트랜잭션로그복구  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_dms_transaction_log(restore_dms_transaction_log_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RestoreDmsTransactionLogRequest restore_dms_transaction_log_request: restoreDmsTransactionLogRequest (required)
        :return: RestoreDmsTransactionLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.restore_dms_transaction_log_with_http_info(restore_dms_transaction_log_request, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_dms_transaction_log_with_http_info(restore_dms_transaction_log_request, **kwargs)  # noqa: E501
            return data

    def restore_dms_transaction_log_with_http_info(self, restore_dms_transaction_log_request, **kwargs):  # noqa: E501
        """restore_dms_transaction_log  # noqa: E501

        DMS트랜잭션로그복구  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_dms_transaction_log_with_http_info(restore_dms_transaction_log_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RestoreDmsTransactionLogRequest restore_dms_transaction_log_request: restoreDmsTransactionLogRequest (required)
        :return: RestoreDmsTransactionLogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['restore_dms_transaction_log_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_dms_transaction_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'restore_dms_transaction_log_request' is set
        if ('restore_dms_transaction_log_request' not in params or
                params['restore_dms_transaction_log_request'] is None):
            raise ValueError("Missing the required parameter `restore_dms_transaction_log_request` when calling `restore_dms_transaction_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'restore_dms_transaction_log_request' in params:
            body_params = params['restore_dms_transaction_log_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/restoreDmsTransactionLog', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RestoreDmsTransactionLogResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_object_storage_info(self, set_object_storage_info_request, **kwargs):  # noqa: E501
        """set_object_storage_info  # noqa: E501

        오브젝트스토리지정보설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_object_storage_info(set_object_storage_info_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetObjectStorageInfoRequest set_object_storage_info_request: setObjectStorageInfoRequest (required)
        :return: SetObjectStorageInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_object_storage_info_with_http_info(set_object_storage_info_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_object_storage_info_with_http_info(set_object_storage_info_request, **kwargs)  # noqa: E501
            return data

    def set_object_storage_info_with_http_info(self, set_object_storage_info_request, **kwargs):  # noqa: E501
        """set_object_storage_info  # noqa: E501

        오브젝트스토리지정보설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_object_storage_info_with_http_info(set_object_storage_info_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetObjectStorageInfoRequest set_object_storage_info_request: setObjectStorageInfoRequest (required)
        :return: SetObjectStorageInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_object_storage_info_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_object_storage_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_object_storage_info_request' is set
        if ('set_object_storage_info_request' not in params or
                params['set_object_storage_info_request'] is None):
            raise ValueError("Missing the required parameter `set_object_storage_info_request` when calling `set_object_storage_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_object_storage_info_request' in params:
            body_params = params['set_object_storage_info_request']
        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setObjectStorageInfo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetObjectStorageInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_dms_file(self, upload_dms_file_request, **kwargs):  # noqa: E501
        """upload_dms_file  # noqa: E501

        DMS파일업로드  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_dms_file(upload_dms_file_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UploadDmsFileRequest upload_dms_file_request: uploadDmsFileRequest (required)
        :return: UploadDmsFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_dms_file_with_http_info(upload_dms_file_request, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_dms_file_with_http_info(upload_dms_file_request, **kwargs)  # noqa: E501
            return data

    def upload_dms_file_with_http_info(self, upload_dms_file_request, **kwargs):  # noqa: E501
        """upload_dms_file  # noqa: E501

        DMS파일업로드  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_dms_file_with_http_info(upload_dms_file_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param UploadDmsFileRequest upload_dms_file_request: uploadDmsFileRequest (required)
        :return: UploadDmsFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_dms_file_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_dms_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_dms_file_request' is set
        if ('upload_dms_file_request' not in params or
                params['upload_dms_file_request'] is None):
            raise ValueError("Missing the required parameter `upload_dms_file_request` when calling `upload_dms_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'upload_dms_file_request' in params:
            body_params = params['upload_dms_file_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/uploadDmsFile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadDmsFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
