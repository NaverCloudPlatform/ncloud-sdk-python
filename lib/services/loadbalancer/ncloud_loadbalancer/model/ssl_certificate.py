# coding: utf-8

"""
    loadbalancer

    OpenAPI spec version: 2018-06-21T02:19:18Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SslCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_name': 'str',
        'private_key': 'str',
        'public_key_certificate': 'str',
        'certificate_chain': 'str'
    }

    attribute_map = {
        'certificate_name': 'certificateName',
        'private_key': 'privateKey',
        'public_key_certificate': 'publicKeyCertificate',
        'certificate_chain': 'certificateChain'
    }

    def __init__(self, certificate_name=None, private_key=None, public_key_certificate=None, certificate_chain=None):  # noqa: E501
        """SslCertificate - a model defined in Swagger"""  # noqa: E501

        self._certificate_name = None
        self._private_key = None
        self._public_key_certificate = None
        self._certificate_chain = None
        self.discriminator = None

        if certificate_name is not None:
            self.certificate_name = certificate_name
        if private_key is not None:
            self.private_key = private_key
        if public_key_certificate is not None:
            self.public_key_certificate = public_key_certificate
        if certificate_chain is not None:
            self.certificate_chain = certificate_chain

    @property
    def certificate_name(self):
        """Gets the certificate_name of this SslCertificate.  # noqa: E501

        인증서명  # noqa: E501

        :return: The certificate_name of this SslCertificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this SslCertificate.

        인증서명  # noqa: E501

        :param certificate_name: The certificate_name of this SslCertificate.  # noqa: E501
        :type: str
        """

        self._certificate_name = certificate_name

    @property
    def private_key(self):
        """Gets the private_key of this SslCertificate.  # noqa: E501

        비밀키  # noqa: E501

        :return: The private_key of this SslCertificate.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this SslCertificate.

        비밀키  # noqa: E501

        :param private_key: The private_key of this SslCertificate.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def public_key_certificate(self):
        """Gets the public_key_certificate of this SslCertificate.  # noqa: E501

        공개키인증서  # noqa: E501

        :return: The public_key_certificate of this SslCertificate.  # noqa: E501
        :rtype: str
        """
        return self._public_key_certificate

    @public_key_certificate.setter
    def public_key_certificate(self, public_key_certificate):
        """Sets the public_key_certificate of this SslCertificate.

        공개키인증서  # noqa: E501

        :param public_key_certificate: The public_key_certificate of this SslCertificate.  # noqa: E501
        :type: str
        """

        self._public_key_certificate = public_key_certificate

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this SslCertificate.  # noqa: E501

        chainca  # noqa: E501

        :return: The certificate_chain of this SslCertificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this SslCertificate.

        chainca  # noqa: E501

        :param certificate_chain: The certificate_chain of this SslCertificate.  # noqa: E501
        :type: str
        """

        self._certificate_chain = certificate_chain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SslCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
