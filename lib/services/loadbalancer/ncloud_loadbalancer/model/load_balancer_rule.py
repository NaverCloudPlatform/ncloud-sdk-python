# coding: utf-8

"""
    loadbalancer

    OpenAPI spec version: 2018-06-21T02:19:18Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ncloud_loadbalancer.model.common_code import CommonCode  # noqa: F401,E501


class LoadBalancerRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol_type': 'CommonCode',
        'load_balancer_port': 'int',
        'server_port': 'int',
        'l7_health_check_path': 'str',
        'certificate_name': 'str',
        'proxy_protocol_use_yn': 'str'
    }

    attribute_map = {
        'protocol_type': 'protocolType',
        'load_balancer_port': 'loadBalancerPort',
        'server_port': 'serverPort',
        'l7_health_check_path': 'l7HealthCheckPath',
        'certificate_name': 'certificateName',
        'proxy_protocol_use_yn': 'proxyProtocolUseYn'
    }

    def __init__(self, protocol_type=None, load_balancer_port=None, server_port=None, l7_health_check_path=None, certificate_name=None, proxy_protocol_use_yn=None):  # noqa: E501
        """LoadBalancerRule - a model defined in Swagger"""  # noqa: E501

        self._protocol_type = None
        self._load_balancer_port = None
        self._server_port = None
        self._l7_health_check_path = None
        self._certificate_name = None
        self._proxy_protocol_use_yn = None
        self.discriminator = None

        if protocol_type is not None:
            self.protocol_type = protocol_type
        if load_balancer_port is not None:
            self.load_balancer_port = load_balancer_port
        if server_port is not None:
            self.server_port = server_port
        if l7_health_check_path is not None:
            self.l7_health_check_path = l7_health_check_path
        if certificate_name is not None:
            self.certificate_name = certificate_name
        if proxy_protocol_use_yn is not None:
            self.proxy_protocol_use_yn = proxy_protocol_use_yn

    @property
    def protocol_type(self):
        """Gets the protocol_type of this LoadBalancerRule.  # noqa: E501

        프로토콜  # noqa: E501

        :return: The protocol_type of this LoadBalancerRule.  # noqa: E501
        :rtype: CommonCode
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this LoadBalancerRule.

        프로토콜  # noqa: E501

        :param protocol_type: The protocol_type of this LoadBalancerRule.  # noqa: E501
        :type: CommonCode
        """

        self._protocol_type = protocol_type

    @property
    def load_balancer_port(self):
        """Gets the load_balancer_port of this LoadBalancerRule.  # noqa: E501

        로드밸런서포트  # noqa: E501

        :return: The load_balancer_port of this LoadBalancerRule.  # noqa: E501
        :rtype: int
        """
        return self._load_balancer_port

    @load_balancer_port.setter
    def load_balancer_port(self, load_balancer_port):
        """Sets the load_balancer_port of this LoadBalancerRule.

        로드밸런서포트  # noqa: E501

        :param load_balancer_port: The load_balancer_port of this LoadBalancerRule.  # noqa: E501
        :type: int
        """

        self._load_balancer_port = load_balancer_port

    @property
    def server_port(self):
        """Gets the server_port of this LoadBalancerRule.  # noqa: E501

        서버포트  # noqa: E501

        :return: The server_port of this LoadBalancerRule.  # noqa: E501
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this LoadBalancerRule.

        서버포트  # noqa: E501

        :param server_port: The server_port of this LoadBalancerRule.  # noqa: E501
        :type: int
        """

        self._server_port = server_port

    @property
    def l7_health_check_path(self):
        """Gets the l7_health_check_path of this LoadBalancerRule.  # noqa: E501

        l7헬스체크경로  # noqa: E501

        :return: The l7_health_check_path of this LoadBalancerRule.  # noqa: E501
        :rtype: str
        """
        return self._l7_health_check_path

    @l7_health_check_path.setter
    def l7_health_check_path(self, l7_health_check_path):
        """Sets the l7_health_check_path of this LoadBalancerRule.

        l7헬스체크경로  # noqa: E501

        :param l7_health_check_path: The l7_health_check_path of this LoadBalancerRule.  # noqa: E501
        :type: str
        """

        self._l7_health_check_path = l7_health_check_path

    @property
    def certificate_name(self):
        """Gets the certificate_name of this LoadBalancerRule.  # noqa: E501

        인증서명  # noqa: E501

        :return: The certificate_name of this LoadBalancerRule.  # noqa: E501
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this LoadBalancerRule.

        인증서명  # noqa: E501

        :param certificate_name: The certificate_name of this LoadBalancerRule.  # noqa: E501
        :type: str
        """

        self._certificate_name = certificate_name

    @property
    def proxy_protocol_use_yn(self):
        """Gets the proxy_protocol_use_yn of this LoadBalancerRule.  # noqa: E501

        프록시프로토콜 사용여부  # noqa: E501

        :return: The proxy_protocol_use_yn of this LoadBalancerRule.  # noqa: E501
        :rtype: str
        """
        return self._proxy_protocol_use_yn

    @proxy_protocol_use_yn.setter
    def proxy_protocol_use_yn(self, proxy_protocol_use_yn):
        """Sets the proxy_protocol_use_yn of this LoadBalancerRule.

        프록시프로토콜 사용여부  # noqa: E501

        :param proxy_protocol_use_yn: The proxy_protocol_use_yn of this LoadBalancerRule.  # noqa: E501
        :type: str
        """

        self._proxy_protocol_use_yn = proxy_protocol_use_yn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadBalancerRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
