# coding: utf-8

"""
    loadbalancer

    OpenAPI spec version: 2018-06-21T02:19:18Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_loadbalancer.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_load_balancer_ssl_certificate(self, add_load_balancer_ssl_certificate_request, **kwargs):  # noqa: E501
        """add_load_balancer_ssl_certificate  # noqa: E501

        로드밸런서SSL인증서추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_load_balancer_ssl_certificate(add_load_balancer_ssl_certificate_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddLoadBalancerSslCertificateRequest add_load_balancer_ssl_certificate_request: addLoadBalancerSslCertificateRequest (required)
        :return: AddLoadBalancerSslCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_load_balancer_ssl_certificate_with_http_info(add_load_balancer_ssl_certificate_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_load_balancer_ssl_certificate_with_http_info(add_load_balancer_ssl_certificate_request, **kwargs)  # noqa: E501
            return data

    def add_load_balancer_ssl_certificate_with_http_info(self, add_load_balancer_ssl_certificate_request, **kwargs):  # noqa: E501
        """add_load_balancer_ssl_certificate  # noqa: E501

        로드밸런서SSL인증서추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_load_balancer_ssl_certificate_with_http_info(add_load_balancer_ssl_certificate_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddLoadBalancerSslCertificateRequest add_load_balancer_ssl_certificate_request: addLoadBalancerSslCertificateRequest (required)
        :return: AddLoadBalancerSslCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_load_balancer_ssl_certificate_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_load_balancer_ssl_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_load_balancer_ssl_certificate_request' is set
        if ('add_load_balancer_ssl_certificate_request' not in params or
                params['add_load_balancer_ssl_certificate_request'] is None):
            raise ValueError("Missing the required parameter `add_load_balancer_ssl_certificate_request` when calling `add_load_balancer_ssl_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_load_balancer_ssl_certificate_request' in params:
            body_params = params['add_load_balancer_ssl_certificate_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addLoadBalancerSslCertificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddLoadBalancerSslCertificateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_load_balanced_server_instances(self, change_load_balanced_server_instances_request, **kwargs):  # noqa: E501
        """change_load_balanced_server_instances  # noqa: E501

        로드밸런서에Bind된서버인스턴스변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balanced_server_instances(change_load_balanced_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancedServerInstancesRequest change_load_balanced_server_instances_request: changeLoadBalancedServerInstancesRequest (required)
        :return: ChangeLoadBalancedServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_load_balanced_server_instances_with_http_info(change_load_balanced_server_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_load_balanced_server_instances_with_http_info(change_load_balanced_server_instances_request, **kwargs)  # noqa: E501
            return data

    def change_load_balanced_server_instances_with_http_info(self, change_load_balanced_server_instances_request, **kwargs):  # noqa: E501
        """change_load_balanced_server_instances  # noqa: E501

        로드밸런서에Bind된서버인스턴스변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balanced_server_instances_with_http_info(change_load_balanced_server_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancedServerInstancesRequest change_load_balanced_server_instances_request: changeLoadBalancedServerInstancesRequest (required)
        :return: ChangeLoadBalancedServerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_load_balanced_server_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_load_balanced_server_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_load_balanced_server_instances_request' is set
        if ('change_load_balanced_server_instances_request' not in params or
                params['change_load_balanced_server_instances_request'] is None):
            raise ValueError("Missing the required parameter `change_load_balanced_server_instances_request` when calling `change_load_balanced_server_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_load_balanced_server_instances_request' in params:
            body_params = params['change_load_balanced_server_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeLoadBalancedServerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeLoadBalancedServerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_load_balancer_instance_configuration(self, change_load_balancer_instance_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_instance_configuration  # noqa: E501

        로드밸런서인스턴스설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_instance_configuration(change_load_balancer_instance_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerInstanceConfigurationRequest change_load_balancer_instance_configuration_request: changeLoadBalancerInstanceConfigurationRequest (required)
        :return: ChangeLoadBalancerInstanceConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, **kwargs)  # noqa: E501
            return data

    def change_load_balancer_instance_configuration_with_http_info(self, change_load_balancer_instance_configuration_request, **kwargs):  # noqa: E501
        """change_load_balancer_instance_configuration  # noqa: E501

        로드밸런서인스턴스설정변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_load_balancer_instance_configuration_with_http_info(change_load_balancer_instance_configuration_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeLoadBalancerInstanceConfigurationRequest change_load_balancer_instance_configuration_request: changeLoadBalancerInstanceConfigurationRequest (required)
        :return: ChangeLoadBalancerInstanceConfigurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_load_balancer_instance_configuration_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_load_balancer_instance_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_load_balancer_instance_configuration_request' is set
        if ('change_load_balancer_instance_configuration_request' not in params or
                params['change_load_balancer_instance_configuration_request'] is None):
            raise ValueError("Missing the required parameter `change_load_balancer_instance_configuration_request` when calling `change_load_balancer_instance_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_load_balancer_instance_configuration_request' in params:
            body_params = params['change_load_balancer_instance_configuration_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeLoadBalancerInstanceConfiguration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeLoadBalancerInstanceConfigurationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_load_balancer_instance(self, create_load_balancer_instance_request, **kwargs):  # noqa: E501
        """create_load_balancer_instance  # noqa: E501

        로드밸런서인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_instance(create_load_balancer_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerInstanceRequest create_load_balancer_instance_request: createLoadBalancerInstanceRequest (required)
        :return: CreateLoadBalancerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, **kwargs)  # noqa: E501
            return data

    def create_load_balancer_instance_with_http_info(self, create_load_balancer_instance_request, **kwargs):  # noqa: E501
        """create_load_balancer_instance  # noqa: E501

        로드밸런서인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_load_balancer_instance_with_http_info(create_load_balancer_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateLoadBalancerInstanceRequest create_load_balancer_instance_request: createLoadBalancerInstanceRequest (required)
        :return: CreateLoadBalancerInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_load_balancer_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_load_balancer_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_load_balancer_instance_request' is set
        if ('create_load_balancer_instance_request' not in params or
                params['create_load_balancer_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_load_balancer_instance_request` when calling `create_load_balancer_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_load_balancer_instance_request' in params:
            body_params = params['create_load_balancer_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createLoadBalancerInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateLoadBalancerInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_load_balancer_instances(self, delete_load_balancer_instances_request, **kwargs):  # noqa: E501
        """delete_load_balancer_instances  # noqa: E501

        로드밸런서인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_instances(delete_load_balancer_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerInstancesRequest delete_load_balancer_instances_request: deleteLoadBalancerInstancesRequest (required)
        :return: DeleteLoadBalancerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_load_balancer_instances_with_http_info(self, delete_load_balancer_instances_request, **kwargs):  # noqa: E501
        """delete_load_balancer_instances  # noqa: E501

        로드밸런서인스턴스삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_instances_with_http_info(delete_load_balancer_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerInstancesRequest delete_load_balancer_instances_request: deleteLoadBalancerInstancesRequest (required)
        :return: DeleteLoadBalancerInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_load_balancer_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_load_balancer_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_load_balancer_instances_request' is set
        if ('delete_load_balancer_instances_request' not in params or
                params['delete_load_balancer_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_load_balancer_instances_request` when calling `delete_load_balancer_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_load_balancer_instances_request' in params:
            body_params = params['delete_load_balancer_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteLoadBalancerInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoadBalancerInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_load_balancer_ssl_certificate(self, delete_load_balancer_ssl_certificate_request, **kwargs):  # noqa: E501
        """delete_load_balancer_ssl_certificate  # noqa: E501

        로드밸런서SSL인증서삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_ssl_certificate(delete_load_balancer_ssl_certificate_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerSslCertificateRequest delete_load_balancer_ssl_certificate_request: deleteLoadBalancerSslCertificateRequest (required)
        :return: DeleteLoadBalancerSslCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_load_balancer_ssl_certificate_with_http_info(delete_load_balancer_ssl_certificate_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_load_balancer_ssl_certificate_with_http_info(delete_load_balancer_ssl_certificate_request, **kwargs)  # noqa: E501
            return data

    def delete_load_balancer_ssl_certificate_with_http_info(self, delete_load_balancer_ssl_certificate_request, **kwargs):  # noqa: E501
        """delete_load_balancer_ssl_certificate  # noqa: E501

        로드밸런서SSL인증서삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_load_balancer_ssl_certificate_with_http_info(delete_load_balancer_ssl_certificate_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteLoadBalancerSslCertificateRequest delete_load_balancer_ssl_certificate_request: deleteLoadBalancerSslCertificateRequest (required)
        :return: DeleteLoadBalancerSslCertificateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_load_balancer_ssl_certificate_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_load_balancer_ssl_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_load_balancer_ssl_certificate_request' is set
        if ('delete_load_balancer_ssl_certificate_request' not in params or
                params['delete_load_balancer_ssl_certificate_request'] is None):
            raise ValueError("Missing the required parameter `delete_load_balancer_ssl_certificate_request` when calling `delete_load_balancer_ssl_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_load_balancer_ssl_certificate_request' in params:
            body_params = params['delete_load_balancer_ssl_certificate_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteLoadBalancerSslCertificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteLoadBalancerSslCertificateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balanced_server_instance_list(self, get_load_balanced_server_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balanced_server_instance_list  # noqa: E501

        로드밸런서Bind된서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balanced_server_instance_list(get_load_balanced_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancedServerInstanceListRequest get_load_balanced_server_instance_list_request: getLoadBalancedServerInstanceListRequest (required)
        :return: GetLoadBalancedServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balanced_server_instance_list_with_http_info(get_load_balanced_server_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balanced_server_instance_list_with_http_info(get_load_balanced_server_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balanced_server_instance_list_with_http_info(self, get_load_balanced_server_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balanced_server_instance_list  # noqa: E501

        로드밸런서Bind된서버인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balanced_server_instance_list_with_http_info(get_load_balanced_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancedServerInstanceListRequest get_load_balanced_server_instance_list_request: getLoadBalancedServerInstanceListRequest (required)
        :return: GetLoadBalancedServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balanced_server_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balanced_server_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balanced_server_instance_list_request' is set
        if ('get_load_balanced_server_instance_list_request' not in params or
                params['get_load_balanced_server_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balanced_server_instance_list_request` when calling `get_load_balanced_server_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balanced_server_instance_list_request' in params:
            body_params = params['get_load_balanced_server_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancedServerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancedServerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_instance_list(self, get_load_balancer_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_list  # noqa: E501

        로드밸런서인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_list(get_load_balancer_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceListRequest get_load_balancer_instance_list_request: getLoadBalancerInstanceListRequest (required)
        :return: GetLoadBalancerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_instance_list_with_http_info(self, get_load_balancer_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_instance_list  # noqa: E501

        로드밸런서인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_instance_list_with_http_info(get_load_balancer_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerInstanceListRequest get_load_balancer_instance_list_request: getLoadBalancerInstanceListRequest (required)
        :return: GetLoadBalancerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_instance_list_request' is set
        if ('get_load_balancer_instance_list_request' not in params or
                params['get_load_balancer_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_instance_list_request` when calling `get_load_balancer_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_instance_list_request' in params:
            body_params = params['get_load_balancer_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_ssl_certificate_list(self, get_load_balancer_ssl_certificate_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_ssl_certificate_list  # noqa: E501

        로드밸런서SSL인증서조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_ssl_certificate_list(get_load_balancer_ssl_certificate_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerSslCertificateListRequest get_load_balancer_ssl_certificate_list_request: getLoadBalancerSslCertificateListRequest (required)
        :return: GetLoadBalancerSslCertificateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_ssl_certificate_list_with_http_info(get_load_balancer_ssl_certificate_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_ssl_certificate_list_with_http_info(get_load_balancer_ssl_certificate_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_ssl_certificate_list_with_http_info(self, get_load_balancer_ssl_certificate_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_ssl_certificate_list  # noqa: E501

        로드밸런서SSL인증서조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_ssl_certificate_list_with_http_info(get_load_balancer_ssl_certificate_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerSslCertificateListRequest get_load_balancer_ssl_certificate_list_request: getLoadBalancerSslCertificateListRequest (required)
        :return: GetLoadBalancerSslCertificateListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_ssl_certificate_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_ssl_certificate_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_ssl_certificate_list_request' is set
        if ('get_load_balancer_ssl_certificate_list_request' not in params or
                params['get_load_balancer_ssl_certificate_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_ssl_certificate_list_request` when calling `get_load_balancer_ssl_certificate_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_ssl_certificate_list_request' in params:
            body_params = params['get_load_balancer_ssl_certificate_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerSslCertificateList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerSslCertificateListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_load_balancer_target_server_instance_list(self, get_load_balancer_target_server_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_target_server_instance_list  # noqa: E501

        로드밸런서Target서버인스턴스리스트  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_target_server_instance_list(get_load_balancer_target_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerTargetServerInstanceListRequest get_load_balancer_target_server_instance_list_request: getLoadBalancerTargetServerInstanceListRequest (required)
        :return: GetLoadBalancerTargetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_load_balancer_target_server_instance_list_with_http_info(get_load_balancer_target_server_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_load_balancer_target_server_instance_list_with_http_info(get_load_balancer_target_server_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_load_balancer_target_server_instance_list_with_http_info(self, get_load_balancer_target_server_instance_list_request, **kwargs):  # noqa: E501
        """get_load_balancer_target_server_instance_list  # noqa: E501

        로드밸런서Target서버인스턴스리스트  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_load_balancer_target_server_instance_list_with_http_info(get_load_balancer_target_server_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetLoadBalancerTargetServerInstanceListRequest get_load_balancer_target_server_instance_list_request: getLoadBalancerTargetServerInstanceListRequest (required)
        :return: GetLoadBalancerTargetServerInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_load_balancer_target_server_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_load_balancer_target_server_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_load_balancer_target_server_instance_list_request' is set
        if ('get_load_balancer_target_server_instance_list_request' not in params or
                params['get_load_balancer_target_server_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_load_balancer_target_server_instance_list_request` when calling `get_load_balancer_target_server_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_load_balancer_target_server_instance_list_request' in params:
            body_params = params['get_load_balancer_target_server_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getLoadBalancerTargetServerInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLoadBalancerTargetServerInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
