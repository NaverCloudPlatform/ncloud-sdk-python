# coding: utf-8

"""
    cdn

    OpenAPI spec version: 2018-06-21T02:27:10Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_cdn.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cdn_plus_instance_list(self, get_cdn_plus_instance_list_request, **kwargs):  # noqa: E501
        """get_cdn_plus_instance_list  # noqa: E501

        CDN+인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cdn_plus_instance_list(get_cdn_plus_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusInstanceListRequest get_cdn_plus_instance_list_request: getCdnPlusInstanceListRequest (required)
        :return: GetCdnPlusInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cdn_plus_instance_list_with_http_info(get_cdn_plus_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cdn_plus_instance_list_with_http_info(get_cdn_plus_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_cdn_plus_instance_list_with_http_info(self, get_cdn_plus_instance_list_request, **kwargs):  # noqa: E501
        """get_cdn_plus_instance_list  # noqa: E501

        CDN+인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cdn_plus_instance_list_with_http_info(get_cdn_plus_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusInstanceListRequest get_cdn_plus_instance_list_request: getCdnPlusInstanceListRequest (required)
        :return: GetCdnPlusInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cdn_plus_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cdn_plus_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cdn_plus_instance_list_request' is set
        if ('get_cdn_plus_instance_list_request' not in params or
                params['get_cdn_plus_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cdn_plus_instance_list_request` when calling `get_cdn_plus_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cdn_plus_instance_list_request' in params:
            body_params = params['get_cdn_plus_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCdnPlusInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCdnPlusInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cdn_plus_purge_history_list(self, get_cdn_plus_purge_history_list_request, **kwargs):  # noqa: E501
        """get_cdn_plus_purge_history_list  # noqa: E501

        CDN+퍼지기록조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cdn_plus_purge_history_list(get_cdn_plus_purge_history_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusPurgeHistoryListRequest get_cdn_plus_purge_history_list_request: getCdnPlusPurgeHistoryListRequest (required)
        :return: GetCdnPlusPurgeHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_cdn_plus_purge_history_list_with_http_info(get_cdn_plus_purge_history_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cdn_plus_purge_history_list_with_http_info(get_cdn_plus_purge_history_list_request, **kwargs)  # noqa: E501
            return data

    def get_cdn_plus_purge_history_list_with_http_info(self, get_cdn_plus_purge_history_list_request, **kwargs):  # noqa: E501
        """get_cdn_plus_purge_history_list  # noqa: E501

        CDN+퍼지기록조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cdn_plus_purge_history_list_with_http_info(get_cdn_plus_purge_history_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusPurgeHistoryListRequest get_cdn_plus_purge_history_list_request: getCdnPlusPurgeHistoryListRequest (required)
        :return: GetCdnPlusPurgeHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_cdn_plus_purge_history_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cdn_plus_purge_history_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_cdn_plus_purge_history_list_request' is set
        if ('get_cdn_plus_purge_history_list_request' not in params or
                params['get_cdn_plus_purge_history_list_request'] is None):
            raise ValueError("Missing the required parameter `get_cdn_plus_purge_history_list_request` when calling `get_cdn_plus_purge_history_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_cdn_plus_purge_history_list_request' in params:
            body_params = params['get_cdn_plus_purge_history_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getCdnPlusPurgeHistoryList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetCdnPlusPurgeHistoryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_global_cdn_instance_list(self, get_global_cdn_instance_list_request, **kwargs):  # noqa: E501
        """get_global_cdn_instance_list  # noqa: E501

        Global CDN 인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_global_cdn_instance_list(get_global_cdn_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetGlobalCdnInstanceListRequest get_global_cdn_instance_list_request: getGlobalCdnInstanceListRequest (required)
        :return: GetGlobalCdnInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_global_cdn_instance_list_with_http_info(get_global_cdn_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_global_cdn_instance_list_with_http_info(get_global_cdn_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_global_cdn_instance_list_with_http_info(self, get_global_cdn_instance_list_request, **kwargs):  # noqa: E501
        """get_global_cdn_instance_list  # noqa: E501

        Global CDN 인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_global_cdn_instance_list_with_http_info(get_global_cdn_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetGlobalCdnInstanceListRequest get_global_cdn_instance_list_request: getGlobalCdnInstanceListRequest (required)
        :return: GetGlobalCdnInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_global_cdn_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_cdn_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_global_cdn_instance_list_request' is set
        if ('get_global_cdn_instance_list_request' not in params or
                params['get_global_cdn_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_global_cdn_instance_list_request` when calling `get_global_cdn_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_global_cdn_instance_list_request' in params:
            body_params = params['get_global_cdn_instance_list_request']
        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getGlobalCdnInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGlobalCdnInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_global_cdn_purge_history_list(self, get_global_cdn_purge_history_list_request, **kwargs):  # noqa: E501
        """get_global_cdn_purge_history_list  # noqa: E501

        Global CDN퍼지기록조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_global_cdn_purge_history_list(get_global_cdn_purge_history_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusPurgeHistoryListRequest get_global_cdn_purge_history_list_request: getGlobalCdnPurgeHistoryListRequest (required)
        :return: GetGlobalCdnPurgeHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_global_cdn_purge_history_list_with_http_info(get_global_cdn_purge_history_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_global_cdn_purge_history_list_with_http_info(get_global_cdn_purge_history_list_request, **kwargs)  # noqa: E501
            return data

    def get_global_cdn_purge_history_list_with_http_info(self, get_global_cdn_purge_history_list_request, **kwargs):  # noqa: E501
        """get_global_cdn_purge_history_list  # noqa: E501

        Global CDN퍼지기록조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_global_cdn_purge_history_list_with_http_info(get_global_cdn_purge_history_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetCdnPlusPurgeHistoryListRequest get_global_cdn_purge_history_list_request: getGlobalCdnPurgeHistoryListRequest (required)
        :return: GetGlobalCdnPurgeHistoryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_global_cdn_purge_history_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_cdn_purge_history_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_global_cdn_purge_history_list_request' is set
        if ('get_global_cdn_purge_history_list_request' not in params or
                params['get_global_cdn_purge_history_list_request'] is None):
            raise ValueError("Missing the required parameter `get_global_cdn_purge_history_list_request` when calling `get_global_cdn_purge_history_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_global_cdn_purge_history_list_request' in params:
            body_params = params['get_global_cdn_purge_history_list_request']
        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getGlobalCdnPurgeHistoryList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetGlobalCdnPurgeHistoryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_cdn_plus_purge(self, request_cdn_plus_purge_request, **kwargs):  # noqa: E501
        """request_cdn_plus_purge  # noqa: E501

        CDN+퍼지요청  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_cdn_plus_purge(request_cdn_plus_purge_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RequestCdnPlusPurgeRequest request_cdn_plus_purge_request: requestCdnPlusPurgeRequest (required)
        :return: RequestCdnPlusPurgeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.request_cdn_plus_purge_with_http_info(request_cdn_plus_purge_request, **kwargs)  # noqa: E501
        else:
            (data) = self.request_cdn_plus_purge_with_http_info(request_cdn_plus_purge_request, **kwargs)  # noqa: E501
            return data

    def request_cdn_plus_purge_with_http_info(self, request_cdn_plus_purge_request, **kwargs):  # noqa: E501
        """request_cdn_plus_purge  # noqa: E501

        CDN+퍼지요청  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_cdn_plus_purge_with_http_info(request_cdn_plus_purge_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RequestCdnPlusPurgeRequest request_cdn_plus_purge_request: requestCdnPlusPurgeRequest (required)
        :return: RequestCdnPlusPurgeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_cdn_plus_purge_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_cdn_plus_purge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_cdn_plus_purge_request' is set
        if ('request_cdn_plus_purge_request' not in params or
                params['request_cdn_plus_purge_request'] is None):
            raise ValueError("Missing the required parameter `request_cdn_plus_purge_request` when calling `request_cdn_plus_purge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_cdn_plus_purge_request' in params:
            body_params = params['request_cdn_plus_purge_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/requestCdnPlusPurge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestCdnPlusPurgeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_global_cdn_purge(self, request_global_cdn_purge_request, **kwargs):  # noqa: E501
        """request_global_cdn_purge  # noqa: E501

        Global CDN퍼지요청  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_global_cdn_purge(request_global_cdn_purge_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RequestGlobalCdnPurgeRequest request_global_cdn_purge_request: requestGlobalCdnPurgeRequest (required)
        :return: RequestGlobalCdnPurgeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.request_global_cdn_purge_with_http_info(request_global_cdn_purge_request, **kwargs)  # noqa: E501
        else:
            (data) = self.request_global_cdn_purge_with_http_info(request_global_cdn_purge_request, **kwargs)  # noqa: E501
            return data

    def request_global_cdn_purge_with_http_info(self, request_global_cdn_purge_request, **kwargs):  # noqa: E501
        """request_global_cdn_purge  # noqa: E501

        Global CDN퍼지요청  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.request_global_cdn_purge_with_http_info(request_global_cdn_purge_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RequestGlobalCdnPurgeRequest request_global_cdn_purge_request: requestGlobalCdnPurgeRequest (required)
        :return: RequestGlobalCdnPurgeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_global_cdn_purge_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_global_cdn_purge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_global_cdn_purge_request' is set
        if ('request_global_cdn_purge_request' not in params or
                params['request_global_cdn_purge_request'] is None):
            raise ValueError("Missing the required parameter `request_global_cdn_purge_request` when calling `request_global_cdn_purge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_global_cdn_purge_request' in params:
            body_params = params['request_global_cdn_purge_request']
        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/requestGlobalCdnPurge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestGlobalCdnPurgeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
