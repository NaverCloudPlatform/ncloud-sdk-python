# coding: utf-8

"""
    cdn

    OpenAPI spec version: 2018-06-21T02:27:10Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GlobalCdnServiceDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_domain_type_code': 'str',
        'protocol_type_code': 'str',
        'default_domain_name': 'str',
        'user_domain_name': 'str'
    }

    attribute_map = {
        'service_domain_type_code': 'serviceDomainTypeCode',
        'protocol_type_code': 'protocolTypeCode',
        'default_domain_name': 'defaultDomainName',
        'user_domain_name': 'userDomainName'
    }

    def __init__(self, service_domain_type_code=None, protocol_type_code=None, default_domain_name=None, user_domain_name=None):  # noqa: E501
        """GlobalCdnServiceDomain - a model defined in Swagger"""  # noqa: E501

        self._service_domain_type_code = None
        self._protocol_type_code = None
        self._default_domain_name = None
        self._user_domain_name = None
        self.discriminator = None

        if service_domain_type_code is not None:
            self.service_domain_type_code = service_domain_type_code
        if protocol_type_code is not None:
            self.protocol_type_code = protocol_type_code
        if default_domain_name is not None:
            self.default_domain_name = default_domain_name
        if user_domain_name is not None:
            self.user_domain_name = user_domain_name

    @property
    def service_domain_type_code(self):
        """Gets the service_domain_type_code of this GlobalCdnServiceDomain.  # noqa: E501

        서비스도메인구분코드  # noqa: E501

        :return: The service_domain_type_code of this GlobalCdnServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._service_domain_type_code

    @service_domain_type_code.setter
    def service_domain_type_code(self, service_domain_type_code):
        """Sets the service_domain_type_code of this GlobalCdnServiceDomain.

        서비스도메인구분코드  # noqa: E501

        :param service_domain_type_code: The service_domain_type_code of this GlobalCdnServiceDomain.  # noqa: E501
        :type: str
        """

        self._service_domain_type_code = service_domain_type_code

    @property
    def protocol_type_code(self):
        """Gets the protocol_type_code of this GlobalCdnServiceDomain.  # noqa: E501

        프로토콜구분코드  # noqa: E501

        :return: The protocol_type_code of this GlobalCdnServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type_code

    @protocol_type_code.setter
    def protocol_type_code(self, protocol_type_code):
        """Sets the protocol_type_code of this GlobalCdnServiceDomain.

        프로토콜구분코드  # noqa: E501

        :param protocol_type_code: The protocol_type_code of this GlobalCdnServiceDomain.  # noqa: E501
        :type: str
        """

        self._protocol_type_code = protocol_type_code

    @property
    def default_domain_name(self):
        """Gets the default_domain_name of this GlobalCdnServiceDomain.  # noqa: E501

        디폴트도메인이름  # noqa: E501

        :return: The default_domain_name of this GlobalCdnServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._default_domain_name

    @default_domain_name.setter
    def default_domain_name(self, default_domain_name):
        """Sets the default_domain_name of this GlobalCdnServiceDomain.

        디폴트도메인이름  # noqa: E501

        :param default_domain_name: The default_domain_name of this GlobalCdnServiceDomain.  # noqa: E501
        :type: str
        """

        self._default_domain_name = default_domain_name

    @property
    def user_domain_name(self):
        """Gets the user_domain_name of this GlobalCdnServiceDomain.  # noqa: E501

        유저도메인이름  # noqa: E501

        :return: The user_domain_name of this GlobalCdnServiceDomain.  # noqa: E501
        :rtype: str
        """
        return self._user_domain_name

    @user_domain_name.setter
    def user_domain_name(self, user_domain_name):
        """Sets the user_domain_name of this GlobalCdnServiceDomain.

        유저도메인이름  # noqa: E501

        :param user_domain_name: The user_domain_name of this GlobalCdnServiceDomain.  # noqa: E501
        :type: str
        """

        self._user_domain_name = user_domain_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalCdnServiceDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
