# coding: utf-8

"""
    vnas

    OpenAPI spec version: 2020-09-17T02:28:41Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ncloud_vnas.api_client import ApiClient


class V2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_nas_volume_access_control(self, add_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """add_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_nas_volume_access_control(add_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNasVolumeAccessControlRequest add_nas_volume_access_control_request: addNasVolumeAccessControlRequest (required)
        :return: AddNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_nas_volume_access_control_with_http_info(add_nas_volume_access_control_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_nas_volume_access_control_with_http_info(add_nas_volume_access_control_request, **kwargs)  # noqa: E501
            return data

    def add_nas_volume_access_control_with_http_info(self, add_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """add_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어추가  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_nas_volume_access_control_with_http_info(add_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddNasVolumeAccessControlRequest add_nas_volume_access_control_request: addNasVolumeAccessControlRequest (required)
        :return: AddNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['add_nas_volume_access_control_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_nas_volume_access_control" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'add_nas_volume_access_control_request' is set
        if ('add_nas_volume_access_control_request' not in params or
                params['add_nas_volume_access_control_request'] is None):
            raise ValueError("Missing the required parameter `add_nas_volume_access_control_request` when calling `add_nas_volume_access_control`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_nas_volume_access_control_request' in params:
            body_params = params['add_nas_volume_access_control_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/addNasVolumeAccessControl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddNasVolumeAccessControlResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_nas_volume_size(self, change_nas_volume_size_request, **kwargs):  # noqa: E501
        """change_nas_volume_size  # noqa: E501

        NAS볼륨사이즈변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_nas_volume_size(change_nas_volume_size_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeNasVolumeSizeRequest change_nas_volume_size_request: changeNasVolumeSizeRequest (required)
        :return: ChangeNasVolumeSizeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.change_nas_volume_size_with_http_info(change_nas_volume_size_request, **kwargs)  # noqa: E501
        else:
            (data) = self.change_nas_volume_size_with_http_info(change_nas_volume_size_request, **kwargs)  # noqa: E501
            return data

    def change_nas_volume_size_with_http_info(self, change_nas_volume_size_request, **kwargs):  # noqa: E501
        """change_nas_volume_size  # noqa: E501

        NAS볼륨사이즈변경  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.change_nas_volume_size_with_http_info(change_nas_volume_size_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ChangeNasVolumeSizeRequest change_nas_volume_size_request: changeNasVolumeSizeRequest (required)
        :return: ChangeNasVolumeSizeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['change_nas_volume_size_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_nas_volume_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'change_nas_volume_size_request' is set
        if ('change_nas_volume_size_request' not in params or
                params['change_nas_volume_size_request'] is None):
            raise ValueError("Missing the required parameter `change_nas_volume_size_request` when calling `change_nas_volume_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'change_nas_volume_size_request' in params:
            body_params = params['change_nas_volume_size_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/changeNasVolumeSize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeNasVolumeSizeResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nas_volume_instance(self, create_nas_volume_instance_request, **kwargs):  # noqa: E501
        """create_nas_volume_instance  # noqa: E501

        NAS볼륨인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nas_volume_instance(create_nas_volume_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNasVolumeInstanceRequest create_nas_volume_instance_request: createNasVolumeInstanceRequest (required)
        :return: CreateNasVolumeInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_nas_volume_instance_with_http_info(create_nas_volume_instance_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_nas_volume_instance_with_http_info(create_nas_volume_instance_request, **kwargs)  # noqa: E501
            return data

    def create_nas_volume_instance_with_http_info(self, create_nas_volume_instance_request, **kwargs):  # noqa: E501
        """create_nas_volume_instance  # noqa: E501

        NAS볼륨인스턴스생성  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_nas_volume_instance_with_http_info(create_nas_volume_instance_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateNasVolumeInstanceRequest create_nas_volume_instance_request: createNasVolumeInstanceRequest (required)
        :return: CreateNasVolumeInstanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_nas_volume_instance_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nas_volume_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_nas_volume_instance_request' is set
        if ('create_nas_volume_instance_request' not in params or
                params['create_nas_volume_instance_request'] is None):
            raise ValueError("Missing the required parameter `create_nas_volume_instance_request` when calling `create_nas_volume_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_nas_volume_instance_request' in params:
            body_params = params['create_nas_volume_instance_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/createNasVolumeInstance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateNasVolumeInstanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_nas_volume_instances(self, delete_nas_volume_instances_request, **kwargs):  # noqa: E501
        """delete_nas_volume_instances  # noqa: E501

        NAS볼륨인스턴스제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nas_volume_instances(delete_nas_volume_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNasVolumeInstancesRequest delete_nas_volume_instances_request: deleteNasVolumeInstancesRequest (required)
        :return: DeleteNasVolumeInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_nas_volume_instances_with_http_info(delete_nas_volume_instances_request, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_nas_volume_instances_with_http_info(delete_nas_volume_instances_request, **kwargs)  # noqa: E501
            return data

    def delete_nas_volume_instances_with_http_info(self, delete_nas_volume_instances_request, **kwargs):  # noqa: E501
        """delete_nas_volume_instances  # noqa: E501

        NAS볼륨인스턴스제거  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_nas_volume_instances_with_http_info(delete_nas_volume_instances_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DeleteNasVolumeInstancesRequest delete_nas_volume_instances_request: deleteNasVolumeInstancesRequest (required)
        :return: DeleteNasVolumeInstancesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_nas_volume_instances_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_nas_volume_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_nas_volume_instances_request' is set
        if ('delete_nas_volume_instances_request' not in params or
                params['delete_nas_volume_instances_request'] is None):
            raise ValueError("Missing the required parameter `delete_nas_volume_instances_request` when calling `delete_nas_volume_instances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_nas_volume_instances_request' in params:
            body_params = params['delete_nas_volume_instances_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/deleteNasVolumeInstances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteNasVolumeInstancesResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nas_volume_instance_detail(self, get_nas_volume_instance_detail_request, **kwargs):  # noqa: E501
        """get_nas_volume_instance_detail  # noqa: E501

        NAS볼륨인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nas_volume_instance_detail(get_nas_volume_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNasVolumeInstanceDetailRequest get_nas_volume_instance_detail_request: getNasVolumeInstanceDetailRequest (required)
        :return: GetNasVolumeInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nas_volume_instance_detail_with_http_info(get_nas_volume_instance_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nas_volume_instance_detail_with_http_info(get_nas_volume_instance_detail_request, **kwargs)  # noqa: E501
            return data

    def get_nas_volume_instance_detail_with_http_info(self, get_nas_volume_instance_detail_request, **kwargs):  # noqa: E501
        """get_nas_volume_instance_detail  # noqa: E501

        NAS볼륨인스턴스상세조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nas_volume_instance_detail_with_http_info(get_nas_volume_instance_detail_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNasVolumeInstanceDetailRequest get_nas_volume_instance_detail_request: getNasVolumeInstanceDetailRequest (required)
        :return: GetNasVolumeInstanceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_nas_volume_instance_detail_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nas_volume_instance_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_nas_volume_instance_detail_request' is set
        if ('get_nas_volume_instance_detail_request' not in params or
                params['get_nas_volume_instance_detail_request'] is None):
            raise ValueError("Missing the required parameter `get_nas_volume_instance_detail_request` when calling `get_nas_volume_instance_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_nas_volume_instance_detail_request' in params:
            body_params = params['get_nas_volume_instance_detail_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNasVolumeInstanceDetail', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNasVolumeInstanceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nas_volume_instance_list(self, get_nas_volume_instance_list_request, **kwargs):  # noqa: E501
        """get_nas_volume_instance_list  # noqa: E501

        NAS볼륨인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nas_volume_instance_list(get_nas_volume_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNasVolumeInstanceListRequest get_nas_volume_instance_list_request: getNasVolumeInstanceListRequest (required)
        :return: GetNasVolumeInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_nas_volume_instance_list_with_http_info(get_nas_volume_instance_list_request, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nas_volume_instance_list_with_http_info(get_nas_volume_instance_list_request, **kwargs)  # noqa: E501
            return data

    def get_nas_volume_instance_list_with_http_info(self, get_nas_volume_instance_list_request, **kwargs):  # noqa: E501
        """get_nas_volume_instance_list  # noqa: E501

        NAS볼륨인스턴스리스트조회  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_nas_volume_instance_list_with_http_info(get_nas_volume_instance_list_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param GetNasVolumeInstanceListRequest get_nas_volume_instance_list_request: getNasVolumeInstanceListRequest (required)
        :return: GetNasVolumeInstanceListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_nas_volume_instance_list_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nas_volume_instance_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_nas_volume_instance_list_request' is set
        if ('get_nas_volume_instance_list_request' not in params or
                params['get_nas_volume_instance_list_request'] is None):
            raise ValueError("Missing the required parameter `get_nas_volume_instance_list_request` when calling `get_nas_volume_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_nas_volume_instance_list_request' in params:
            body_params = params['get_nas_volume_instance_list_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/getNasVolumeInstanceList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetNasVolumeInstanceListResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_nas_volume_access_control(self, remove_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """remove_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_nas_volume_access_control(remove_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNasVolumeAccessControlRequest remove_nas_volume_access_control_request: removeNasVolumeAccessControlRequest (required)
        :return: RemoveNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_nas_volume_access_control_with_http_info(remove_nas_volume_access_control_request, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_nas_volume_access_control_with_http_info(remove_nas_volume_access_control_request, **kwargs)  # noqa: E501
            return data

    def remove_nas_volume_access_control_with_http_info(self, remove_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """remove_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어삭제  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_nas_volume_access_control_with_http_info(remove_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param RemoveNasVolumeAccessControlRequest remove_nas_volume_access_control_request: removeNasVolumeAccessControlRequest (required)
        :return: RemoveNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['remove_nas_volume_access_control_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_nas_volume_access_control" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'remove_nas_volume_access_control_request' is set
        if ('remove_nas_volume_access_control_request' not in params or
                params['remove_nas_volume_access_control_request'] is None):
            raise ValueError("Missing the required parameter `remove_nas_volume_access_control_request` when calling `remove_nas_volume_access_control`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'remove_nas_volume_access_control_request' in params:
            body_params = params['remove_nas_volume_access_control_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/removeNasVolumeAccessControl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveNasVolumeAccessControlResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_nas_volume_access_control(self, set_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """set_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_nas_volume_access_control(set_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNasVolumeAccessControlRequest set_nas_volume_access_control_request: setNasVolumeAccessControlRequest (required)
        :return: SetNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_nas_volume_access_control_with_http_info(set_nas_volume_access_control_request, **kwargs)  # noqa: E501
        else:
            (data) = self.set_nas_volume_access_control_with_http_info(set_nas_volume_access_control_request, **kwargs)  # noqa: E501
            return data

    def set_nas_volume_access_control_with_http_info(self, set_nas_volume_access_control_request, **kwargs):  # noqa: E501
        """set_nas_volume_access_control  # noqa: E501

        NAS볼륨접근제어설정  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_nas_volume_access_control_with_http_info(set_nas_volume_access_control_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param SetNasVolumeAccessControlRequest set_nas_volume_access_control_request: setNasVolumeAccessControlRequest (required)
        :return: SetNasVolumeAccessControlResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_nas_volume_access_control_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_nas_volume_access_control" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_nas_volume_access_control_request' is set
        if ('set_nas_volume_access_control_request' not in params or
                params['set_nas_volume_access_control_request'] is None):
            raise ValueError("Missing the required parameter `set_nas_volume_access_control_request` when calling `set_nas_volume_access_control`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        query_params.append(('responseFormatType', 'json'))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_nas_volume_access_control_request' in params:
            body_params = params['set_nas_volume_access_control_request']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-ncp-iam']  # noqa: E501

        return self.api_client.call_api(
            '/setNasVolumeAccessControl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetNasVolumeAccessControlResponse',  # noqa: E501
            auth_settings=auth_settings,
            _async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
